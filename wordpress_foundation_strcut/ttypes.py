#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class NewsletterForm(object):
    """
    Attributes:
     - appid
     - account_id
     - plateform_type
     - return_last_version
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'appid', None, None, ),  # 1
        (2, TType.I32, 'account_id', None, None, ),  # 2
        (3, TType.BYTE, 'plateform_type', None, None, ),  # 3
        (4, TType.BYTE, 'return_last_version', None, None, ),  # 4
    )

    def __init__(self, appid=None, account_id=None, plateform_type=None, return_last_version=None,):
        self.appid = appid
        self.account_id = account_id
        self.plateform_type = plateform_type
        self.return_last_version = return_last_version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.plateform_type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.return_last_version = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('NewsletterForm')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 1)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        if self.plateform_type is not None:
            oprot.writeFieldBegin('plateform_type', TType.BYTE, 3)
            oprot.writeByte(self.plateform_type)
            oprot.writeFieldEnd()
        if self.return_last_version is not None:
            oprot.writeFieldBegin('return_last_version', TType.BYTE, 4)
            oprot.writeByte(self.return_last_version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NewsletterData(object):
    """
    Attributes:
     - show_new_version
     - version
     - update_time
     - update_list
     - url
     - title
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BYTE, 'show_new_version', None, None, ),  # 1
        (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'update_time', 'UTF8', None, ),  # 3
        (4, TType.LIST, 'update_list', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.STRING, 'url', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'title', 'UTF8', None, ),  # 6
    )

    def __init__(self, show_new_version=None, version=None, update_time=None, update_list=None, url=None, title=None,):
        self.show_new_version = show_new_version
        self.version = version
        self.update_time = update_time
        self.update_list = update_list
        self.url = url
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.show_new_version = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.update_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.update_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('NewsletterData')
        if self.show_new_version is not None:
            oprot.writeFieldBegin('show_new_version', TType.BYTE, 1)
            oprot.writeByte(self.show_new_version)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 3)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.update_list is not None:
            oprot.writeFieldBegin('update_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.update_list))
            for iter6 in self.update_list:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 5)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 6)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
