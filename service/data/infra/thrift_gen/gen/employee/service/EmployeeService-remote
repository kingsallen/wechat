#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.employee.service import EmployeeService
from thrift_gen.gen.employee.service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  EmployeeResponse getEmployee(i32 userId, i32 companyId)')
    print('  EmployeeVerificationConfResponse getEmployeeVerificationConf(i32 companyId)')
    print('  Result bind(BindingParams bindingParams)')
    print('  Result unbind(i32 employeeId, i32 companyId, i32 userId)')
    print('   getEmployeeCustomFieldsConf(i32 companyId)')
    print('  Result setEmployeeCustomInfo(string customValues)')
    print('  RewardsResponse getEmployeeRewards(i32 employeeId, i32 companyId)')
    print('   getEmployeeRecoms(i32 recomId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = EmployeeService.Client(protocol)
transport.open()

if cmd == 'getEmployee':
    if len(args) != 2:
        print('getEmployee requires 2 args')
        sys.exit(1)
    pp.pprint(client.getEmployee(eval(args[0]), eval(args[1]),))

elif cmd == 'getEmployeeVerificationConf':
    if len(args) != 1:
        print('getEmployeeVerificationConf requires 1 args')
        sys.exit(1)
    pp.pprint(client.getEmployeeVerificationConf(eval(args[0]),))

elif cmd == 'bind':
    if len(args) != 1:
        print('bind requires 1 args')
        sys.exit(1)
    pp.pprint(client.bind(eval(args[0]),))

elif cmd == 'unbind':
    if len(args) != 3:
        print('unbind requires 3 args')
        sys.exit(1)
    pp.pprint(client.unbind(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getEmployeeCustomFieldsConf':
    if len(args) != 1:
        print('getEmployeeCustomFieldsConf requires 1 args')
        sys.exit(1)
    pp.pprint(client.getEmployeeCustomFieldsConf(eval(args[0]),))

elif cmd == 'setEmployeeCustomInfo':
    if len(args) != 1:
        print('setEmployeeCustomInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.setEmployeeCustomInfo(args[0],))

elif cmd == 'getEmployeeRewards':
    if len(args) != 2:
        print('getEmployeeRewards requires 2 args')
        sys.exit(1)
    pp.pprint(client.getEmployeeRewards(eval(args[0]), eval(args[1]),))

elif cmd == 'getEmployeeRecoms':
    if len(args) != 1:
        print('getEmployeeRecoms requires 1 args')
        sys.exit(1)
    pp.pprint(client.getEmployeeRecoms(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
