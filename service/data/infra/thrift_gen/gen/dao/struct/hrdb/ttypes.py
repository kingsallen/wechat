#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class HrOperationrecordDO(object):
    """
    Attributes:
     - admin_id
     - company_id
     - app_id
     - status_id
     - operate_tpl_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'admin_id', None, None, ),  # 1
        (2, TType.DOUBLE, 'company_id', None, None, ),  # 2
        (3, TType.DOUBLE, 'app_id', None, None, ),  # 3
        (4, TType.DOUBLE, 'status_id', None, None, ),  # 4
        (5, TType.I32, 'operate_tpl_id', None, None, ),  # 5
    )

    def __init__(self, admin_id=None, company_id=None, app_id=None, status_id=None, operate_tpl_id=None,):
        self.admin_id = admin_id
        self.company_id = company_id
        self.app_id = app_id
        self.status_id = status_id
        self.operate_tpl_id = operate_tpl_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.admin_id = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.company_id = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.app_id = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.status_id = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.operate_tpl_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrOperationrecordDO')
        if self.admin_id is not None:
            oprot.writeFieldBegin('admin_id', TType.DOUBLE, 1)
            oprot.writeDouble(self.admin_id)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.DOUBLE, 2)
            oprot.writeDouble(self.company_id)
            oprot.writeFieldEnd()
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.DOUBLE, 3)
            oprot.writeDouble(self.app_id)
            oprot.writeFieldEnd()
        if self.status_id is not None:
            oprot.writeFieldBegin('status_id', TType.DOUBLE, 4)
            oprot.writeDouble(self.status_id)
            oprot.writeFieldEnd()
        if self.operate_tpl_id is not None:
            oprot.writeFieldBegin('operate_tpl_id', TType.I32, 5)
            oprot.writeI32(self.operate_tpl_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrHbConfigDO(object):
    """
    Attributes:
     - id
     - type
     - target
     - company_id
     - start_time
     - end_time
     - total_amount
     - range_min
     - range_max
     - probability
     - d_type
     - headline
     - headline_failure
     - share_title
     - share_desc
     - share_img
     - status
     - checked
     - estimated_total
     - create_time
     - update_time
     - actual_total
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.I32, 'target', None, None, ),  # 3
        (4, TType.I32, 'company_id', None, None, ),  # 4
        (5, TType.STRING, 'start_time', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'end_time', 'UTF8', None, ),  # 6
        (7, TType.I32, 'total_amount', None, None, ),  # 7
        (8, TType.DOUBLE, 'range_min', None, None, ),  # 8
        (9, TType.DOUBLE, 'range_max', None, None, ),  # 9
        (10, TType.I32, 'probability', None, None, ),  # 10
        (11, TType.I32, 'd_type', None, None, ),  # 11
        (12, TType.STRING, 'headline', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'headline_failure', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'share_title', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'share_desc', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'share_img', 'UTF8', None, ),  # 16
        (17, TType.I32, 'status', None, None, ),  # 17
        (18, TType.I32, 'checked', None, None, ),  # 18
        (19, TType.I32, 'estimated_total', None, None, ),  # 19
        (20, TType.STRING, 'create_time', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'update_time', 'UTF8', None, ),  # 21
        (22, TType.I32, 'actual_total', None, None, ),  # 22
    )

    def __init__(self, id=None, type=None, target=None, company_id=None, start_time=None, end_time=None, total_amount=None, range_min=None, range_max=None, probability=None, d_type=None, headline=None, headline_failure=None, share_title=None, share_desc=None, share_img=None, status=None, checked=None, estimated_total=None, create_time=None, update_time=None, actual_total=None,):
        self.id = id
        self.type = type
        self.target = target
        self.company_id = company_id
        self.start_time = start_time
        self.end_time = end_time
        self.total_amount = total_amount
        self.range_min = range_min
        self.range_max = range_max
        self.probability = probability
        self.d_type = d_type
        self.headline = headline
        self.headline_failure = headline_failure
        self.share_title = share_title
        self.share_desc = share_desc
        self.share_img = share_img
        self.status = status
        self.checked = checked
        self.estimated_total = estimated_total
        self.create_time = create_time
        self.update_time = update_time
        self.actual_total = actual_total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.target = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.start_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.end_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.total_amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.range_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.range_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.probability = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.d_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.headline = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.headline_failure = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.share_title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.share_desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.share_img = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.checked = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.estimated_total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.actual_total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrHbConfigDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.I32, 3)
            oprot.writeI32(self.target)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 4)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.start_time is not None:
            oprot.writeFieldBegin('start_time', TType.STRING, 5)
            oprot.writeString(self.start_time.encode('utf-8') if sys.version_info[0] == 2 else self.start_time)
            oprot.writeFieldEnd()
        if self.end_time is not None:
            oprot.writeFieldBegin('end_time', TType.STRING, 6)
            oprot.writeString(self.end_time.encode('utf-8') if sys.version_info[0] == 2 else self.end_time)
            oprot.writeFieldEnd()
        if self.total_amount is not None:
            oprot.writeFieldBegin('total_amount', TType.I32, 7)
            oprot.writeI32(self.total_amount)
            oprot.writeFieldEnd()
        if self.range_min is not None:
            oprot.writeFieldBegin('range_min', TType.DOUBLE, 8)
            oprot.writeDouble(self.range_min)
            oprot.writeFieldEnd()
        if self.range_max is not None:
            oprot.writeFieldBegin('range_max', TType.DOUBLE, 9)
            oprot.writeDouble(self.range_max)
            oprot.writeFieldEnd()
        if self.probability is not None:
            oprot.writeFieldBegin('probability', TType.I32, 10)
            oprot.writeI32(self.probability)
            oprot.writeFieldEnd()
        if self.d_type is not None:
            oprot.writeFieldBegin('d_type', TType.I32, 11)
            oprot.writeI32(self.d_type)
            oprot.writeFieldEnd()
        if self.headline is not None:
            oprot.writeFieldBegin('headline', TType.STRING, 12)
            oprot.writeString(self.headline.encode('utf-8') if sys.version_info[0] == 2 else self.headline)
            oprot.writeFieldEnd()
        if self.headline_failure is not None:
            oprot.writeFieldBegin('headline_failure', TType.STRING, 13)
            oprot.writeString(self.headline_failure.encode('utf-8') if sys.version_info[0] == 2 else self.headline_failure)
            oprot.writeFieldEnd()
        if self.share_title is not None:
            oprot.writeFieldBegin('share_title', TType.STRING, 14)
            oprot.writeString(self.share_title.encode('utf-8') if sys.version_info[0] == 2 else self.share_title)
            oprot.writeFieldEnd()
        if self.share_desc is not None:
            oprot.writeFieldBegin('share_desc', TType.STRING, 15)
            oprot.writeString(self.share_desc.encode('utf-8') if sys.version_info[0] == 2 else self.share_desc)
            oprot.writeFieldEnd()
        if self.share_img is not None:
            oprot.writeFieldBegin('share_img', TType.STRING, 16)
            oprot.writeString(self.share_img.encode('utf-8') if sys.version_info[0] == 2 else self.share_img)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 17)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.checked is not None:
            oprot.writeFieldBegin('checked', TType.I32, 18)
            oprot.writeI32(self.checked)
            oprot.writeFieldEnd()
        if self.estimated_total is not None:
            oprot.writeFieldBegin('estimated_total', TType.I32, 19)
            oprot.writeI32(self.estimated_total)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 20)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 21)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.actual_total is not None:
            oprot.writeFieldBegin('actual_total', TType.I32, 22)
            oprot.writeI32(self.actual_total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrHbPositionBindingDO(object):
    """
    Attributes:
     - id
     - hb_config_id
     - position_id
     - trigger_way
     - total_amount
     - total_num
     - create_time
     - update_time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'hb_config_id', None, None, ),  # 2
        (3, TType.I32, 'position_id', None, None, ),  # 3
        (4, TType.I32, 'trigger_way', None, None, ),  # 4
        (5, TType.DOUBLE, 'total_amount', None, None, ),  # 5
        (6, TType.I32, 'total_num', None, None, ),  # 6
        (7, TType.STRING, 'create_time', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'update_time', 'UTF8', None, ),  # 8
    )

    def __init__(self, id=None, hb_config_id=None, position_id=None, trigger_way=None, total_amount=None, total_num=None, create_time=None, update_time=None,):
        self.id = id
        self.hb_config_id = hb_config_id
        self.position_id = position_id
        self.trigger_way = trigger_way
        self.total_amount = total_amount
        self.total_num = total_num
        self.create_time = create_time
        self.update_time = update_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hb_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.trigger_way = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.total_amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.total_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrHbPositionBindingDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.hb_config_id is not None:
            oprot.writeFieldBegin('hb_config_id', TType.I32, 2)
            oprot.writeI32(self.hb_config_id)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 3)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.trigger_way is not None:
            oprot.writeFieldBegin('trigger_way', TType.I32, 4)
            oprot.writeI32(self.trigger_way)
            oprot.writeFieldEnd()
        if self.total_amount is not None:
            oprot.writeFieldBegin('total_amount', TType.DOUBLE, 5)
            oprot.writeDouble(self.total_amount)
            oprot.writeFieldEnd()
        if self.total_num is not None:
            oprot.writeFieldBegin('total_num', TType.I32, 6)
            oprot.writeI32(self.total_num)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 7)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 8)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrHbItemsDO(object):
    """
    Attributes:
     - id
     - hb_config_id
     - binding_id
     - index
     - amount
     - status
     - wxuser_id
     - open_time
     - create_time
     - update_time
     - trigger_wxuser_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'hb_config_id', None, None, ),  # 2
        (3, TType.I32, 'binding_id', None, None, ),  # 3
        (4, TType.I32, 'index', None, None, ),  # 4
        (5, TType.DOUBLE, 'amount', None, None, ),  # 5
        (6, TType.I32, 'status', None, None, ),  # 6
        (7, TType.I32, 'wxuser_id', None, None, ),  # 7
        (8, TType.STRING, 'open_time', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'create_time', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'update_time', 'UTF8', None, ),  # 10
        (11, TType.I32, 'trigger_wxuser_id', None, None, ),  # 11
    )

    def __init__(self, id=None, hb_config_id=None, binding_id=None, index=None, amount=None, status=None, wxuser_id=None, open_time=None, create_time=None, update_time=None, trigger_wxuser_id=None,):
        self.id = id
        self.hb_config_id = hb_config_id
        self.binding_id = binding_id
        self.index = index
        self.amount = amount
        self.status = status
        self.wxuser_id = wxuser_id
        self.open_time = open_time
        self.create_time = create_time
        self.update_time = update_time
        self.trigger_wxuser_id = trigger_wxuser_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hb_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.binding_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.wxuser_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.open_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.trigger_wxuser_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrHbItemsDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.hb_config_id is not None:
            oprot.writeFieldBegin('hb_config_id', TType.I32, 2)
            oprot.writeI32(self.hb_config_id)
            oprot.writeFieldEnd()
        if self.binding_id is not None:
            oprot.writeFieldBegin('binding_id', TType.I32, 3)
            oprot.writeI32(self.binding_id)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 4)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.DOUBLE, 5)
            oprot.writeDouble(self.amount)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.wxuser_id is not None:
            oprot.writeFieldBegin('wxuser_id', TType.I32, 7)
            oprot.writeI32(self.wxuser_id)
            oprot.writeFieldEnd()
        if self.open_time is not None:
            oprot.writeFieldBegin('open_time', TType.STRING, 8)
            oprot.writeString(self.open_time.encode('utf-8') if sys.version_info[0] == 2 else self.open_time)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 9)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 10)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.trigger_wxuser_id is not None:
            oprot.writeFieldBegin('trigger_wxuser_id', TType.I32, 11)
            oprot.writeI32(self.trigger_wxuser_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrHbScratchCardDO(object):
    """
    Attributes:
     - id
     - wechat_id
     - cardno
     - status
     - amount
     - hb_config_id
     - bagging_openid
     - create_time
     - hb_item_id
     - tips
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'wechat_id', None, None, ),  # 2
        (3, TType.STRING, 'cardno', 'UTF8', None, ),  # 3
        (4, TType.I32, 'status', None, None, ),  # 4
        (5, TType.DOUBLE, 'amount', None, None, ),  # 5
        (6, TType.I32, 'hb_config_id', None, None, ),  # 6
        (7, TType.STRING, 'bagging_openid', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'create_time', 'UTF8', None, ),  # 8
        (9, TType.I32, 'hb_item_id', None, None, ),  # 9
        (10, TType.I32, 'tips', None, None, ),  # 10
    )

    def __init__(self, id=None, wechat_id=None, cardno=None, status=None, amount=None, hb_config_id=None, bagging_openid=None, create_time=None, hb_item_id=None, tips=None,):
        self.id = id
        self.wechat_id = wechat_id
        self.cardno = cardno
        self.status = status
        self.amount = amount
        self.hb_config_id = hb_config_id
        self.bagging_openid = bagging_openid
        self.create_time = create_time
        self.hb_item_id = hb_item_id
        self.tips = tips

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.wechat_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cardno = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.hb_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.bagging_openid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.hb_item_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.tips = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrHbScratchCardDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.wechat_id is not None:
            oprot.writeFieldBegin('wechat_id', TType.I32, 2)
            oprot.writeI32(self.wechat_id)
            oprot.writeFieldEnd()
        if self.cardno is not None:
            oprot.writeFieldBegin('cardno', TType.STRING, 3)
            oprot.writeString(self.cardno.encode('utf-8') if sys.version_info[0] == 2 else self.cardno)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.DOUBLE, 5)
            oprot.writeDouble(self.amount)
            oprot.writeFieldEnd()
        if self.hb_config_id is not None:
            oprot.writeFieldBegin('hb_config_id', TType.I32, 6)
            oprot.writeI32(self.hb_config_id)
            oprot.writeFieldEnd()
        if self.bagging_openid is not None:
            oprot.writeFieldBegin('bagging_openid', TType.STRING, 7)
            oprot.writeString(self.bagging_openid.encode('utf-8') if sys.version_info[0] == 2 else self.bagging_openid)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 8)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.hb_item_id is not None:
            oprot.writeFieldBegin('hb_item_id', TType.I32, 9)
            oprot.writeI32(self.hb_item_id)
            oprot.writeFieldEnd()
        if self.tips is not None:
            oprot.writeFieldBegin('tips', TType.I32, 10)
            oprot.writeI32(self.tips)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrHbSendRecordDO(object):
    """
    Attributes:
     - id
     - return_code
     - return_msg
     - sign
     - resule_code
     - err_code
     - err_code_des
     - mch_billno
     - mch_id
     - wxappid
     - re_openid
     - total_amount
     - send_time
     - send_listid
     - create_time
     - hb_item_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'return_code', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'return_msg', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'sign', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'resule_code', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'err_code', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'err_code_des', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'mch_billno', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'mch_id', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'wxappid', 'UTF8', None, ),  # 10
        (11, TType.STRING, 're_openid', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'total_amount', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'send_time', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'send_listid', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'create_time', 'UTF8', None, ),  # 15
        (16, TType.I32, 'hb_item_id', None, None, ),  # 16
    )

    def __init__(self, id=None, return_code=None, return_msg=None, sign=None, resule_code=None, err_code=None, err_code_des=None, mch_billno=None, mch_id=None, wxappid=None, re_openid=None, total_amount=None, send_time=None, send_listid=None, create_time=None, hb_item_id=None,):
        self.id = id
        self.return_code = return_code
        self.return_msg = return_msg
        self.sign = sign
        self.resule_code = resule_code
        self.err_code = err_code
        self.err_code_des = err_code_des
        self.mch_billno = mch_billno
        self.mch_id = mch_id
        self.wxappid = wxappid
        self.re_openid = re_openid
        self.total_amount = total_amount
        self.send_time = send_time
        self.send_listid = send_listid
        self.create_time = create_time
        self.hb_item_id = hb_item_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.return_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.return_msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.resule_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.err_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.err_code_des = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mch_billno = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mch_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.wxappid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.re_openid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.total_amount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.send_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.send_listid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.hb_item_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrHbSendRecordDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.return_code is not None:
            oprot.writeFieldBegin('return_code', TType.STRING, 2)
            oprot.writeString(self.return_code.encode('utf-8') if sys.version_info[0] == 2 else self.return_code)
            oprot.writeFieldEnd()
        if self.return_msg is not None:
            oprot.writeFieldBegin('return_msg', TType.STRING, 3)
            oprot.writeString(self.return_msg.encode('utf-8') if sys.version_info[0] == 2 else self.return_msg)
            oprot.writeFieldEnd()
        if self.sign is not None:
            oprot.writeFieldBegin('sign', TType.STRING, 4)
            oprot.writeString(self.sign.encode('utf-8') if sys.version_info[0] == 2 else self.sign)
            oprot.writeFieldEnd()
        if self.resule_code is not None:
            oprot.writeFieldBegin('resule_code', TType.STRING, 5)
            oprot.writeString(self.resule_code.encode('utf-8') if sys.version_info[0] == 2 else self.resule_code)
            oprot.writeFieldEnd()
        if self.err_code is not None:
            oprot.writeFieldBegin('err_code', TType.STRING, 6)
            oprot.writeString(self.err_code.encode('utf-8') if sys.version_info[0] == 2 else self.err_code)
            oprot.writeFieldEnd()
        if self.err_code_des is not None:
            oprot.writeFieldBegin('err_code_des', TType.STRING, 7)
            oprot.writeString(self.err_code_des.encode('utf-8') if sys.version_info[0] == 2 else self.err_code_des)
            oprot.writeFieldEnd()
        if self.mch_billno is not None:
            oprot.writeFieldBegin('mch_billno', TType.STRING, 8)
            oprot.writeString(self.mch_billno.encode('utf-8') if sys.version_info[0] == 2 else self.mch_billno)
            oprot.writeFieldEnd()
        if self.mch_id is not None:
            oprot.writeFieldBegin('mch_id', TType.STRING, 9)
            oprot.writeString(self.mch_id.encode('utf-8') if sys.version_info[0] == 2 else self.mch_id)
            oprot.writeFieldEnd()
        if self.wxappid is not None:
            oprot.writeFieldBegin('wxappid', TType.STRING, 10)
            oprot.writeString(self.wxappid.encode('utf-8') if sys.version_info[0] == 2 else self.wxappid)
            oprot.writeFieldEnd()
        if self.re_openid is not None:
            oprot.writeFieldBegin('re_openid', TType.STRING, 11)
            oprot.writeString(self.re_openid.encode('utf-8') if sys.version_info[0] == 2 else self.re_openid)
            oprot.writeFieldEnd()
        if self.total_amount is not None:
            oprot.writeFieldBegin('total_amount', TType.STRING, 12)
            oprot.writeString(self.total_amount.encode('utf-8') if sys.version_info[0] == 2 else self.total_amount)
            oprot.writeFieldEnd()
        if self.send_time is not None:
            oprot.writeFieldBegin('send_time', TType.STRING, 13)
            oprot.writeString(self.send_time.encode('utf-8') if sys.version_info[0] == 2 else self.send_time)
            oprot.writeFieldEnd()
        if self.send_listid is not None:
            oprot.writeFieldBegin('send_listid', TType.STRING, 14)
            oprot.writeString(self.send_listid.encode('utf-8') if sys.version_info[0] == 2 else self.send_listid)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 15)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.hb_item_id is not None:
            oprot.writeFieldBegin('hb_item_id', TType.I32, 16)
            oprot.writeI32(self.hb_item_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrEmployeeCertConfDO(object):
    """
    Attributes:
     - company_id
     - is_strict
     - email_suffix
     - create_time
     - update_time
     - disable
     - bd_add_group
     - bd_use_group_id
     - auth_mode
     - auth_code
     - custom
     - questions
     - custom_hint
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'company_id', None, None, ),  # 1
        (2, TType.I32, 'is_strict', None, None, ),  # 2
        (3, TType.STRING, 'email_suffix', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'create_time', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'update_time', 'UTF8', None, ),  # 5
        (6, TType.I32, 'disable', None, None, ),  # 6
        (7, TType.I32, 'bd_add_group', None, None, ),  # 7
        (8, TType.I32, 'bd_use_group_id', None, None, ),  # 8
        (9, TType.I32, 'auth_mode', None, None, ),  # 9
        (10, TType.STRING, 'auth_code', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'custom', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'questions', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'custom_hint', 'UTF8', None, ),  # 13
    )

    def __init__(self, company_id=None, is_strict=None, email_suffix=None, create_time=None, update_time=None, disable=None, bd_add_group=None, bd_use_group_id=None, auth_mode=None, auth_code=None, custom=None, questions=None, custom_hint=None,):
        self.company_id = company_id
        self.is_strict = is_strict
        self.email_suffix = email_suffix
        self.create_time = create_time
        self.update_time = update_time
        self.disable = disable
        self.bd_add_group = bd_add_group
        self.bd_use_group_id = bd_use_group_id
        self.auth_mode = auth_mode
        self.auth_code = auth_code
        self.custom = custom
        self.questions = questions
        self.custom_hint = custom_hint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.is_strict = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email_suffix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.disable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.bd_add_group = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.bd_use_group_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.auth_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.auth_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.questions = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.custom_hint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrEmployeeCertConfDO')
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 1)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.is_strict is not None:
            oprot.writeFieldBegin('is_strict', TType.I32, 2)
            oprot.writeI32(self.is_strict)
            oprot.writeFieldEnd()
        if self.email_suffix is not None:
            oprot.writeFieldBegin('email_suffix', TType.STRING, 3)
            oprot.writeString(self.email_suffix.encode('utf-8') if sys.version_info[0] == 2 else self.email_suffix)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 4)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 5)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.I32, 6)
            oprot.writeI32(self.disable)
            oprot.writeFieldEnd()
        if self.bd_add_group is not None:
            oprot.writeFieldBegin('bd_add_group', TType.I32, 7)
            oprot.writeI32(self.bd_add_group)
            oprot.writeFieldEnd()
        if self.bd_use_group_id is not None:
            oprot.writeFieldBegin('bd_use_group_id', TType.I32, 8)
            oprot.writeI32(self.bd_use_group_id)
            oprot.writeFieldEnd()
        if self.auth_mode is not None:
            oprot.writeFieldBegin('auth_mode', TType.I32, 9)
            oprot.writeI32(self.auth_mode)
            oprot.writeFieldEnd()
        if self.auth_code is not None:
            oprot.writeFieldBegin('auth_code', TType.STRING, 10)
            oprot.writeString(self.auth_code.encode('utf-8') if sys.version_info[0] == 2 else self.auth_code)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 11)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        if self.questions is not None:
            oprot.writeFieldBegin('questions', TType.STRING, 12)
            oprot.writeString(self.questions.encode('utf-8') if sys.version_info[0] == 2 else self.questions)
            oprot.writeFieldEnd()
        if self.custom_hint is not None:
            oprot.writeFieldBegin('custom_hint', TType.STRING, 13)
            oprot.writeString(self.custom_hint.encode('utf-8') if sys.version_info[0] == 2 else self.custom_hint)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrEmployeeCustomFieldsDO(object):
    """
    Attributes:
     - id
     - company_id
     - fname
     - fvalues
     - forder
     - disable
     - mandatory
     - status
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'company_id', None, None, ),  # 2
        (3, TType.STRING, 'fname', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'fvalues', 'UTF8', None, ),  # 4
        (5, TType.I32, 'forder', None, None, ),  # 5
        (6, TType.I32, 'disable', None, None, ),  # 6
        (7, TType.I32, 'mandatory', None, None, ),  # 7
        (8, TType.I32, 'status', None, None, ),  # 8
    )

    def __init__(self, id=None, company_id=None, fname=None, fvalues=None, forder=None, disable=None, mandatory=None, status=None,):
        self.id = id
        self.company_id = company_id
        self.fname = fname
        self.fvalues = fvalues
        self.forder = forder
        self.disable = disable
        self.mandatory = mandatory
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.fvalues = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.forder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.disable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.mandatory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrEmployeeCustomFieldsDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 2)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.fname is not None:
            oprot.writeFieldBegin('fname', TType.STRING, 3)
            oprot.writeString(self.fname.encode('utf-8') if sys.version_info[0] == 2 else self.fname)
            oprot.writeFieldEnd()
        if self.fvalues is not None:
            oprot.writeFieldBegin('fvalues', TType.STRING, 4)
            oprot.writeString(self.fvalues.encode('utf-8') if sys.version_info[0] == 2 else self.fvalues)
            oprot.writeFieldEnd()
        if self.forder is not None:
            oprot.writeFieldBegin('forder', TType.I32, 5)
            oprot.writeI32(self.forder)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.I32, 6)
            oprot.writeI32(self.disable)
            oprot.writeFieldEnd()
        if self.mandatory is not None:
            oprot.writeFieldBegin('mandatory', TType.I32, 7)
            oprot.writeI32(self.mandatory)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrPointsConfDO(object):
    """
    Attributes:
     - id
     - company_id
     - status_name
     - reward
     - description
     - is_using
     - order_num
     - _update_time
     - tag
     - is_applier_send
     - applier_first
     - applier_remark
     - is_recom_send
     - recom_first
     - recom_remark
     - template_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'company_id', None, None, ),  # 2
        (3, TType.STRING, 'status_name', 'UTF8', None, ),  # 3
        (4, TType.I32, 'reward', None, None, ),  # 4
        (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
        (6, TType.I32, 'is_using', None, None, ),  # 6
        (7, TType.I32, 'order_num', None, None, ),  # 7
        (8, TType.STRING, '_update_time', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'tag', 'UTF8', None, ),  # 9
        (10, TType.I32, 'is_applier_send', None, None, ),  # 10
        (11, TType.STRING, 'applier_first', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'applier_remark', 'UTF8', None, ),  # 12
        (13, TType.I32, 'is_recom_send', None, None, ),  # 13
        (14, TType.STRING, 'recom_first', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'recom_remark', 'UTF8', None, ),  # 15
        (16, TType.I32, 'template_id', None, None, ),  # 16
    )

    def __init__(self, id=None, company_id=None, status_name=None, reward=None, description=None, is_using=None, order_num=None, _update_time=None, tag=None, is_applier_send=None, applier_first=None, applier_remark=None, is_recom_send=None, recom_first=None, recom_remark=None, template_id=None,):
        self.id = id
        self.company_id = company_id
        self.status_name = status_name
        self.reward = reward
        self.description = description
        self.is_using = is_using
        self.order_num = order_num
        self._update_time = _update_time
        self.tag = tag
        self.is_applier_send = is_applier_send
        self.applier_first = applier_first
        self.applier_remark = applier_remark
        self.is_recom_send = is_recom_send
        self.recom_first = recom_first
        self.recom_remark = recom_remark
        self.template_id = template_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.status_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.reward = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.is_using = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.order_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self._update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.is_applier_send = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.applier_first = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.applier_remark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.is_recom_send = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.recom_first = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.recom_remark = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.template_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrPointsConfDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 2)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.status_name is not None:
            oprot.writeFieldBegin('status_name', TType.STRING, 3)
            oprot.writeString(self.status_name.encode('utf-8') if sys.version_info[0] == 2 else self.status_name)
            oprot.writeFieldEnd()
        if self.reward is not None:
            oprot.writeFieldBegin('reward', TType.I32, 4)
            oprot.writeI32(self.reward)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.is_using is not None:
            oprot.writeFieldBegin('is_using', TType.I32, 6)
            oprot.writeI32(self.is_using)
            oprot.writeFieldEnd()
        if self.order_num is not None:
            oprot.writeFieldBegin('order_num', TType.I32, 7)
            oprot.writeI32(self.order_num)
            oprot.writeFieldEnd()
        if self._update_time is not None:
            oprot.writeFieldBegin('_update_time', TType.STRING, 8)
            oprot.writeString(self._update_time.encode('utf-8') if sys.version_info[0] == 2 else self._update_time)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 9)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.is_applier_send is not None:
            oprot.writeFieldBegin('is_applier_send', TType.I32, 10)
            oprot.writeI32(self.is_applier_send)
            oprot.writeFieldEnd()
        if self.applier_first is not None:
            oprot.writeFieldBegin('applier_first', TType.STRING, 11)
            oprot.writeString(self.applier_first.encode('utf-8') if sys.version_info[0] == 2 else self.applier_first)
            oprot.writeFieldEnd()
        if self.applier_remark is not None:
            oprot.writeFieldBegin('applier_remark', TType.STRING, 12)
            oprot.writeString(self.applier_remark.encode('utf-8') if sys.version_info[0] == 2 else self.applier_remark)
            oprot.writeFieldEnd()
        if self.is_recom_send is not None:
            oprot.writeFieldBegin('is_recom_send', TType.I32, 13)
            oprot.writeI32(self.is_recom_send)
            oprot.writeFieldEnd()
        if self.recom_first is not None:
            oprot.writeFieldBegin('recom_first', TType.STRING, 14)
            oprot.writeString(self.recom_first.encode('utf-8') if sys.version_info[0] == 2 else self.recom_first)
            oprot.writeFieldEnd()
        if self.recom_remark is not None:
            oprot.writeFieldBegin('recom_remark', TType.STRING, 15)
            oprot.writeString(self.recom_remark.encode('utf-8') if sys.version_info[0] == 2 else self.recom_remark)
            oprot.writeFieldEnd()
        if self.template_id is not None:
            oprot.writeFieldBegin('template_id', TType.I32, 16)
            oprot.writeI32(self.template_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
