#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def getPosition(self, query):
        """
        Parameters:
         - query
        """
        pass

    def updatePosition(self, position):
        """
        Parameters:
         - position
        """
        pass

    def getPositionWithCityCode(self, query):
        """
        Parameters:
         - query
        """
        pass

    def getPositionThirdPartyPositions(self, query):
        """
        Parameters:
         - query
        """
        pass

    def getThirdPartyPosition(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        pass

    def upsertThirdPartyPositions(self, position):
        """
        Parameters:
         - position
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def getPosition(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPosition(query)
        return future

    def send_getPosition(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPosition', TMessageType.CALL, self._seqid)
        args = getPosition_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPosition failed: unknown result")

    def updatePosition(self, position):
        """
        Parameters:
         - position
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_updatePosition(position)
        return future

    def send_updatePosition(self, position):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updatePosition', TMessageType.CALL, self._seqid)
        args = updatePosition_args()
        args.position = position
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updatePosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updatePosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updatePosition failed: unknown result")

    def getPositionWithCityCode(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPositionWithCityCode(query)
        return future

    def send_getPositionWithCityCode(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPositionWithCityCode', TMessageType.CALL, self._seqid)
        args = getPositionWithCityCode_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPositionWithCityCode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPositionWithCityCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPositionWithCityCode failed: unknown result")

    def getPositionThirdPartyPositions(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPositionThirdPartyPositions(query)
        return future

    def send_getPositionThirdPartyPositions(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPositionThirdPartyPositions', TMessageType.CALL, self._seqid)
        args = getPositionThirdPartyPositions_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPositionThirdPartyPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPositionThirdPartyPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPositionThirdPartyPositions failed: unknown result")

    def getThirdPartyPosition(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getThirdPartyPosition(positionId, channel)
        return future

    def send_getThirdPartyPosition(self, positionId, channel):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getThirdPartyPosition', TMessageType.CALL, self._seqid)
        args = getThirdPartyPosition_args()
        args.positionId = positionId
        args.channel = channel
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getThirdPartyPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getThirdPartyPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getThirdPartyPosition failed: unknown result")

    def upsertThirdPartyPositions(self, position):
        """
        Parameters:
         - position
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_upsertThirdPartyPositions(position)
        return future

    def send_upsertThirdPartyPositions(self, position):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('upsertThirdPartyPositions', TMessageType.CALL, self._seqid)
        args = upsertThirdPartyPositions_args()
        args.position = position
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_upsertThirdPartyPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = upsertThirdPartyPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "upsertThirdPartyPositions failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getPosition"] = Processor.process_getPosition
        self._processMap["updatePosition"] = Processor.process_updatePosition
        self._processMap["getPositionWithCityCode"] = Processor.process_getPositionWithCityCode
        self._processMap["getPositionThirdPartyPositions"] = Processor.process_getPositionThirdPartyPositions
        self._processMap["getThirdPartyPosition"] = Processor.process_getThirdPartyPosition
        self._processMap["upsertThirdPartyPositions"] = Processor.process_upsertThirdPartyPositions

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_getPosition(self, seqid, iprot, oprot):
        args = getPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPosition_result()
        result.success = yield gen.maybe_future(self._handler.getPosition(args.query))
        oprot.writeMessageBegin("getPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_updatePosition(self, seqid, iprot, oprot):
        args = updatePosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updatePosition_result()
        result.success = yield gen.maybe_future(self._handler.updatePosition(args.position))
        oprot.writeMessageBegin("updatePosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getPositionWithCityCode(self, seqid, iprot, oprot):
        args = getPositionWithCityCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPositionWithCityCode_result()
        result.success = yield gen.maybe_future(self._handler.getPositionWithCityCode(args.query))
        oprot.writeMessageBegin("getPositionWithCityCode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getPositionThirdPartyPositions(self, seqid, iprot, oprot):
        args = getPositionThirdPartyPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPositionThirdPartyPositions_result()
        result.success = yield gen.maybe_future(self._handler.getPositionThirdPartyPositions(args.query))
        oprot.writeMessageBegin("getPositionThirdPartyPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getThirdPartyPosition(self, seqid, iprot, oprot):
        args = getThirdPartyPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getThirdPartyPosition_result()
        result.success = yield gen.maybe_future(self._handler.getThirdPartyPosition(args.positionId, args.channel))
        oprot.writeMessageBegin("getThirdPartyPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_upsertThirdPartyPositions(self, seqid, iprot, oprot):
        args = upsertThirdPartyPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = upsertThirdPartyPositions_result()
        result.success = yield gen.maybe_future(self._handler.upsertThirdPartyPositions(args.position))
        oprot.writeMessageBegin("upsertThirdPartyPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getPosition_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPosition_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.position.struct.ttypes.Position, thrift_gen.gen.position.struct.ttypes.Position.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.position.struct.ttypes.Position()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updatePosition_args(object):
    """
    Attributes:
     - position
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'position', (thrift_gen.gen.position.struct.ttypes.Position, thrift_gen.gen.position.struct.ttypes.Position.thrift_spec), None, ),  # 1
    )

    def __init__(self, position=None,):
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = thrift_gen.gen.position.struct.ttypes.Position()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updatePosition_args')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updatePosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updatePosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionWithCityCode_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionWithCityCode_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionWithCityCode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.position.struct.ttypes.Position, thrift_gen.gen.position.struct.ttypes.Position.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.position.struct.ttypes.Position()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionWithCityCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionThirdPartyPositions_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionThirdPartyPositions_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionThirdPartyPositions_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData, thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData()
                        _elem33.read(iprot)
                        self.success.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionThirdPartyPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter34 in self.success:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getThirdPartyPosition_args(object):
    """
    Attributes:
     - positionId
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
        (2, TType.I32, 'channel', None, None, ),  # 2
    )

    def __init__(self, positionId=None, channel=None,):
        self.positionId = positionId
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getThirdPartyPosition_args')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getThirdPartyPosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData, thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getThirdPartyPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upsertThirdPartyPositions_args(object):
    """
    Attributes:
     - position
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'position', (thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData, thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData.thrift_spec), None, ),  # 1
    )

    def __init__(self, position=None,):
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.position = thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upsertThirdPartyPositions_args')
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 1)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upsertThirdPartyPositions_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upsertThirdPartyPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
