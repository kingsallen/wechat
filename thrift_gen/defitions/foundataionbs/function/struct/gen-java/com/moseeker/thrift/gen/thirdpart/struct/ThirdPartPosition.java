/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.moseeker.thrift.gen.thirdpart.struct;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-8")
public class ThirdPartPosition implements org.apache.thrift.TBase<ThirdPartPosition, ThirdPartPosition._Fields>, java.io.Serializable, Cloneable, Comparable<ThirdPartPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThirdPartPosition");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("position_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField THIRD_PART_POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("third_part_position_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_SYNCHRONIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_synchronization", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("is_refresh", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SYNC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThirdPartPositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThirdPartPositionTupleSchemeFactory());
  }

  public int id; // required
  public int position_id; // required
  public String third_part_position_id; // required
  public int channel; // required
  public int is_synchronization; // required
  public int is_refresh; // required
  public String sync_time; // required
  public String occupation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POSITION_ID((short)2, "position_id"),
    THIRD_PART_POSITION_ID((short)3, "third_part_position_id"),
    CHANNEL((short)4, "channel"),
    IS_SYNCHRONIZATION((short)5, "is_synchronization"),
    IS_REFRESH((short)6, "is_refresh"),
    SYNC_TIME((short)7, "sync_time"),
    OCCUPATION((short)8, "occupation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POSITION_ID
          return POSITION_ID;
        case 3: // THIRD_PART_POSITION_ID
          return THIRD_PART_POSITION_ID;
        case 4: // CHANNEL
          return CHANNEL;
        case 5: // IS_SYNCHRONIZATION
          return IS_SYNCHRONIZATION;
        case 6: // IS_REFRESH
          return IS_REFRESH;
        case 7: // SYNC_TIME
          return SYNC_TIME;
        case 8: // OCCUPATION
          return OCCUPATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POSITION_ID_ISSET_ID = 1;
  private static final int __CHANNEL_ISSET_ID = 2;
  private static final int __IS_SYNCHRONIZATION_ISSET_ID = 3;
  private static final int __IS_REFRESH_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("position_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PART_POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("third_part_position_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SYNCHRONIZATION, new org.apache.thrift.meta_data.FieldMetaData("is_synchronization", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("is_refresh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYNC_TIME, new org.apache.thrift.meta_data.FieldMetaData("sync_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Datetime")));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThirdPartPosition.class, metaDataMap);
  }

  public ThirdPartPosition() {
  }

  public ThirdPartPosition(
    int id,
    int position_id,
    String third_part_position_id,
    int channel,
    int is_synchronization,
    int is_refresh,
    String sync_time,
    String occupation)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.position_id = position_id;
    setPosition_idIsSet(true);
    this.third_part_position_id = third_part_position_id;
    this.channel = channel;
    setChannelIsSet(true);
    this.is_synchronization = is_synchronization;
    setIs_synchronizationIsSet(true);
    this.is_refresh = is_refresh;
    setIs_refreshIsSet(true);
    this.sync_time = sync_time;
    this.occupation = occupation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThirdPartPosition(ThirdPartPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.position_id = other.position_id;
    if (other.isSetThird_part_position_id()) {
      this.third_part_position_id = other.third_part_position_id;
    }
    this.channel = other.channel;
    this.is_synchronization = other.is_synchronization;
    this.is_refresh = other.is_refresh;
    if (other.isSetSync_time()) {
      this.sync_time = other.sync_time;
    }
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
  }

  public ThirdPartPosition deepCopy() {
    return new ThirdPartPosition(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPosition_idIsSet(false);
    this.position_id = 0;
    this.third_part_position_id = null;
    setChannelIsSet(false);
    this.channel = 0;
    setIs_synchronizationIsSet(false);
    this.is_synchronization = 0;
    setIs_refreshIsSet(false);
    this.is_refresh = 0;
    this.sync_time = null;
    this.occupation = null;
  }

  public int getId() {
    return this.id;
  }

  public ThirdPartPosition setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPosition_id() {
    return this.position_id;
  }

  public ThirdPartPosition setPosition_id(int position_id) {
    this.position_id = position_id;
    setPosition_idIsSet(true);
    return this;
  }

  public void unsetPosition_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
  }

  /** Returns true if field position_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_id() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ID_ISSET_ID);
  }

  public void setPosition_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ID_ISSET_ID, value);
  }

  public String getThird_part_position_id() {
    return this.third_part_position_id;
  }

  public ThirdPartPosition setThird_part_position_id(String third_part_position_id) {
    this.third_part_position_id = third_part_position_id;
    return this;
  }

  public void unsetThird_part_position_id() {
    this.third_part_position_id = null;
  }

  /** Returns true if field third_part_position_id is set (has been assigned a value) and false otherwise */
  public boolean isSetThird_part_position_id() {
    return this.third_part_position_id != null;
  }

  public void setThird_part_position_idIsSet(boolean value) {
    if (!value) {
      this.third_part_position_id = null;
    }
  }

  public int getChannel() {
    return this.channel;
  }

  public ThirdPartPosition setChannel(int channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public int getIs_synchronization() {
    return this.is_synchronization;
  }

  public ThirdPartPosition setIs_synchronization(int is_synchronization) {
    this.is_synchronization = is_synchronization;
    setIs_synchronizationIsSet(true);
    return this;
  }

  public void unsetIs_synchronization() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SYNCHRONIZATION_ISSET_ID);
  }

  /** Returns true if field is_synchronization is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_synchronization() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SYNCHRONIZATION_ISSET_ID);
  }

  public void setIs_synchronizationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SYNCHRONIZATION_ISSET_ID, value);
  }

  public int getIs_refresh() {
    return this.is_refresh;
  }

  public ThirdPartPosition setIs_refresh(int is_refresh) {
    this.is_refresh = is_refresh;
    setIs_refreshIsSet(true);
    return this;
  }

  public void unsetIs_refresh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_REFRESH_ISSET_ID);
  }

  /** Returns true if field is_refresh is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_refresh() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_REFRESH_ISSET_ID);
  }

  public void setIs_refreshIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_REFRESH_ISSET_ID, value);
  }

  public String getSync_time() {
    return this.sync_time;
  }

  public ThirdPartPosition setSync_time(String sync_time) {
    this.sync_time = sync_time;
    return this;
  }

  public void unsetSync_time() {
    this.sync_time = null;
  }

  /** Returns true if field sync_time is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_time() {
    return this.sync_time != null;
  }

  public void setSync_timeIsSet(boolean value) {
    if (!value) {
      this.sync_time = null;
    }
  }

  public String getOccupation() {
    return this.occupation;
  }

  public ThirdPartPosition setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPosition_id();
      } else {
        setPosition_id((Integer)value);
      }
      break;

    case THIRD_PART_POSITION_ID:
      if (value == null) {
        unsetThird_part_position_id();
      } else {
        setThird_part_position_id((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Integer)value);
      }
      break;

    case IS_SYNCHRONIZATION:
      if (value == null) {
        unsetIs_synchronization();
      } else {
        setIs_synchronization((Integer)value);
      }
      break;

    case IS_REFRESH:
      if (value == null) {
        unsetIs_refresh();
      } else {
        setIs_refresh((Integer)value);
      }
      break;

    case SYNC_TIME:
      if (value == null) {
        unsetSync_time();
      } else {
        setSync_time((String)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case POSITION_ID:
      return Integer.valueOf(getPosition_id());

    case THIRD_PART_POSITION_ID:
      return getThird_part_position_id();

    case CHANNEL:
      return Integer.valueOf(getChannel());

    case IS_SYNCHRONIZATION:
      return Integer.valueOf(getIs_synchronization());

    case IS_REFRESH:
      return Integer.valueOf(getIs_refresh());

    case SYNC_TIME:
      return getSync_time();

    case OCCUPATION:
      return getOccupation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POSITION_ID:
      return isSetPosition_id();
    case THIRD_PART_POSITION_ID:
      return isSetThird_part_position_id();
    case CHANNEL:
      return isSetChannel();
    case IS_SYNCHRONIZATION:
      return isSetIs_synchronization();
    case IS_REFRESH:
      return isSetIs_refresh();
    case SYNC_TIME:
      return isSetSync_time();
    case OCCUPATION:
      return isSetOccupation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThirdPartPosition)
      return this.equals((ThirdPartPosition)that);
    return false;
  }

  public boolean equals(ThirdPartPosition that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_position_id = true;
    boolean that_present_position_id = true;
    if (this_present_position_id || that_present_position_id) {
      if (!(this_present_position_id && that_present_position_id))
        return false;
      if (this.position_id != that.position_id)
        return false;
    }

    boolean this_present_third_part_position_id = true && this.isSetThird_part_position_id();
    boolean that_present_third_part_position_id = true && that.isSetThird_part_position_id();
    if (this_present_third_part_position_id || that_present_third_part_position_id) {
      if (!(this_present_third_part_position_id && that_present_third_part_position_id))
        return false;
      if (!this.third_part_position_id.equals(that.third_part_position_id))
        return false;
    }

    boolean this_present_channel = true;
    boolean that_present_channel = true;
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    boolean this_present_is_synchronization = true;
    boolean that_present_is_synchronization = true;
    if (this_present_is_synchronization || that_present_is_synchronization) {
      if (!(this_present_is_synchronization && that_present_is_synchronization))
        return false;
      if (this.is_synchronization != that.is_synchronization)
        return false;
    }

    boolean this_present_is_refresh = true;
    boolean that_present_is_refresh = true;
    if (this_present_is_refresh || that_present_is_refresh) {
      if (!(this_present_is_refresh && that_present_is_refresh))
        return false;
      if (this.is_refresh != that.is_refresh)
        return false;
    }

    boolean this_present_sync_time = true && this.isSetSync_time();
    boolean that_present_sync_time = true && that.isSetSync_time();
    if (this_present_sync_time || that_present_sync_time) {
      if (!(this_present_sync_time && that_present_sync_time))
        return false;
      if (!this.sync_time.equals(that.sync_time))
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_position_id = true;
    list.add(present_position_id);
    if (present_position_id)
      list.add(position_id);

    boolean present_third_part_position_id = true && (isSetThird_part_position_id());
    list.add(present_third_part_position_id);
    if (present_third_part_position_id)
      list.add(third_part_position_id);

    boolean present_channel = true;
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_is_synchronization = true;
    list.add(present_is_synchronization);
    if (present_is_synchronization)
      list.add(is_synchronization);

    boolean present_is_refresh = true;
    list.add(present_is_refresh);
    if (present_is_refresh)
      list.add(is_refresh);

    boolean present_sync_time = true && (isSetSync_time());
    list.add(present_sync_time);
    if (present_sync_time)
      list.add(sync_time);

    boolean present_occupation = true && (isSetOccupation());
    list.add(present_occupation);
    if (present_occupation)
      list.add(occupation);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThirdPartPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_id()).compareTo(other.isSetPosition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_id, other.position_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThird_part_position_id()).compareTo(other.isSetThird_part_position_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThird_part_position_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.third_part_position_id, other.third_part_position_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_synchronization()).compareTo(other.isSetIs_synchronization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_synchronization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_synchronization, other.is_synchronization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_refresh()).compareTo(other.isSetIs_refresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_refresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_refresh, other.is_refresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_time()).compareTo(other.isSetSync_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_time, other.sync_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThirdPartPosition(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("position_id:");
    sb.append(this.position_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("third_part_position_id:");
    if (this.third_part_position_id == null) {
      sb.append("null");
    } else {
      sb.append(this.third_part_position_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    sb.append(this.channel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_synchronization:");
    sb.append(this.is_synchronization);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_refresh:");
    sb.append(this.is_refresh);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sync_time:");
    if (this.sync_time == null) {
      sb.append("null");
    } else {
      sb.append(this.sync_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occupation:");
    if (this.occupation == null) {
      sb.append("null");
    } else {
      sb.append(this.occupation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThirdPartPositionStandardSchemeFactory implements SchemeFactory {
    public ThirdPartPositionStandardScheme getScheme() {
      return new ThirdPartPositionStandardScheme();
    }
  }

  private static class ThirdPartPositionStandardScheme extends StandardScheme<ThirdPartPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThirdPartPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position_id = iprot.readI32();
              struct.setPosition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // THIRD_PART_POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.third_part_position_id = iprot.readString();
              struct.setThird_part_position_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel = iprot.readI32();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_SYNCHRONIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_synchronization = iprot.readI32();
              struct.setIs_synchronizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_refresh = iprot.readI32();
              struct.setIs_refreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYNC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sync_time = iprot.readString();
              struct.setSync_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThirdPartPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
      oprot.writeI32(struct.position_id);
      oprot.writeFieldEnd();
      if (struct.third_part_position_id != null) {
        oprot.writeFieldBegin(THIRD_PART_POSITION_ID_FIELD_DESC);
        oprot.writeString(struct.third_part_position_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
      oprot.writeI32(struct.channel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SYNCHRONIZATION_FIELD_DESC);
      oprot.writeI32(struct.is_synchronization);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_REFRESH_FIELD_DESC);
      oprot.writeI32(struct.is_refresh);
      oprot.writeFieldEnd();
      if (struct.sync_time != null) {
        oprot.writeFieldBegin(SYNC_TIME_FIELD_DESC);
        oprot.writeString(struct.sync_time);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
        oprot.writeString(struct.occupation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThirdPartPositionTupleSchemeFactory implements SchemeFactory {
    public ThirdPartPositionTupleScheme getScheme() {
      return new ThirdPartPositionTupleScheme();
    }
  }

  private static class ThirdPartPositionTupleScheme extends TupleScheme<ThirdPartPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThirdPartPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPosition_id()) {
        optionals.set(1);
      }
      if (struct.isSetThird_part_position_id()) {
        optionals.set(2);
      }
      if (struct.isSetChannel()) {
        optionals.set(3);
      }
      if (struct.isSetIs_synchronization()) {
        optionals.set(4);
      }
      if (struct.isSetIs_refresh()) {
        optionals.set(5);
      }
      if (struct.isSetSync_time()) {
        optionals.set(6);
      }
      if (struct.isSetOccupation()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPosition_id()) {
        oprot.writeI32(struct.position_id);
      }
      if (struct.isSetThird_part_position_id()) {
        oprot.writeString(struct.third_part_position_id);
      }
      if (struct.isSetChannel()) {
        oprot.writeI32(struct.channel);
      }
      if (struct.isSetIs_synchronization()) {
        oprot.writeI32(struct.is_synchronization);
      }
      if (struct.isSetIs_refresh()) {
        oprot.writeI32(struct.is_refresh);
      }
      if (struct.isSetSync_time()) {
        oprot.writeString(struct.sync_time);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThirdPartPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.position_id = iprot.readI32();
        struct.setPosition_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.third_part_position_id = iprot.readString();
        struct.setThird_part_position_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel = iprot.readI32();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_synchronization = iprot.readI32();
        struct.setIs_synchronizationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_refresh = iprot.readI32();
        struct.setIs_refreshIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sync_time = iprot.readString();
        struct.setSync_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
    }
  }

}

