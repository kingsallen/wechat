#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class SmsType(object):
    EMPLOYEE_MERGE_ACCOUNT_SMS = 0
    RANDOM_SMS = 1
    RANDOM_PWD_SMS = 2
    POSITION_FAV_SMS = 3
    NEW_APPLICATION_TO_HR_SMS = 4
    NEW_APPLIACATION_TO_APPLIER_SMS = 5
    APPLICATION_IS_VIEW_SMS = 6
    APPLICATION_REJECT_SMS = 7
    APPLICATION_CANCEL_REJECT_SMS = 8
    APPLICATION_APPROVED_SMS = 9
    APPLICATION_INTERVIEW_SMS = 10
    APPLICATION_ENTRY_SMS = 11
    UPDATE_SYSUSER_SMS = 12
    REGISTERED_THREE_DAYS_SMS = 13
    APPLIER_REMIND_EMAIL_ATTACHMENT_SMS = 14
    APPLIER_REMIND_EMAIL_ATTACHMENT_COM_SMS = 15
    HR_INVITE_BYPASS_ACCOUNT_SMS = 16
    HR_BYPASS_ACCOUNT_SMS = 17
    HR_BYPASS_ACCOUNT_OPEN_SMS = 18
    HR_BYPASS_ACCOUNT_REJECT_SMS = 19
    APPLIER_EMAIL_APP_SUC_SMS = 20
    APPLIER_EMAIL_APP_NO_ATTACH_SMS = 21
    APPLIER_EMAIL_APP_ATTACH_ERROR_SMS = 22
    APPLIER_EMAIL_APP_ATTACH_OVERSIZE_SMS = 23
    APPLIER_EMAIL_APP_RESOLVE_FAIL_SMS = 24
    APPLIER_EMAIL_APP_ATTACH_RESOLVE_FAIL_SMS = 25
    APPLIER_APP_ATTACH_RESOLVE_SUC_SMS = 26
    APPLIER_APP_ATTACH_RESOLVE_FAIL_SMS = 27
    APPLIER_APP_ATTACH_RESOLVE_ERROR_SMS = 28
    PPLIER_APP_ATTACH_RESOLVE_OVERSIZE_SMS = 29
    APPLIER_APP_RESOLVE_FAIL_SMS = 30
    ALARM_SMS = 31

    _VALUES_TO_NAMES = {
        0: "EMPLOYEE_MERGE_ACCOUNT_SMS",
        1: "RANDOM_SMS",
        2: "RANDOM_PWD_SMS",
        3: "POSITION_FAV_SMS",
        4: "NEW_APPLICATION_TO_HR_SMS",
        5: "NEW_APPLIACATION_TO_APPLIER_SMS",
        6: "APPLICATION_IS_VIEW_SMS",
        7: "APPLICATION_REJECT_SMS",
        8: "APPLICATION_CANCEL_REJECT_SMS",
        9: "APPLICATION_APPROVED_SMS",
        10: "APPLICATION_INTERVIEW_SMS",
        11: "APPLICATION_ENTRY_SMS",
        12: "UPDATE_SYSUSER_SMS",
        13: "REGISTERED_THREE_DAYS_SMS",
        14: "APPLIER_REMIND_EMAIL_ATTACHMENT_SMS",
        15: "APPLIER_REMIND_EMAIL_ATTACHMENT_COM_SMS",
        16: "HR_INVITE_BYPASS_ACCOUNT_SMS",
        17: "HR_BYPASS_ACCOUNT_SMS",
        18: "HR_BYPASS_ACCOUNT_OPEN_SMS",
        19: "HR_BYPASS_ACCOUNT_REJECT_SMS",
        20: "APPLIER_EMAIL_APP_SUC_SMS",
        21: "APPLIER_EMAIL_APP_NO_ATTACH_SMS",
        22: "APPLIER_EMAIL_APP_ATTACH_ERROR_SMS",
        23: "APPLIER_EMAIL_APP_ATTACH_OVERSIZE_SMS",
        24: "APPLIER_EMAIL_APP_RESOLVE_FAIL_SMS",
        25: "APPLIER_EMAIL_APP_ATTACH_RESOLVE_FAIL_SMS",
        26: "APPLIER_APP_ATTACH_RESOLVE_SUC_SMS",
        27: "APPLIER_APP_ATTACH_RESOLVE_FAIL_SMS",
        28: "APPLIER_APP_ATTACH_RESOLVE_ERROR_SMS",
        29: "PPLIER_APP_ATTACH_RESOLVE_OVERSIZE_SMS",
        30: "APPLIER_APP_RESOLVE_FAIL_SMS",
        31: "ALARM_SMS",
    }

    _NAMES_TO_VALUES = {
        "EMPLOYEE_MERGE_ACCOUNT_SMS": 0,
        "RANDOM_SMS": 1,
        "RANDOM_PWD_SMS": 2,
        "POSITION_FAV_SMS": 3,
        "NEW_APPLICATION_TO_HR_SMS": 4,
        "NEW_APPLIACATION_TO_APPLIER_SMS": 5,
        "APPLICATION_IS_VIEW_SMS": 6,
        "APPLICATION_REJECT_SMS": 7,
        "APPLICATION_CANCEL_REJECT_SMS": 8,
        "APPLICATION_APPROVED_SMS": 9,
        "APPLICATION_INTERVIEW_SMS": 10,
        "APPLICATION_ENTRY_SMS": 11,
        "UPDATE_SYSUSER_SMS": 12,
        "REGISTERED_THREE_DAYS_SMS": 13,
        "APPLIER_REMIND_EMAIL_ATTACHMENT_SMS": 14,
        "APPLIER_REMIND_EMAIL_ATTACHMENT_COM_SMS": 15,
        "HR_INVITE_BYPASS_ACCOUNT_SMS": 16,
        "HR_BYPASS_ACCOUNT_SMS": 17,
        "HR_BYPASS_ACCOUNT_OPEN_SMS": 18,
        "HR_BYPASS_ACCOUNT_REJECT_SMS": 19,
        "APPLIER_EMAIL_APP_SUC_SMS": 20,
        "APPLIER_EMAIL_APP_NO_ATTACH_SMS": 21,
        "APPLIER_EMAIL_APP_ATTACH_ERROR_SMS": 22,
        "APPLIER_EMAIL_APP_ATTACH_OVERSIZE_SMS": 23,
        "APPLIER_EMAIL_APP_RESOLVE_FAIL_SMS": 24,
        "APPLIER_EMAIL_APP_ATTACH_RESOLVE_FAIL_SMS": 25,
        "APPLIER_APP_ATTACH_RESOLVE_SUC_SMS": 26,
        "APPLIER_APP_ATTACH_RESOLVE_FAIL_SMS": 27,
        "APPLIER_APP_ATTACH_RESOLVE_ERROR_SMS": 28,
        "PPLIER_APP_ATTACH_RESOLVE_OVERSIZE_SMS": 29,
        "APPLIER_APP_RESOLVE_FAIL_SMS": 30,
        "ALARM_SMS": 31,
    }


class MessageTplDataCol(object):
    """
    Attributes:
     - color
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'color', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
    )

    def __init__(self, color=None, value=None,):
        self.color = color
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.color = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageTplDataCol')
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.STRING, 1)
            oprot.writeString(self.color.encode('utf-8') if sys.version_info[0] == 2 else self.color)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageTemplateNoticeStruct(object):
    """
    Attributes:
     - user_id
     - type
     - sys_template_id
     - url
     - company_id
     - data
     - enable_qx_retry
     - delay
     - validators
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'user_id', None, None, ),  # 1
        (2, TType.BYTE, 'type', None, None, ),  # 2
        (3, TType.I32, 'sys_template_id', None, None, ),  # 3
        (4, TType.STRING, 'url', 'UTF8', None, ),  # 4
        (5, TType.I32, 'company_id', None, None, ),  # 5
        (6, TType.MAP, 'data', (TType.STRING, 'UTF8', TType.STRUCT, (MessageTplDataCol, MessageTplDataCol.thrift_spec), False), None, ),  # 6
        (7, TType.BYTE, 'enable_qx_retry', None, 1, ),  # 7
        (8, TType.I64, 'delay', None, 0, ),  # 8
        (9, TType.STRING, 'validators', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'id', 'UTF8', None, ),  # 10
    )

    def __init__(self, user_id=None, type=None, sys_template_id=None, url=None, company_id=None, data=None, enable_qx_retry=thrift_spec[7][4], delay=thrift_spec[8][4], validators=None, id=None,):
        self.user_id = user_id
        self.type = type
        self.sys_template_id = sys_template_id
        self.url = url
        self.company_id = company_id
        self.data = data
        self.enable_qx_retry = enable_qx_retry
        self.delay = delay
        self.validators = validators
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.sys_template_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.data = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = MessageTplDataCol()
                        _val6.read(iprot)
                        self.data[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BYTE:
                    self.enable_qx_retry = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.delay = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.validators = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageTemplateNoticeStruct')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 1)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 2)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        if self.sys_template_id is not None:
            oprot.writeFieldBegin('sys_template_id', TType.I32, 3)
            oprot.writeI32(self.sys_template_id)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 4)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 5)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.data))
            for kiter7, viter8 in self.data.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.enable_qx_retry is not None:
            oprot.writeFieldBegin('enable_qx_retry', TType.BYTE, 7)
            oprot.writeByte(self.enable_qx_retry)
            oprot.writeFieldEnd()
        if self.delay is not None:
            oprot.writeFieldBegin('delay', TType.I64, 8)
            oprot.writeI64(self.delay)
            oprot.writeFieldEnd()
        if self.validators is not None:
            oprot.writeFieldBegin('validators', TType.STRING, 9)
            oprot.writeString(self.validators.encode('utf-8') if sys.version_info[0] == 2 else self.validators)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 10)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmailStruct(object):
    """
    Attributes:
     - user_id
     - email
     - url
     - eventType
     - subject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'user_id', None, None, ),  # 1
        (2, TType.STRING, 'email', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'url', 'UTF8', None, ),  # 3
        (4, TType.I32, 'eventType', None, None, ),  # 4
        (5, TType.STRING, 'subject', 'UTF8', None, ),  # 5
    )

    def __init__(self, user_id=None, email=None, url=None, eventType=None, subject=None,):
        self.user_id = user_id
        self.email = email
        self.url = url
        self.eventType = eventType
        self.subject = subject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.eventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.subject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmailStruct')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 1)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 2)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 3)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 4)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        if self.subject is not None:
            oprot.writeFieldBegin('subject', TType.STRING, 5)
            oprot.writeString(self.subject.encode('utf-8') if sys.version_info[0] == 2 else self.subject)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MandrillEmailStruct(object):
    """
    Attributes:
     - templateName
     - to_email
     - to_name
     - mergeVars
     - from_email
     - from_name
     - subject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'templateName', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'to_email', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'to_name', 'UTF8', None, ),  # 3
        (4, TType.MAP, 'mergeVars', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.STRING, 'from_email', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'from_name', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'subject', 'UTF8', None, ),  # 7
    )

    def __init__(self, templateName=None, to_email=None, to_name=None, mergeVars=None, from_email=None, from_name=None, subject=None,):
        self.templateName = templateName
        self.to_email = to_email
        self.to_name = to_name
        self.mergeVars = mergeVars
        self.from_email = from_email
        self.from_name = from_name
        self.subject = subject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.templateName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to_email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.to_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.mergeVars = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mergeVars[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.from_email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.from_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.subject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MandrillEmailStruct')
        if self.templateName is not None:
            oprot.writeFieldBegin('templateName', TType.STRING, 1)
            oprot.writeString(self.templateName.encode('utf-8') if sys.version_info[0] == 2 else self.templateName)
            oprot.writeFieldEnd()
        if self.to_email is not None:
            oprot.writeFieldBegin('to_email', TType.STRING, 2)
            oprot.writeString(self.to_email.encode('utf-8') if sys.version_info[0] == 2 else self.to_email)
            oprot.writeFieldEnd()
        if self.to_name is not None:
            oprot.writeFieldBegin('to_name', TType.STRING, 3)
            oprot.writeString(self.to_name.encode('utf-8') if sys.version_info[0] == 2 else self.to_name)
            oprot.writeFieldEnd()
        if self.mergeVars is not None:
            oprot.writeFieldBegin('mergeVars', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mergeVars))
            for kiter16, viter17 in self.mergeVars.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.from_email is not None:
            oprot.writeFieldBegin('from_email', TType.STRING, 5)
            oprot.writeString(self.from_email.encode('utf-8') if sys.version_info[0] == 2 else self.from_email)
            oprot.writeFieldEnd()
        if self.from_name is not None:
            oprot.writeFieldBegin('from_name', TType.STRING, 6)
            oprot.writeString(self.from_name.encode('utf-8') if sys.version_info[0] == 2 else self.from_name)
            oprot.writeFieldEnd()
        if self.subject is not None:
            oprot.writeFieldBegin('subject', TType.STRING, 7)
            oprot.writeString(self.subject.encode('utf-8') if sys.version_info[0] == 2 else self.subject)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
