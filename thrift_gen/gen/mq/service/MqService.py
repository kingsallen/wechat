#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def messageTemplateNotice(self, messageTemplateNoticeStruct):
        """
        Parameters:
         - messageTemplateNoticeStruct
        """
        pass

    def sendEMail(self, emailStruct):
        """
        Parameters:
         - emailStruct
        """
        pass

    def sendAuthEMail(self, params, eventType, email, subject):
        """
        Parameters:
         - params
         - eventType
         - email
         - subject
        """
        pass

    def sendMandrilEmail(self, mandrillEmailStruct):
        """
        Parameters:
         - mandrillEmailStruct
        """
        pass

    def sendSMS(self, smsType, mobile, data, sys, ip):
        """
        Parameters:
         - smsType
         - mobile
         - data
         - sys
         - ip
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def messageTemplateNotice(self, messageTemplateNoticeStruct):
        """
        Parameters:
         - messageTemplateNoticeStruct
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_messageTemplateNotice(messageTemplateNoticeStruct)
        return future

    def send_messageTemplateNotice(self, messageTemplateNoticeStruct):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('messageTemplateNotice', TMessageType.CALL, self._seqid)
        args = messageTemplateNotice_args()
        args.messageTemplateNoticeStruct = messageTemplateNoticeStruct
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_messageTemplateNotice(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = messageTemplateNotice_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "messageTemplateNotice failed: unknown result")

    def sendEMail(self, emailStruct):
        """
        Parameters:
         - emailStruct
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendEMail(emailStruct)
        return future

    def send_sendEMail(self, emailStruct):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendEMail', TMessageType.CALL, self._seqid)
        args = sendEMail_args()
        args.emailStruct = emailStruct
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendEMail(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendEMail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendEMail failed: unknown result")

    def sendAuthEMail(self, params, eventType, email, subject):
        """
        Parameters:
         - params
         - eventType
         - email
         - subject
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendAuthEMail(params, eventType, email, subject)
        return future

    def send_sendAuthEMail(self, params, eventType, email, subject):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendAuthEMail', TMessageType.CALL, self._seqid)
        args = sendAuthEMail_args()
        args.params = params
        args.eventType = eventType
        args.email = email
        args.subject = subject
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendAuthEMail(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendAuthEMail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendAuthEMail failed: unknown result")

    def sendMandrilEmail(self, mandrillEmailStruct):
        """
        Parameters:
         - mandrillEmailStruct
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendMandrilEmail(mandrillEmailStruct)
        return future

    def send_sendMandrilEmail(self, mandrillEmailStruct):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendMandrilEmail', TMessageType.CALL, self._seqid)
        args = sendMandrilEmail_args()
        args.mandrillEmailStruct = mandrillEmailStruct
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendMandrilEmail(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMandrilEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMandrilEmail failed: unknown result")

    def sendSMS(self, smsType, mobile, data, sys, ip):
        """
        Parameters:
         - smsType
         - mobile
         - data
         - sys
         - ip
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendSMS(smsType, mobile, data, sys, ip)
        return future

    def send_sendSMS(self, smsType, mobile, data, sys, ip):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendSMS', TMessageType.CALL, self._seqid)
        args = sendSMS_args()
        args.smsType = smsType
        args.mobile = mobile
        args.data = data
        args.sys = sys
        args.ip = ip
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendSMS(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendSMS_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendSMS failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["messageTemplateNotice"] = Processor.process_messageTemplateNotice
        self._processMap["sendEMail"] = Processor.process_sendEMail
        self._processMap["sendAuthEMail"] = Processor.process_sendAuthEMail
        self._processMap["sendMandrilEmail"] = Processor.process_sendMandrilEmail
        self._processMap["sendSMS"] = Processor.process_sendSMS

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_messageTemplateNotice(self, seqid, iprot, oprot):
        args = messageTemplateNotice_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = messageTemplateNotice_result()
        result.success = yield gen.maybe_future(self._handler.messageTemplateNotice(args.messageTemplateNoticeStruct))
        oprot.writeMessageBegin("messageTemplateNotice", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_sendEMail(self, seqid, iprot, oprot):
        args = sendEMail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendEMail_result()
        result.success = yield gen.maybe_future(self._handler.sendEMail(args.emailStruct))
        oprot.writeMessageBegin("sendEMail", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_sendAuthEMail(self, seqid, iprot, oprot):
        args = sendAuthEMail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendAuthEMail_result()
        result.success = yield gen.maybe_future(self._handler.sendAuthEMail(args.params, args.eventType, args.email, args.subject))
        oprot.writeMessageBegin("sendAuthEMail", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_sendMandrilEmail(self, seqid, iprot, oprot):
        args = sendMandrilEmail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendMandrilEmail_result()
        result.success = yield gen.maybe_future(self._handler.sendMandrilEmail(args.mandrillEmailStruct))
        oprot.writeMessageBegin("sendMandrilEmail", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_sendSMS(self, seqid, iprot, oprot):
        args = sendSMS_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendSMS_result()
        result.success = yield gen.maybe_future(self._handler.sendSMS(args.smsType, args.mobile, args.data, args.sys, args.ip))
        oprot.writeMessageBegin("sendSMS", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class messageTemplateNotice_args(object):
    """
    Attributes:
     - messageTemplateNoticeStruct
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'messageTemplateNoticeStruct', (thrift_gen.gen.mq.struct.ttypes.MessageTemplateNoticeStruct, thrift_gen.gen.mq.struct.ttypes.MessageTemplateNoticeStruct.thrift_spec), None, ),  # 1
    )

    def __init__(self, messageTemplateNoticeStruct=None,):
        self.messageTemplateNoticeStruct = messageTemplateNoticeStruct

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.messageTemplateNoticeStruct = thrift_gen.gen.mq.struct.ttypes.MessageTemplateNoticeStruct()
                    self.messageTemplateNoticeStruct.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('messageTemplateNotice_args')
        if self.messageTemplateNoticeStruct is not None:
            oprot.writeFieldBegin('messageTemplateNoticeStruct', TType.STRUCT, 1)
            self.messageTemplateNoticeStruct.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class messageTemplateNotice_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('messageTemplateNotice_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendEMail_args(object):
    """
    Attributes:
     - emailStruct
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'emailStruct', (thrift_gen.gen.mq.struct.ttypes.EmailStruct, thrift_gen.gen.mq.struct.ttypes.EmailStruct.thrift_spec), None, ),  # 1
    )

    def __init__(self, emailStruct=None,):
        self.emailStruct = emailStruct

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.emailStruct = thrift_gen.gen.mq.struct.ttypes.EmailStruct()
                    self.emailStruct.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendEMail_args')
        if self.emailStruct is not None:
            oprot.writeFieldBegin('emailStruct', TType.STRUCT, 1)
            self.emailStruct.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendEMail_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendEMail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendAuthEMail_args(object):
    """
    Attributes:
     - params
     - eventType
     - email
     - subject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'params', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.I32, 'eventType', None, None, ),  # 2
        (3, TType.STRING, 'email', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'subject', 'UTF8', None, ),  # 4
    )

    def __init__(self, params=None, eventType=None, email=None, subject=None,):
        self.params = params
        self.eventType = eventType
        self.email = email
        self.subject = subject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.params = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.eventType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.subject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendAuthEMail_args')
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.params))
            for kiter7, viter8 in self.params.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.I32, 2)
            oprot.writeI32(self.eventType)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 3)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.subject is not None:
            oprot.writeFieldBegin('subject', TType.STRING, 4)
            oprot.writeString(self.subject.encode('utf-8') if sys.version_info[0] == 2 else self.subject)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendAuthEMail_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendAuthEMail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendMandrilEmail_args(object):
    """
    Attributes:
     - mandrillEmailStruct
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'mandrillEmailStruct', (thrift_gen.gen.mq.struct.ttypes.MandrillEmailStruct, thrift_gen.gen.mq.struct.ttypes.MandrillEmailStruct.thrift_spec), None, ),  # 1
    )

    def __init__(self, mandrillEmailStruct=None,):
        self.mandrillEmailStruct = mandrillEmailStruct

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mandrillEmailStruct = thrift_gen.gen.mq.struct.ttypes.MandrillEmailStruct()
                    self.mandrillEmailStruct.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMandrilEmail_args')
        if self.mandrillEmailStruct is not None:
            oprot.writeFieldBegin('mandrillEmailStruct', TType.STRUCT, 1)
            self.mandrillEmailStruct.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendMandrilEmail_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMandrilEmail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendSMS_args(object):
    """
    Attributes:
     - smsType
     - mobile
     - data
     - sys
     - ip
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'smsType', None, None, ),  # 1
        (2, TType.STRING, 'mobile', 'UTF8', None, ),  # 2
        (3, TType.MAP, 'data', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'sys', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'ip', 'UTF8', None, ),  # 5
    )

    def __init__(self, smsType=None, mobile=None, data=None, sys=None, ip=None,):
        self.smsType = smsType
        self.mobile = mobile
        self.data = data
        self.sys = sys
        self.ip = ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.smsType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.data = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.data[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sys = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendSMS_args')
        if self.smsType is not None:
            oprot.writeFieldBegin('smsType', TType.I32, 1)
            oprot.writeI32(self.smsType)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 2)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.data))
            for kiter16, viter17 in self.data.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sys is not None:
            oprot.writeFieldBegin('sys', TType.STRING, 4)
            oprot.writeString(self.sys.encode('utf-8') if sys.version_info[0] == 2 else self.sys)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 5)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendSMS_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendSMS_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
