#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    """
    用户服务

    """
    def getUserById(self, userId):
        """
        Parameters:
         - userId
        """
        pass

    def getUsers(self, query):
        """
        Parameters:
         - query
        """
        pass

    def updateUser(self, user):
        """
        Parameters:
         - user
        """
        pass

    def getismobileregisted(self, mobile):
        """
        Parameters:
         - mobile
        """
        pass

    def postuserlogin(self, userloginreq):
        """
        Parameters:
         - userloginreq
        """
        pass

    def postuserlogout(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def postsendsignupcode(self, mobile):
        """
        Parameters:
         - mobile
        """
        pass

    def postusermobilesignup(self, user, code):
        """
        Parameters:
         - user
         - code
        """
        pass

    def postuserwxbindmobile(self, appid, unionid, code, mobile):
        """
        Parameters:
         - appid
         - unionid
         - code
         - mobile
        """
        pass

    def postuserbindmobile(self, appid, unionid, code, mobile, bindType):
        """
        Parameters:
         - appid
         - unionid
         - code
         - mobile
         - bindType
        """
        pass

    def postuserchangepassword(self, user_id, old_password, password):
        """
        Parameters:
         - user_id
         - old_password
         - password
        """
        pass

    def postusersendpasswordforgotcode(self, mobile):
        """
        Parameters:
         - mobile
        """
        pass

    def postvalidatepasswordforgotcode(self, mobile, code):
        """
        Parameters:
         - mobile
         - code
        """
        pass

    def validateVerifyCode(self, mobile, code, type):
        """
        Parameters:
         - mobile
         - code
         - type
        """
        pass

    def sendVerifyCode(self, mobile, type):
        """
        Parameters:
         - mobile
         - type
        """
        pass

    def checkEmail(self, email):
        """
        Parameters:
         - email
        """
        pass

    def postuserresetpassword(self, mobile, code, password):
        """
        Parameters:
         - mobile
         - code
         - password
        """
        pass

    def postusermergebymobile(self, appid, mobile):
        """
        Parameters:
         - appid
         - mobile
        """
        pass

    def postsendchangemobilecode(self, oldmobile):
        """
        Parameters:
         - oldmobile
        """
        pass

    def postvalidatechangemobilecode(self, oldmobile, code):
        """
        Parameters:
         - oldmobile
         - code
        """
        pass

    def postsendresetmobilecode(self, newmobile):
        """
        Parameters:
         - newmobile
        """
        pass

    def postresetmobile(self, user_id, newmobile, code):
        """
        Parameters:
         - user_id
         - newmobile
         - code
        """
        pass

    def getUserFavPositionCountByUserIdAndPositionId(self, userId, positionId):
        """
        Parameters:
         - userId
         - positionId
        """
        pass

    def postUserFavoritePosition(self, userFavoritePosition):
        """
        Parameters:
         - userFavoritePosition
        """
        pass

    def cerateQrcode(self, wechatId, sceneId, expireSeconds, action_name):
        """
        Parameters:
         - wechatId
         - sceneId
         - expireSeconds
         - action_name
        """
        pass

    def getQrcode(self, ticket):
        """
        Parameters:
         - ticket
        """
        pass

    def getScanResult(self, wechatId, sceneId):
        """
        Parameters:
         - wechatId
         - sceneId
        """
        pass

    def setScanResult(self, wechatId, sceneId, value):
        """
        Parameters:
         - wechatId
         - sceneId
         - value
        """
        pass

    def ifExistUser(self, mobile):
        """
        Parameters:
         - mobile
        """
        pass

    def createRetrieveProfileUser(self, user):
        """
        Parameters:
         - user
        """
        pass

    def ifExistProfile(self, mobile):
        """
        Parameters:
         - mobile
        """
        pass


class Client(Iface):
    """
    用户服务

    """
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def getUserById(self, userId):
        """
        Parameters:
         - userId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getUserById(userId)
        return future

    def send_getUserById(self, userId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getUserById', TMessageType.CALL, self._seqid)
        args = getUserById_args()
        args.userId = userId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getUserById(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserById failed: unknown result")

    def getUsers(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getUsers(query)
        return future

    def send_getUsers(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getUsers', TMessageType.CALL, self._seqid)
        args = getUsers_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getUsers(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUsers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUsers failed: unknown result")

    def updateUser(self, user):
        """
        Parameters:
         - user
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_updateUser(user)
        return future

    def send_updateUser(self, user):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updateUser', TMessageType.CALL, self._seqid)
        args = updateUser_args()
        args.user = user
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updateUser(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUser failed: unknown result")

    def getismobileregisted(self, mobile):
        """
        Parameters:
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getismobileregisted(mobile)
        return future

    def send_getismobileregisted(self, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getismobileregisted', TMessageType.CALL, self._seqid)
        args = getismobileregisted_args()
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getismobileregisted(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getismobileregisted_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getismobileregisted failed: unknown result")

    def postuserlogin(self, userloginreq):
        """
        Parameters:
         - userloginreq
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserlogin(userloginreq)
        return future

    def send_postuserlogin(self, userloginreq):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserlogin', TMessageType.CALL, self._seqid)
        args = postuserlogin_args()
        args.userloginreq = userloginreq
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserlogin(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserlogin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserlogin failed: unknown result")

    def postuserlogout(self, userid):
        """
        Parameters:
         - userid
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserlogout(userid)
        return future

    def send_postuserlogout(self, userid):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserlogout', TMessageType.CALL, self._seqid)
        args = postuserlogout_args()
        args.userid = userid
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserlogout(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserlogout_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserlogout failed: unknown result")

    def postsendsignupcode(self, mobile):
        """
        Parameters:
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postsendsignupcode(mobile)
        return future

    def send_postsendsignupcode(self, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postsendsignupcode', TMessageType.CALL, self._seqid)
        args = postsendsignupcode_args()
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postsendsignupcode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postsendsignupcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postsendsignupcode failed: unknown result")

    def postusermobilesignup(self, user, code):
        """
        Parameters:
         - user
         - code
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postusermobilesignup(user, code)
        return future

    def send_postusermobilesignup(self, user, code):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postusermobilesignup', TMessageType.CALL, self._seqid)
        args = postusermobilesignup_args()
        args.user = user
        args.code = code
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postusermobilesignup(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postusermobilesignup_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postusermobilesignup failed: unknown result")

    def postuserwxbindmobile(self, appid, unionid, code, mobile):
        """
        Parameters:
         - appid
         - unionid
         - code
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserwxbindmobile(appid, unionid, code, mobile)
        return future

    def send_postuserwxbindmobile(self, appid, unionid, code, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserwxbindmobile', TMessageType.CALL, self._seqid)
        args = postuserwxbindmobile_args()
        args.appid = appid
        args.unionid = unionid
        args.code = code
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserwxbindmobile(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserwxbindmobile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserwxbindmobile failed: unknown result")

    def postuserbindmobile(self, appid, unionid, code, mobile, bindType):
        """
        Parameters:
         - appid
         - unionid
         - code
         - mobile
         - bindType
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserbindmobile(appid, unionid, code, mobile, bindType)
        return future

    def send_postuserbindmobile(self, appid, unionid, code, mobile, bindType):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserbindmobile', TMessageType.CALL, self._seqid)
        args = postuserbindmobile_args()
        args.appid = appid
        args.unionid = unionid
        args.code = code
        args.mobile = mobile
        args.bindType = bindType
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserbindmobile(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserbindmobile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserbindmobile failed: unknown result")

    def postuserchangepassword(self, user_id, old_password, password):
        """
        Parameters:
         - user_id
         - old_password
         - password
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserchangepassword(user_id, old_password, password)
        return future

    def send_postuserchangepassword(self, user_id, old_password, password):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserchangepassword', TMessageType.CALL, self._seqid)
        args = postuserchangepassword_args()
        args.user_id = user_id
        args.old_password = old_password
        args.password = password
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserchangepassword(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserchangepassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserchangepassword failed: unknown result")

    def postusersendpasswordforgotcode(self, mobile):
        """
        Parameters:
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postusersendpasswordforgotcode(mobile)
        return future

    def send_postusersendpasswordforgotcode(self, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postusersendpasswordforgotcode', TMessageType.CALL, self._seqid)
        args = postusersendpasswordforgotcode_args()
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postusersendpasswordforgotcode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postusersendpasswordforgotcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postusersendpasswordforgotcode failed: unknown result")

    def postvalidatepasswordforgotcode(self, mobile, code):
        """
        Parameters:
         - mobile
         - code
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postvalidatepasswordforgotcode(mobile, code)
        return future

    def send_postvalidatepasswordforgotcode(self, mobile, code):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postvalidatepasswordforgotcode', TMessageType.CALL, self._seqid)
        args = postvalidatepasswordforgotcode_args()
        args.mobile = mobile
        args.code = code
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postvalidatepasswordforgotcode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postvalidatepasswordforgotcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postvalidatepasswordforgotcode failed: unknown result")

    def validateVerifyCode(self, mobile, code, type):
        """
        Parameters:
         - mobile
         - code
         - type
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_validateVerifyCode(mobile, code, type)
        return future

    def send_validateVerifyCode(self, mobile, code, type):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('validateVerifyCode', TMessageType.CALL, self._seqid)
        args = validateVerifyCode_args()
        args.mobile = mobile
        args.code = code
        args.type = type
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_validateVerifyCode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = validateVerifyCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "validateVerifyCode failed: unknown result")

    def sendVerifyCode(self, mobile, type):
        """
        Parameters:
         - mobile
         - type
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendVerifyCode(mobile, type)
        return future

    def send_sendVerifyCode(self, mobile, type):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendVerifyCode', TMessageType.CALL, self._seqid)
        args = sendVerifyCode_args()
        args.mobile = mobile
        args.type = type
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendVerifyCode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendVerifyCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendVerifyCode failed: unknown result")

    def checkEmail(self, email):
        """
        Parameters:
         - email
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_checkEmail(email)
        return future

    def send_checkEmail(self, email):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('checkEmail', TMessageType.CALL, self._seqid)
        args = checkEmail_args()
        args.email = email
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_checkEmail(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkEmail_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkEmail failed: unknown result")

    def postuserresetpassword(self, mobile, code, password):
        """
        Parameters:
         - mobile
         - code
         - password
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postuserresetpassword(mobile, code, password)
        return future

    def send_postuserresetpassword(self, mobile, code, password):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postuserresetpassword', TMessageType.CALL, self._seqid)
        args = postuserresetpassword_args()
        args.mobile = mobile
        args.code = code
        args.password = password
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postuserresetpassword(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postuserresetpassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postuserresetpassword failed: unknown result")

    def postusermergebymobile(self, appid, mobile):
        """
        Parameters:
         - appid
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postusermergebymobile(appid, mobile)
        return future

    def send_postusermergebymobile(self, appid, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postusermergebymobile', TMessageType.CALL, self._seqid)
        args = postusermergebymobile_args()
        args.appid = appid
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postusermergebymobile(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postusermergebymobile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postusermergebymobile failed: unknown result")

    def postsendchangemobilecode(self, oldmobile):
        """
        Parameters:
         - oldmobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postsendchangemobilecode(oldmobile)
        return future

    def send_postsendchangemobilecode(self, oldmobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postsendchangemobilecode', TMessageType.CALL, self._seqid)
        args = postsendchangemobilecode_args()
        args.oldmobile = oldmobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postsendchangemobilecode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postsendchangemobilecode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postsendchangemobilecode failed: unknown result")

    def postvalidatechangemobilecode(self, oldmobile, code):
        """
        Parameters:
         - oldmobile
         - code
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postvalidatechangemobilecode(oldmobile, code)
        return future

    def send_postvalidatechangemobilecode(self, oldmobile, code):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postvalidatechangemobilecode', TMessageType.CALL, self._seqid)
        args = postvalidatechangemobilecode_args()
        args.oldmobile = oldmobile
        args.code = code
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postvalidatechangemobilecode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postvalidatechangemobilecode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postvalidatechangemobilecode failed: unknown result")

    def postsendresetmobilecode(self, newmobile):
        """
        Parameters:
         - newmobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postsendresetmobilecode(newmobile)
        return future

    def send_postsendresetmobilecode(self, newmobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postsendresetmobilecode', TMessageType.CALL, self._seqid)
        args = postsendresetmobilecode_args()
        args.newmobile = newmobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postsendresetmobilecode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postsendresetmobilecode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postsendresetmobilecode failed: unknown result")

    def postresetmobile(self, user_id, newmobile, code):
        """
        Parameters:
         - user_id
         - newmobile
         - code
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postresetmobile(user_id, newmobile, code)
        return future

    def send_postresetmobile(self, user_id, newmobile, code):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postresetmobile', TMessageType.CALL, self._seqid)
        args = postresetmobile_args()
        args.user_id = user_id
        args.newmobile = newmobile
        args.code = code
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postresetmobile(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postresetmobile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postresetmobile failed: unknown result")

    def getUserFavPositionCountByUserIdAndPositionId(self, userId, positionId):
        """
        Parameters:
         - userId
         - positionId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getUserFavPositionCountByUserIdAndPositionId(userId, positionId)
        return future

    def send_getUserFavPositionCountByUserIdAndPositionId(self, userId, positionId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getUserFavPositionCountByUserIdAndPositionId', TMessageType.CALL, self._seqid)
        args = getUserFavPositionCountByUserIdAndPositionId_args()
        args.userId = userId
        args.positionId = positionId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getUserFavPositionCountByUserIdAndPositionId(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserFavPositionCountByUserIdAndPositionId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserFavPositionCountByUserIdAndPositionId failed: unknown result")

    def postUserFavoritePosition(self, userFavoritePosition):
        """
        Parameters:
         - userFavoritePosition
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postUserFavoritePosition(userFavoritePosition)
        return future

    def send_postUserFavoritePosition(self, userFavoritePosition):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postUserFavoritePosition', TMessageType.CALL, self._seqid)
        args = postUserFavoritePosition_args()
        args.userFavoritePosition = userFavoritePosition
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postUserFavoritePosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postUserFavoritePosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postUserFavoritePosition failed: unknown result")

    def cerateQrcode(self, wechatId, sceneId, expireSeconds, action_name):
        """
        Parameters:
         - wechatId
         - sceneId
         - expireSeconds
         - action_name
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_cerateQrcode(wechatId, sceneId, expireSeconds, action_name)
        return future

    def send_cerateQrcode(self, wechatId, sceneId, expireSeconds, action_name):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('cerateQrcode', TMessageType.CALL, self._seqid)
        args = cerateQrcode_args()
        args.wechatId = wechatId
        args.sceneId = sceneId
        args.expireSeconds = expireSeconds
        args.action_name = action_name
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_cerateQrcode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = cerateQrcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "cerateQrcode failed: unknown result")

    def getQrcode(self, ticket):
        """
        Parameters:
         - ticket
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getQrcode(ticket)
        return future

    def send_getQrcode(self, ticket):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getQrcode', TMessageType.CALL, self._seqid)
        args = getQrcode_args()
        args.ticket = ticket
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getQrcode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getQrcode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getQrcode failed: unknown result")

    def getScanResult(self, wechatId, sceneId):
        """
        Parameters:
         - wechatId
         - sceneId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getScanResult(wechatId, sceneId)
        return future

    def send_getScanResult(self, wechatId, sceneId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getScanResult', TMessageType.CALL, self._seqid)
        args = getScanResult_args()
        args.wechatId = wechatId
        args.sceneId = sceneId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getScanResult(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getScanResult_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getScanResult failed: unknown result")

    def setScanResult(self, wechatId, sceneId, value):
        """
        Parameters:
         - wechatId
         - sceneId
         - value
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_setScanResult(wechatId, sceneId, value)
        return future

    def send_setScanResult(self, wechatId, sceneId, value):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('setScanResult', TMessageType.CALL, self._seqid)
        args = setScanResult_args()
        args.wechatId = wechatId
        args.sceneId = sceneId
        args.value = value
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_setScanResult(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setScanResult_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setScanResult failed: unknown result")

    def ifExistUser(self, mobile):
        """
        Parameters:
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_ifExistUser(mobile)
        return future

    def send_ifExistUser(self, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('ifExistUser', TMessageType.CALL, self._seqid)
        args = ifExistUser_args()
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_ifExistUser(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ifExistUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ifExistUser failed: unknown result")

    def createRetrieveProfileUser(self, user):
        """
        Parameters:
         - user
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_createRetrieveProfileUser(user)
        return future

    def send_createRetrieveProfileUser(self, user):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('createRetrieveProfileUser', TMessageType.CALL, self._seqid)
        args = createRetrieveProfileUser_args()
        args.user = user
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_createRetrieveProfileUser(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRetrieveProfileUser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRetrieveProfileUser failed: unknown result")

    def ifExistProfile(self, mobile):
        """
        Parameters:
         - mobile
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_ifExistProfile(mobile)
        return future

    def send_ifExistProfile(self, mobile):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('ifExistProfile', TMessageType.CALL, self._seqid)
        args = ifExistProfile_args()
        args.mobile = mobile
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_ifExistProfile(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ifExistProfile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ifExistProfile failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getUserById"] = Processor.process_getUserById
        self._processMap["getUsers"] = Processor.process_getUsers
        self._processMap["updateUser"] = Processor.process_updateUser
        self._processMap["getismobileregisted"] = Processor.process_getismobileregisted
        self._processMap["postuserlogin"] = Processor.process_postuserlogin
        self._processMap["postuserlogout"] = Processor.process_postuserlogout
        self._processMap["postsendsignupcode"] = Processor.process_postsendsignupcode
        self._processMap["postusermobilesignup"] = Processor.process_postusermobilesignup
        self._processMap["postuserwxbindmobile"] = Processor.process_postuserwxbindmobile
        self._processMap["postuserbindmobile"] = Processor.process_postuserbindmobile
        self._processMap["postuserchangepassword"] = Processor.process_postuserchangepassword
        self._processMap["postusersendpasswordforgotcode"] = Processor.process_postusersendpasswordforgotcode
        self._processMap["postvalidatepasswordforgotcode"] = Processor.process_postvalidatepasswordforgotcode
        self._processMap["validateVerifyCode"] = Processor.process_validateVerifyCode
        self._processMap["sendVerifyCode"] = Processor.process_sendVerifyCode
        self._processMap["checkEmail"] = Processor.process_checkEmail
        self._processMap["postuserresetpassword"] = Processor.process_postuserresetpassword
        self._processMap["postusermergebymobile"] = Processor.process_postusermergebymobile
        self._processMap["postsendchangemobilecode"] = Processor.process_postsendchangemobilecode
        self._processMap["postvalidatechangemobilecode"] = Processor.process_postvalidatechangemobilecode
        self._processMap["postsendresetmobilecode"] = Processor.process_postsendresetmobilecode
        self._processMap["postresetmobile"] = Processor.process_postresetmobile
        self._processMap["getUserFavPositionCountByUserIdAndPositionId"] = Processor.process_getUserFavPositionCountByUserIdAndPositionId
        self._processMap["postUserFavoritePosition"] = Processor.process_postUserFavoritePosition
        self._processMap["cerateQrcode"] = Processor.process_cerateQrcode
        self._processMap["getQrcode"] = Processor.process_getQrcode
        self._processMap["getScanResult"] = Processor.process_getScanResult
        self._processMap["setScanResult"] = Processor.process_setScanResult
        self._processMap["ifExistUser"] = Processor.process_ifExistUser
        self._processMap["createRetrieveProfileUser"] = Processor.process_createRetrieveProfileUser
        self._processMap["ifExistProfile"] = Processor.process_ifExistProfile

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_getUserById(self, seqid, iprot, oprot):
        args = getUserById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserById_result()
        result.success = yield gen.maybe_future(self._handler.getUserById(args.userId))
        oprot.writeMessageBegin("getUserById", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getUsers(self, seqid, iprot, oprot):
        args = getUsers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUsers_result()
        result.success = yield gen.maybe_future(self._handler.getUsers(args.query))
        oprot.writeMessageBegin("getUsers", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_updateUser(self, seqid, iprot, oprot):
        args = updateUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateUser_result()
        result.success = yield gen.maybe_future(self._handler.updateUser(args.user))
        oprot.writeMessageBegin("updateUser", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getismobileregisted(self, seqid, iprot, oprot):
        args = getismobileregisted_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getismobileregisted_result()
        result.success = yield gen.maybe_future(self._handler.getismobileregisted(args.mobile))
        oprot.writeMessageBegin("getismobileregisted", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserlogin(self, seqid, iprot, oprot):
        args = postuserlogin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserlogin_result()
        result.success = yield gen.maybe_future(self._handler.postuserlogin(args.userloginreq))
        oprot.writeMessageBegin("postuserlogin", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserlogout(self, seqid, iprot, oprot):
        args = postuserlogout_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserlogout_result()
        result.success = yield gen.maybe_future(self._handler.postuserlogout(args.userid))
        oprot.writeMessageBegin("postuserlogout", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postsendsignupcode(self, seqid, iprot, oprot):
        args = postsendsignupcode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postsendsignupcode_result()
        result.success = yield gen.maybe_future(self._handler.postsendsignupcode(args.mobile))
        oprot.writeMessageBegin("postsendsignupcode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postusermobilesignup(self, seqid, iprot, oprot):
        args = postusermobilesignup_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postusermobilesignup_result()
        result.success = yield gen.maybe_future(self._handler.postusermobilesignup(args.user, args.code))
        oprot.writeMessageBegin("postusermobilesignup", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserwxbindmobile(self, seqid, iprot, oprot):
        args = postuserwxbindmobile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserwxbindmobile_result()
        result.success = yield gen.maybe_future(self._handler.postuserwxbindmobile(args.appid, args.unionid, args.code, args.mobile))
        oprot.writeMessageBegin("postuserwxbindmobile", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserbindmobile(self, seqid, iprot, oprot):
        args = postuserbindmobile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserbindmobile_result()
        result.success = yield gen.maybe_future(self._handler.postuserbindmobile(args.appid, args.unionid, args.code, args.mobile, args.bindType))
        oprot.writeMessageBegin("postuserbindmobile", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserchangepassword(self, seqid, iprot, oprot):
        args = postuserchangepassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserchangepassword_result()
        result.success = yield gen.maybe_future(self._handler.postuserchangepassword(args.user_id, args.old_password, args.password))
        oprot.writeMessageBegin("postuserchangepassword", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postusersendpasswordforgotcode(self, seqid, iprot, oprot):
        args = postusersendpasswordforgotcode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postusersendpasswordforgotcode_result()
        result.success = yield gen.maybe_future(self._handler.postusersendpasswordforgotcode(args.mobile))
        oprot.writeMessageBegin("postusersendpasswordforgotcode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postvalidatepasswordforgotcode(self, seqid, iprot, oprot):
        args = postvalidatepasswordforgotcode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postvalidatepasswordforgotcode_result()
        result.success = yield gen.maybe_future(self._handler.postvalidatepasswordforgotcode(args.mobile, args.code))
        oprot.writeMessageBegin("postvalidatepasswordforgotcode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_validateVerifyCode(self, seqid, iprot, oprot):
        args = validateVerifyCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = validateVerifyCode_result()
        result.success = yield gen.maybe_future(self._handler.validateVerifyCode(args.mobile, args.code, args.type))
        oprot.writeMessageBegin("validateVerifyCode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_sendVerifyCode(self, seqid, iprot, oprot):
        args = sendVerifyCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendVerifyCode_result()
        result.success = yield gen.maybe_future(self._handler.sendVerifyCode(args.mobile, args.type))
        oprot.writeMessageBegin("sendVerifyCode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_checkEmail(self, seqid, iprot, oprot):
        args = checkEmail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkEmail_result()
        result.success = yield gen.maybe_future(self._handler.checkEmail(args.email))
        oprot.writeMessageBegin("checkEmail", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postuserresetpassword(self, seqid, iprot, oprot):
        args = postuserresetpassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postuserresetpassword_result()
        result.success = yield gen.maybe_future(self._handler.postuserresetpassword(args.mobile, args.code, args.password))
        oprot.writeMessageBegin("postuserresetpassword", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postusermergebymobile(self, seqid, iprot, oprot):
        args = postusermergebymobile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postusermergebymobile_result()
        result.success = yield gen.maybe_future(self._handler.postusermergebymobile(args.appid, args.mobile))
        oprot.writeMessageBegin("postusermergebymobile", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postsendchangemobilecode(self, seqid, iprot, oprot):
        args = postsendchangemobilecode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postsendchangemobilecode_result()
        result.success = yield gen.maybe_future(self._handler.postsendchangemobilecode(args.oldmobile))
        oprot.writeMessageBegin("postsendchangemobilecode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postvalidatechangemobilecode(self, seqid, iprot, oprot):
        args = postvalidatechangemobilecode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postvalidatechangemobilecode_result()
        result.success = yield gen.maybe_future(self._handler.postvalidatechangemobilecode(args.oldmobile, args.code))
        oprot.writeMessageBegin("postvalidatechangemobilecode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postsendresetmobilecode(self, seqid, iprot, oprot):
        args = postsendresetmobilecode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postsendresetmobilecode_result()
        result.success = yield gen.maybe_future(self._handler.postsendresetmobilecode(args.newmobile))
        oprot.writeMessageBegin("postsendresetmobilecode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postresetmobile(self, seqid, iprot, oprot):
        args = postresetmobile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postresetmobile_result()
        result.success = yield gen.maybe_future(self._handler.postresetmobile(args.user_id, args.newmobile, args.code))
        oprot.writeMessageBegin("postresetmobile", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getUserFavPositionCountByUserIdAndPositionId(self, seqid, iprot, oprot):
        args = getUserFavPositionCountByUserIdAndPositionId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserFavPositionCountByUserIdAndPositionId_result()
        result.success = yield gen.maybe_future(self._handler.getUserFavPositionCountByUserIdAndPositionId(args.userId, args.positionId))
        oprot.writeMessageBegin("getUserFavPositionCountByUserIdAndPositionId", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postUserFavoritePosition(self, seqid, iprot, oprot):
        args = postUserFavoritePosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postUserFavoritePosition_result()
        result.success = yield gen.maybe_future(self._handler.postUserFavoritePosition(args.userFavoritePosition))
        oprot.writeMessageBegin("postUserFavoritePosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_cerateQrcode(self, seqid, iprot, oprot):
        args = cerateQrcode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = cerateQrcode_result()
        result.success = yield gen.maybe_future(self._handler.cerateQrcode(args.wechatId, args.sceneId, args.expireSeconds, args.action_name))
        oprot.writeMessageBegin("cerateQrcode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getQrcode(self, seqid, iprot, oprot):
        args = getQrcode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getQrcode_result()
        result.success = yield gen.maybe_future(self._handler.getQrcode(args.ticket))
        oprot.writeMessageBegin("getQrcode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getScanResult(self, seqid, iprot, oprot):
        args = getScanResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getScanResult_result()
        result.success = yield gen.maybe_future(self._handler.getScanResult(args.wechatId, args.sceneId))
        oprot.writeMessageBegin("getScanResult", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_setScanResult(self, seqid, iprot, oprot):
        args = setScanResult_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setScanResult_result()
        result.success = yield gen.maybe_future(self._handler.setScanResult(args.wechatId, args.sceneId, args.value))
        oprot.writeMessageBegin("setScanResult", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_ifExistUser(self, seqid, iprot, oprot):
        args = ifExistUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ifExistUser_result()
        result.success = yield gen.maybe_future(self._handler.ifExistUser(args.mobile))
        oprot.writeMessageBegin("ifExistUser", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_createRetrieveProfileUser(self, seqid, iprot, oprot):
        args = createRetrieveProfileUser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createRetrieveProfileUser_result()
        result.success = yield gen.maybe_future(self._handler.createRetrieveProfileUser(args.user))
        oprot.writeMessageBegin("createRetrieveProfileUser", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_ifExistProfile(self, seqid, iprot, oprot):
        args = ifExistProfile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ifExistProfile_result()
        result.success = yield gen.maybe_future(self._handler.ifExistProfile(args.mobile))
        oprot.writeMessageBegin("ifExistProfile", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getUserById_args(object):
    """
    Attributes:
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'userId', None, None, ),  # 1
    )

    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.userId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserById_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I64, 1)
            oprot.writeI64(self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserById_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUsers_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUsers_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUsers_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUsers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateUser_args(object):
    """
    Attributes:
     - user
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'user', (thrift_gen.gen.useraccounts.struct.ttypes.User, thrift_gen.gen.useraccounts.struct.ttypes.User.thrift_spec), None, ),  # 1
    )

    def __init__(self, user=None,):
        self.user = user

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = thrift_gen.gen.useraccounts.struct.ttypes.User()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateUser_args')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateUser_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getismobileregisted_args(object):
    """
    Attributes:
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, mobile=None,):
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getismobileregisted_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getismobileregisted_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getismobileregisted_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserlogin_args(object):
    """
    Attributes:
     - userloginreq
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'userloginreq', (thrift_gen.gen.useraccounts.struct.ttypes.Userloginreq, thrift_gen.gen.useraccounts.struct.ttypes.Userloginreq.thrift_spec), None, ),  # 1
    )

    def __init__(self, userloginreq=None,):
        self.userloginreq = userloginreq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userloginreq = thrift_gen.gen.useraccounts.struct.ttypes.Userloginreq()
                    self.userloginreq.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserlogin_args')
        if self.userloginreq is not None:
            oprot.writeFieldBegin('userloginreq', TType.STRUCT, 1)
            self.userloginreq.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserlogin_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserlogin_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserlogout_args(object):
    """
    Attributes:
     - userid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userid', None, None, ),  # 1
    )

    def __init__(self, userid=None,):
        self.userid = userid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserlogout_args')
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.I32, 1)
            oprot.writeI32(self.userid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserlogout_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserlogout_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendsignupcode_args(object):
    """
    Attributes:
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, mobile=None,):
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendsignupcode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendsignupcode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendsignupcode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusermobilesignup_args(object):
    """
    Attributes:
     - user
     - code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'user', (thrift_gen.gen.useraccounts.struct.ttypes.User, thrift_gen.gen.useraccounts.struct.ttypes.User.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    )

    def __init__(self, user=None, code=None,):
        self.user = user
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = thrift_gen.gen.useraccounts.struct.ttypes.User()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusermobilesignup_args')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusermobilesignup_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusermobilesignup_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserwxbindmobile_args(object):
    """
    Attributes:
     - appid
     - unionid
     - code
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'appid', None, None, ),  # 1
        (2, TType.STRING, 'unionid', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'code', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'mobile', 'UTF8', None, ),  # 4
    )

    def __init__(self, appid=None, unionid=None, code=None, mobile=None,):
        self.appid = appid
        self.unionid = unionid
        self.code = code
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.unionid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserwxbindmobile_args')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 1)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.unionid is not None:
            oprot.writeFieldBegin('unionid', TType.STRING, 2)
            oprot.writeString(self.unionid.encode('utf-8') if sys.version_info[0] == 2 else self.unionid)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 3)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 4)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserwxbindmobile_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserwxbindmobile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserbindmobile_args(object):
    """
    Attributes:
     - appid
     - unionid
     - code
     - mobile
     - bindType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'appid', None, None, ),  # 1
        (2, TType.STRING, 'unionid', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'code', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'mobile', 'UTF8', None, ),  # 4
        (5, TType.I32, 'bindType', None, None, ),  # 5
    )

    def __init__(self, appid=None, unionid=None, code=None, mobile=None, bindType=None,):
        self.appid = appid
        self.unionid = unionid
        self.code = code
        self.mobile = mobile
        self.bindType = bindType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.unionid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.bindType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserbindmobile_args')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 1)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.unionid is not None:
            oprot.writeFieldBegin('unionid', TType.STRING, 2)
            oprot.writeString(self.unionid.encode('utf-8') if sys.version_info[0] == 2 else self.unionid)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 3)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 4)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.bindType is not None:
            oprot.writeFieldBegin('bindType', TType.I32, 5)
            oprot.writeI32(self.bindType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserbindmobile_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserbindmobile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserchangepassword_args(object):
    """
    Attributes:
     - user_id
     - old_password
     - password
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'user_id', None, None, ),  # 1
        (2, TType.STRING, 'old_password', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    )

    def __init__(self, user_id=None, old_password=None, password=None,):
        self.user_id = user_id
        self.old_password = old_password
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.old_password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserchangepassword_args')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 1)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.old_password is not None:
            oprot.writeFieldBegin('old_password', TType.STRING, 2)
            oprot.writeString(self.old_password.encode('utf-8') if sys.version_info[0] == 2 else self.old_password)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserchangepassword_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserchangepassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusersendpasswordforgotcode_args(object):
    """
    Attributes:
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, mobile=None,):
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusersendpasswordforgotcode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusersendpasswordforgotcode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusersendpasswordforgotcode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postvalidatepasswordforgotcode_args(object):
    """
    Attributes:
     - mobile
     - code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    )

    def __init__(self, mobile=None, code=None,):
        self.mobile = mobile
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postvalidatepasswordforgotcode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postvalidatepasswordforgotcode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postvalidatepasswordforgotcode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class validateVerifyCode_args(object):
    """
    Attributes:
     - mobile
     - code
     - type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
        (3, TType.I32, 'type', None, None, ),  # 3
    )

    def __init__(self, mobile=None, code=None, type=None,):
        self.mobile = mobile
        self.code = code
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('validateVerifyCode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class validateVerifyCode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('validateVerifyCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendVerifyCode_args(object):
    """
    Attributes:
     - mobile
     - type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
        None,  # 2
        (3, TType.I32, 'type', None, None, ),  # 3
    )

    def __init__(self, mobile=None, type=None,):
        self.mobile = mobile
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendVerifyCode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendVerifyCode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendVerifyCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkEmail_args(object):
    """
    Attributes:
     - email
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'email', 'UTF8', None, ),  # 1
    )

    def __init__(self, email=None,):
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkEmail_args')
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 1)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkEmail_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkEmail_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserresetpassword_args(object):
    """
    Attributes:
     - mobile
     - code
     - password
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    )

    def __init__(self, mobile=None, code=None, password=None,):
        self.mobile = mobile
        self.code = code
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserresetpassword_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postuserresetpassword_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postuserresetpassword_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusermergebymobile_args(object):
    """
    Attributes:
     - appid
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'appid', None, None, ),  # 1
        (2, TType.STRING, 'mobile', 'UTF8', None, ),  # 2
    )

    def __init__(self, appid=None, mobile=None,):
        self.appid = appid
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusermergebymobile_args')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 1)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 2)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postusermergebymobile_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postusermergebymobile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendchangemobilecode_args(object):
    """
    Attributes:
     - oldmobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'oldmobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, oldmobile=None,):
        self.oldmobile = oldmobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.oldmobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendchangemobilecode_args')
        if self.oldmobile is not None:
            oprot.writeFieldBegin('oldmobile', TType.STRING, 1)
            oprot.writeString(self.oldmobile.encode('utf-8') if sys.version_info[0] == 2 else self.oldmobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendchangemobilecode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendchangemobilecode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postvalidatechangemobilecode_args(object):
    """
    Attributes:
     - oldmobile
     - code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'oldmobile', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    )

    def __init__(self, oldmobile=None, code=None,):
        self.oldmobile = oldmobile
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.oldmobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postvalidatechangemobilecode_args')
        if self.oldmobile is not None:
            oprot.writeFieldBegin('oldmobile', TType.STRING, 1)
            oprot.writeString(self.oldmobile.encode('utf-8') if sys.version_info[0] == 2 else self.oldmobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postvalidatechangemobilecode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postvalidatechangemobilecode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendresetmobilecode_args(object):
    """
    Attributes:
     - newmobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'newmobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, newmobile=None,):
        self.newmobile = newmobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.newmobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendresetmobilecode_args')
        if self.newmobile is not None:
            oprot.writeFieldBegin('newmobile', TType.STRING, 1)
            oprot.writeString(self.newmobile.encode('utf-8') if sys.version_info[0] == 2 else self.newmobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postsendresetmobilecode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postsendresetmobilecode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postresetmobile_args(object):
    """
    Attributes:
     - user_id
     - newmobile
     - code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'user_id', None, None, ),  # 1
        (2, TType.STRING, 'newmobile', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'code', 'UTF8', None, ),  # 3
    )

    def __init__(self, user_id=None, newmobile=None, code=None,):
        self.user_id = user_id
        self.newmobile = newmobile
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newmobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postresetmobile_args')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 1)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.newmobile is not None:
            oprot.writeFieldBegin('newmobile', TType.STRING, 2)
            oprot.writeString(self.newmobile.encode('utf-8') if sys.version_info[0] == 2 else self.newmobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 3)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postresetmobile_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postresetmobile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserFavPositionCountByUserIdAndPositionId_args(object):
    """
    Attributes:
     - userId
     - positionId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.I32, 'positionId', None, None, ),  # 2
    )

    def __init__(self, userId=None, positionId=None,):
        self.userId = userId
        self.positionId = positionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserFavPositionCountByUserIdAndPositionId_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 2)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserFavPositionCountByUserIdAndPositionId_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserFavPositionCountByUserIdAndPositionId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postUserFavoritePosition_args(object):
    """
    Attributes:
     - userFavoritePosition
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'userFavoritePosition', (thrift_gen.gen.useraccounts.struct.ttypes.UserFavoritePosition, thrift_gen.gen.useraccounts.struct.ttypes.UserFavoritePosition.thrift_spec), None, ),  # 1
    )

    def __init__(self, userFavoritePosition=None,):
        self.userFavoritePosition = userFavoritePosition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userFavoritePosition = thrift_gen.gen.useraccounts.struct.ttypes.UserFavoritePosition()
                    self.userFavoritePosition.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postUserFavoritePosition_args')
        if self.userFavoritePosition is not None:
            oprot.writeFieldBegin('userFavoritePosition', TType.STRUCT, 1)
            self.userFavoritePosition.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postUserFavoritePosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postUserFavoritePosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cerateQrcode_args(object):
    """
    Attributes:
     - wechatId
     - sceneId
     - expireSeconds
     - action_name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'wechatId', None, None, ),  # 1
        (2, TType.I64, 'sceneId', None, None, ),  # 2
        (3, TType.I32, 'expireSeconds', None, None, ),  # 3
        (4, TType.I32, 'action_name', None, None, ),  # 4
    )

    def __init__(self, wechatId=None, sceneId=None, expireSeconds=None, action_name=None,):
        self.wechatId = wechatId
        self.sceneId = sceneId
        self.expireSeconds = expireSeconds
        self.action_name = action_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.wechatId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sceneId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.expireSeconds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.action_name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('cerateQrcode_args')
        if self.wechatId is not None:
            oprot.writeFieldBegin('wechatId', TType.I32, 1)
            oprot.writeI32(self.wechatId)
            oprot.writeFieldEnd()
        if self.sceneId is not None:
            oprot.writeFieldBegin('sceneId', TType.I64, 2)
            oprot.writeI64(self.sceneId)
            oprot.writeFieldEnd()
        if self.expireSeconds is not None:
            oprot.writeFieldBegin('expireSeconds', TType.I32, 3)
            oprot.writeI32(self.expireSeconds)
            oprot.writeFieldEnd()
        if self.action_name is not None:
            oprot.writeFieldBegin('action_name', TType.I32, 4)
            oprot.writeI32(self.action_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class cerateQrcode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('cerateQrcode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getQrcode_args(object):
    """
    Attributes:
     - ticket
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'ticket', 'UTF8', None, ),  # 1
    )

    def __init__(self, ticket=None,):
        self.ticket = ticket

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getQrcode_args')
        if self.ticket is not None:
            oprot.writeFieldBegin('ticket', TType.STRING, 1)
            oprot.writeString(self.ticket.encode('utf-8') if sys.version_info[0] == 2 else self.ticket)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getQrcode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getQrcode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getScanResult_args(object):
    """
    Attributes:
     - wechatId
     - sceneId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'wechatId', None, None, ),  # 1
        (2, TType.I64, 'sceneId', None, None, ),  # 2
    )

    def __init__(self, wechatId=None, sceneId=None,):
        self.wechatId = wechatId
        self.sceneId = sceneId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.wechatId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sceneId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getScanResult_args')
        if self.wechatId is not None:
            oprot.writeFieldBegin('wechatId', TType.I32, 1)
            oprot.writeI32(self.wechatId)
            oprot.writeFieldEnd()
        if self.sceneId is not None:
            oprot.writeFieldBegin('sceneId', TType.I64, 2)
            oprot.writeI64(self.sceneId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getScanResult_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getScanResult_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class setScanResult_args(object):
    """
    Attributes:
     - wechatId
     - sceneId
     - value
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'wechatId', None, None, ),  # 1
        (2, TType.I64, 'sceneId', None, None, ),  # 2
        (3, TType.STRING, 'value', 'UTF8', None, ),  # 3
    )

    def __init__(self, wechatId=None, sceneId=None, value=None,):
        self.wechatId = wechatId
        self.sceneId = sceneId
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.wechatId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.sceneId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('setScanResult_args')
        if self.wechatId is not None:
            oprot.writeFieldBegin('wechatId', TType.I32, 1)
            oprot.writeI32(self.wechatId)
            oprot.writeFieldEnd()
        if self.sceneId is not None:
            oprot.writeFieldBegin('sceneId', TType.I64, 2)
            oprot.writeI64(self.sceneId)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 3)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class setScanResult_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('setScanResult_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifExistUser_args(object):
    """
    Attributes:
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, mobile=None,):
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifExistUser_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifExistUser_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO, thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifExistUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createRetrieveProfileUser_args(object):
    """
    Attributes:
     - user
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'user', (thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO, thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO.thrift_spec), None, ),  # 1
    )

    def __init__(self, user=None,):
        self.user = user

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.user = thrift_gen.gen.dao.struct.userdb.ttypes.UserUserDO()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createRetrieveProfileUser_args')
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 1)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createRetrieveProfileUser_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createRetrieveProfileUser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifExistProfile_args(object):
    """
    Attributes:
     - mobile
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
    )

    def __init__(self, mobile=None,):
        self.mobile = mobile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifExistProfile_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifExistProfile_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifExistProfile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
