#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.useraccounts.service import UseraccountsServices
from thrift_gen.gen.useraccounts.service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Response getUserById(i64 userId)')
    print('  Response getUsers(CommonQuery query)')
    print('  Response updateUser(User user)')
    print('  Response getismobileregisted(string mobile)')
    print('  Response postuserlogin(Userloginreq userloginreq)')
    print('  Response postuserlogout(i32 userid)')
    print('  Response postsendsignupcode(string mobile)')
    print('  Response postusermobilesignup(User user, string code)')
    print('  Response postuserwxbindmobile(i32 appid, string unionid, string code, string mobile)')
    print('  Response postuserbindmobile(i32 appid, string unionid, string code, string mobile, BindType bindType)')
    print('  Response postuserchangepassword(i32 user_id, string old_password, string password)')
    print('  Response postusersendpasswordforgotcode(string mobile)')
    print('  Response postvalidatepasswordforgotcode(string mobile, string code)')
    print('  Response validateVerifyCode(string mobile, string code, i32 type)')
    print('  Response sendVerifyCode(string mobile, i32 type)')
    print('  Response checkEmail(string email)')
    print('  Response postuserresetpassword(string mobile, string code, string password)')
    print('  Response postusermergebymobile(i32 appid, string mobile)')
    print('  Response postsendchangemobilecode(string oldmobile)')
    print('  Response postvalidatechangemobilecode(string oldmobile, string code)')
    print('  Response postsendresetmobilecode(string newmobile)')
    print('  Response postresetmobile(i32 user_id, string newmobile, string code)')
    print('  Response getUserFavPositionCountByUserIdAndPositionId(i32 userId, i32 positionId)')
    print('  Response postUserFavoritePosition(UserFavoritePosition userFavoritePosition)')
    print('  Response cerateQrcode(i32 wechatId, i64 sceneId, i32 expireSeconds, i32 action_name)')
    print('  Response getQrcode(string ticket)')
    print('  Response getScanResult(i32 wechatId, i64 sceneId)')
    print('  Response setScanResult(i32 wechatId, i64 sceneId, string value)')
    print('  UserUserDO ifExistUser(string mobile)')
    print('  i32 createRetrieveProfileUser(UserUserDO user)')
    print('  bool ifExistProfile(string mobile)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UseraccountsServices.Client(protocol)
transport.open()

if cmd == 'getUserById':
    if len(args) != 1:
        print('getUserById requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserById(eval(args[0]),))

elif cmd == 'getUsers':
    if len(args) != 1:
        print('getUsers requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUsers(eval(args[0]),))

elif cmd == 'updateUser':
    if len(args) != 1:
        print('updateUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateUser(eval(args[0]),))

elif cmd == 'getismobileregisted':
    if len(args) != 1:
        print('getismobileregisted requires 1 args')
        sys.exit(1)
    pp.pprint(client.getismobileregisted(args[0],))

elif cmd == 'postuserlogin':
    if len(args) != 1:
        print('postuserlogin requires 1 args')
        sys.exit(1)
    pp.pprint(client.postuserlogin(eval(args[0]),))

elif cmd == 'postuserlogout':
    if len(args) != 1:
        print('postuserlogout requires 1 args')
        sys.exit(1)
    pp.pprint(client.postuserlogout(eval(args[0]),))

elif cmd == 'postsendsignupcode':
    if len(args) != 1:
        print('postsendsignupcode requires 1 args')
        sys.exit(1)
    pp.pprint(client.postsendsignupcode(args[0],))

elif cmd == 'postusermobilesignup':
    if len(args) != 2:
        print('postusermobilesignup requires 2 args')
        sys.exit(1)
    pp.pprint(client.postusermobilesignup(eval(args[0]), args[1],))

elif cmd == 'postuserwxbindmobile':
    if len(args) != 4:
        print('postuserwxbindmobile requires 4 args')
        sys.exit(1)
    pp.pprint(client.postuserwxbindmobile(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'postuserbindmobile':
    if len(args) != 5:
        print('postuserbindmobile requires 5 args')
        sys.exit(1)
    pp.pprint(client.postuserbindmobile(eval(args[0]), args[1], args[2], args[3], eval(args[4]),))

elif cmd == 'postuserchangepassword':
    if len(args) != 3:
        print('postuserchangepassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.postuserchangepassword(eval(args[0]), args[1], args[2],))

elif cmd == 'postusersendpasswordforgotcode':
    if len(args) != 1:
        print('postusersendpasswordforgotcode requires 1 args')
        sys.exit(1)
    pp.pprint(client.postusersendpasswordforgotcode(args[0],))

elif cmd == 'postvalidatepasswordforgotcode':
    if len(args) != 2:
        print('postvalidatepasswordforgotcode requires 2 args')
        sys.exit(1)
    pp.pprint(client.postvalidatepasswordforgotcode(args[0], args[1],))

elif cmd == 'validateVerifyCode':
    if len(args) != 3:
        print('validateVerifyCode requires 3 args')
        sys.exit(1)
    pp.pprint(client.validateVerifyCode(args[0], args[1], eval(args[2]),))

elif cmd == 'sendVerifyCode':
    if len(args) != 2:
        print('sendVerifyCode requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendVerifyCode(args[0], eval(args[1]),))

elif cmd == 'checkEmail':
    if len(args) != 1:
        print('checkEmail requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkEmail(args[0],))

elif cmd == 'postuserresetpassword':
    if len(args) != 3:
        print('postuserresetpassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.postuserresetpassword(args[0], args[1], args[2],))

elif cmd == 'postusermergebymobile':
    if len(args) != 2:
        print('postusermergebymobile requires 2 args')
        sys.exit(1)
    pp.pprint(client.postusermergebymobile(eval(args[0]), args[1],))

elif cmd == 'postsendchangemobilecode':
    if len(args) != 1:
        print('postsendchangemobilecode requires 1 args')
        sys.exit(1)
    pp.pprint(client.postsendchangemobilecode(args[0],))

elif cmd == 'postvalidatechangemobilecode':
    if len(args) != 2:
        print('postvalidatechangemobilecode requires 2 args')
        sys.exit(1)
    pp.pprint(client.postvalidatechangemobilecode(args[0], args[1],))

elif cmd == 'postsendresetmobilecode':
    if len(args) != 1:
        print('postsendresetmobilecode requires 1 args')
        sys.exit(1)
    pp.pprint(client.postsendresetmobilecode(args[0],))

elif cmd == 'postresetmobile':
    if len(args) != 3:
        print('postresetmobile requires 3 args')
        sys.exit(1)
    pp.pprint(client.postresetmobile(eval(args[0]), args[1], args[2],))

elif cmd == 'getUserFavPositionCountByUserIdAndPositionId':
    if len(args) != 2:
        print('getUserFavPositionCountByUserIdAndPositionId requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserFavPositionCountByUserIdAndPositionId(eval(args[0]), eval(args[1]),))

elif cmd == 'postUserFavoritePosition':
    if len(args) != 1:
        print('postUserFavoritePosition requires 1 args')
        sys.exit(1)
    pp.pprint(client.postUserFavoritePosition(eval(args[0]),))

elif cmd == 'cerateQrcode':
    if len(args) != 4:
        print('cerateQrcode requires 4 args')
        sys.exit(1)
    pp.pprint(client.cerateQrcode(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getQrcode':
    if len(args) != 1:
        print('getQrcode requires 1 args')
        sys.exit(1)
    pp.pprint(client.getQrcode(args[0],))

elif cmd == 'getScanResult':
    if len(args) != 2:
        print('getScanResult requires 2 args')
        sys.exit(1)
    pp.pprint(client.getScanResult(eval(args[0]), eval(args[1]),))

elif cmd == 'setScanResult':
    if len(args) != 3:
        print('setScanResult requires 3 args')
        sys.exit(1)
    pp.pprint(client.setScanResult(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'ifExistUser':
    if len(args) != 1:
        print('ifExistUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.ifExistUser(args[0],))

elif cmd == 'createRetrieveProfileUser':
    if len(args) != 1:
        print('createRetrieveProfileUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.createRetrieveProfileUser(eval(args[0]),))

elif cmd == 'ifExistProfile':
    if len(args) != 1:
        print('ifExistProfile requires 1 args')
        sys.exit(1)
    pp.pprint(client.ifExistProfile(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
