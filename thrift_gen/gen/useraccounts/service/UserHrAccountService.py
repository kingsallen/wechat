#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    """
    HR账户服务

    """
    def sendMobileVerifiyCode(self, mobile, code, source):
        """
        Parameters:
         - mobile
         - code
         - source
        """
        pass

    def postResource(self, downloadReport):
        """
        Parameters:
         - downloadReport
        """
        pass

    def putResource(self, userHrAccount):
        """
        Parameters:
         - userHrAccount
        """
        pass

    def bind(self, account):
        """
        Parameters:
         - account
        """
        pass

    def getSearchCondition(self, hrAccountId, type):
        """
        Parameters:
         - hrAccountId
         - type
        """
        pass

    def postSearchCondition(self, searchCondition):
        """
        Parameters:
         - searchCondition
        """
        pass

    def delSearchCondition(self, hrAccountId, id):
        """
        Parameters:
         - hrAccountId
         - id
        """
        pass

    def joinTalentpool(self, hrAccountId, applierIds):
        """
        Parameters:
         - hrAccountId
         - applierIds
        """
        pass

    def shiftOutTalentpool(self, hrAccountId, applierIds):
        """
        Parameters:
         - hrAccountId
         - applierIds
        """
        pass


class Client(Iface):
    """
    HR账户服务

    """
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def sendMobileVerifiyCode(self, mobile, code, source):
        """
        Parameters:
         - mobile
         - code
         - source
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_sendMobileVerifiyCode(mobile, code, source)
        return future

    def send_sendMobileVerifiyCode(self, mobile, code, source):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('sendMobileVerifiyCode', TMessageType.CALL, self._seqid)
        args = sendMobileVerifiyCode_args()
        args.mobile = mobile
        args.code = code
        args.source = source
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_sendMobileVerifiyCode(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMobileVerifiyCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sendMobileVerifiyCode failed: unknown result")

    def postResource(self, downloadReport):
        """
        Parameters:
         - downloadReport
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postResource(downloadReport)
        return future

    def send_postResource(self, downloadReport):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postResource', TMessageType.CALL, self._seqid)
        args = postResource_args()
        args.downloadReport = downloadReport
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postResource(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postResource failed: unknown result")

    def putResource(self, userHrAccount):
        """
        Parameters:
         - userHrAccount
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_putResource(userHrAccount)
        return future

    def send_putResource(self, userHrAccount):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('putResource', TMessageType.CALL, self._seqid)
        args = putResource_args()
        args.userHrAccount = userHrAccount
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_putResource(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = putResource_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "putResource failed: unknown result")

    def bind(self, account):
        """
        Parameters:
         - account
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_bind(account)
        return future

    def send_bind(self, account):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('bind', TMessageType.CALL, self._seqid)
        args = bind_args()
        args.account = account
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_bind(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = bind_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "bind failed: unknown result")

    def getSearchCondition(self, hrAccountId, type):
        """
        Parameters:
         - hrAccountId
         - type
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getSearchCondition(hrAccountId, type)
        return future

    def send_getSearchCondition(self, hrAccountId, type):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getSearchCondition', TMessageType.CALL, self._seqid)
        args = getSearchCondition_args()
        args.hrAccountId = hrAccountId
        args.type = type
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getSearchCondition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSearchCondition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSearchCondition failed: unknown result")

    def postSearchCondition(self, searchCondition):
        """
        Parameters:
         - searchCondition
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_postSearchCondition(searchCondition)
        return future

    def send_postSearchCondition(self, searchCondition):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('postSearchCondition', TMessageType.CALL, self._seqid)
        args = postSearchCondition_args()
        args.searchCondition = searchCondition
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_postSearchCondition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = postSearchCondition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "postSearchCondition failed: unknown result")

    def delSearchCondition(self, hrAccountId, id):
        """
        Parameters:
         - hrAccountId
         - id
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_delSearchCondition(hrAccountId, id)
        return future

    def send_delSearchCondition(self, hrAccountId, id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('delSearchCondition', TMessageType.CALL, self._seqid)
        args = delSearchCondition_args()
        args.hrAccountId = hrAccountId
        args.id = id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_delSearchCondition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delSearchCondition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delSearchCondition failed: unknown result")

    def joinTalentpool(self, hrAccountId, applierIds):
        """
        Parameters:
         - hrAccountId
         - applierIds
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_joinTalentpool(hrAccountId, applierIds)
        return future

    def send_joinTalentpool(self, hrAccountId, applierIds):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('joinTalentpool', TMessageType.CALL, self._seqid)
        args = joinTalentpool_args()
        args.hrAccountId = hrAccountId
        args.applierIds = applierIds
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_joinTalentpool(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = joinTalentpool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "joinTalentpool failed: unknown result")

    def shiftOutTalentpool(self, hrAccountId, applierIds):
        """
        Parameters:
         - hrAccountId
         - applierIds
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_shiftOutTalentpool(hrAccountId, applierIds)
        return future

    def send_shiftOutTalentpool(self, hrAccountId, applierIds):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('shiftOutTalentpool', TMessageType.CALL, self._seqid)
        args = shiftOutTalentpool_args()
        args.hrAccountId = hrAccountId
        args.applierIds = applierIds
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_shiftOutTalentpool(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = shiftOutTalentpool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "shiftOutTalentpool failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["sendMobileVerifiyCode"] = Processor.process_sendMobileVerifiyCode
        self._processMap["postResource"] = Processor.process_postResource
        self._processMap["putResource"] = Processor.process_putResource
        self._processMap["bind"] = Processor.process_bind
        self._processMap["getSearchCondition"] = Processor.process_getSearchCondition
        self._processMap["postSearchCondition"] = Processor.process_postSearchCondition
        self._processMap["delSearchCondition"] = Processor.process_delSearchCondition
        self._processMap["joinTalentpool"] = Processor.process_joinTalentpool
        self._processMap["shiftOutTalentpool"] = Processor.process_shiftOutTalentpool

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_sendMobileVerifiyCode(self, seqid, iprot, oprot):
        args = sendMobileVerifiyCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendMobileVerifiyCode_result()
        result.success = yield gen.maybe_future(self._handler.sendMobileVerifiyCode(args.mobile, args.code, args.source))
        oprot.writeMessageBegin("sendMobileVerifiyCode", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postResource(self, seqid, iprot, oprot):
        args = postResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postResource_result()
        result.success = yield gen.maybe_future(self._handler.postResource(args.downloadReport))
        oprot.writeMessageBegin("postResource", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_putResource(self, seqid, iprot, oprot):
        args = putResource_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = putResource_result()
        result.success = yield gen.maybe_future(self._handler.putResource(args.userHrAccount))
        oprot.writeMessageBegin("putResource", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_bind(self, seqid, iprot, oprot):
        args = bind_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = bind_result()
        result.success = yield gen.maybe_future(self._handler.bind(args.account))
        oprot.writeMessageBegin("bind", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getSearchCondition(self, seqid, iprot, oprot):
        args = getSearchCondition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSearchCondition_result()
        result.success = yield gen.maybe_future(self._handler.getSearchCondition(args.hrAccountId, args.type))
        oprot.writeMessageBegin("getSearchCondition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_postSearchCondition(self, seqid, iprot, oprot):
        args = postSearchCondition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = postSearchCondition_result()
        result.success = yield gen.maybe_future(self._handler.postSearchCondition(args.searchCondition))
        oprot.writeMessageBegin("postSearchCondition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_delSearchCondition(self, seqid, iprot, oprot):
        args = delSearchCondition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delSearchCondition_result()
        result.success = yield gen.maybe_future(self._handler.delSearchCondition(args.hrAccountId, args.id))
        oprot.writeMessageBegin("delSearchCondition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_joinTalentpool(self, seqid, iprot, oprot):
        args = joinTalentpool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = joinTalentpool_result()
        result.success = yield gen.maybe_future(self._handler.joinTalentpool(args.hrAccountId, args.applierIds))
        oprot.writeMessageBegin("joinTalentpool", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_shiftOutTalentpool(self, seqid, iprot, oprot):
        args = shiftOutTalentpool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = shiftOutTalentpool_result()
        result.success = yield gen.maybe_future(self._handler.shiftOutTalentpool(args.hrAccountId, args.applierIds))
        oprot.writeMessageBegin("shiftOutTalentpool", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sendMobileVerifiyCode_args(object):
    """
    Attributes:
     - mobile
     - code
     - source
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'mobile', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
        (3, TType.I32, 'source', None, None, ),  # 3
    )

    def __init__(self, mobile=None, code=None, source=None,):
        self.mobile = mobile
        self.code = code
        self.source = source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMobileVerifiyCode_args')
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 1)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I32, 3)
            oprot.writeI32(self.source)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendMobileVerifiyCode_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMobileVerifiyCode_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postResource_args(object):
    """
    Attributes:
     - downloadReport
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'downloadReport', (thrift_gen.gen.useraccounts.struct.ttypes.DownloadReport, thrift_gen.gen.useraccounts.struct.ttypes.DownloadReport.thrift_spec), None, ),  # 1
    )

    def __init__(self, downloadReport=None,):
        self.downloadReport = downloadReport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.downloadReport = thrift_gen.gen.useraccounts.struct.ttypes.DownloadReport()
                    self.downloadReport.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postResource_args')
        if self.downloadReport is not None:
            oprot.writeFieldBegin('downloadReport', TType.STRUCT, 1)
            self.downloadReport.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postResource_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class putResource_args(object):
    """
    Attributes:
     - userHrAccount
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'userHrAccount', (thrift_gen.gen.useraccounts.struct.ttypes.UserHrAccount, thrift_gen.gen.useraccounts.struct.ttypes.UserHrAccount.thrift_spec), None, ),  # 1
    )

    def __init__(self, userHrAccount=None,):
        self.userHrAccount = userHrAccount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userHrAccount = thrift_gen.gen.useraccounts.struct.ttypes.UserHrAccount()
                    self.userHrAccount.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('putResource_args')
        if self.userHrAccount is not None:
            oprot.writeFieldBegin('userHrAccount', TType.STRUCT, 1)
            self.userHrAccount.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class putResource_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('putResource_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bind_args(object):
    """
    Attributes:
     - account
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'account', (thrift_gen.gen.useraccounts.struct.ttypes.BindAccountStruct, thrift_gen.gen.useraccounts.struct.ttypes.BindAccountStruct.thrift_spec), None, ),  # 1
    )

    def __init__(self, account=None,):
        self.account = account

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.account = thrift_gen.gen.useraccounts.struct.ttypes.BindAccountStruct()
                    self.account.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bind_args')
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRUCT, 1)
            self.account.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bind_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bind_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getSearchCondition_args(object):
    """
    Attributes:
     - hrAccountId
     - type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrAccountId', None, None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
    )

    def __init__(self, hrAccountId=None, type=None,):
        self.hrAccountId = hrAccountId
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrAccountId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getSearchCondition_args')
        if self.hrAccountId is not None:
            oprot.writeFieldBegin('hrAccountId', TType.I32, 1)
            oprot.writeI32(self.hrAccountId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getSearchCondition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getSearchCondition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postSearchCondition_args(object):
    """
    Attributes:
     - searchCondition
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'searchCondition', (thrift_gen.gen.useraccounts.struct.ttypes.SearchCondition, thrift_gen.gen.useraccounts.struct.ttypes.SearchCondition.thrift_spec), None, ),  # 1
    )

    def __init__(self, searchCondition=None,):
        self.searchCondition = searchCondition

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.searchCondition = thrift_gen.gen.useraccounts.struct.ttypes.SearchCondition()
                    self.searchCondition.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postSearchCondition_args')
        if self.searchCondition is not None:
            oprot.writeFieldBegin('searchCondition', TType.STRUCT, 1)
            self.searchCondition.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class postSearchCondition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('postSearchCondition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delSearchCondition_args(object):
    """
    Attributes:
     - hrAccountId
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrAccountId', None, None, ),  # 1
        (2, TType.I32, 'id', None, None, ),  # 2
    )

    def __init__(self, hrAccountId=None, id=None,):
        self.hrAccountId = hrAccountId
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrAccountId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delSearchCondition_args')
        if self.hrAccountId is not None:
            oprot.writeFieldBegin('hrAccountId', TType.I32, 1)
            oprot.writeI32(self.hrAccountId)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class delSearchCondition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('delSearchCondition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class joinTalentpool_args(object):
    """
    Attributes:
     - hrAccountId
     - applierIds
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrAccountId', None, None, ),  # 1
        (2, TType.LIST, 'applierIds', (TType.I32, None, False), None, ),  # 2
    )

    def __init__(self, hrAccountId=None, applierIds=None,):
        self.hrAccountId = hrAccountId
        self.applierIds = applierIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrAccountId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.applierIds = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.applierIds.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('joinTalentpool_args')
        if self.hrAccountId is not None:
            oprot.writeFieldBegin('hrAccountId', TType.I32, 1)
            oprot.writeI32(self.hrAccountId)
            oprot.writeFieldEnd()
        if self.applierIds is not None:
            oprot.writeFieldBegin('applierIds', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.applierIds))
            for iter6 in self.applierIds:
                oprot.writeI32(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class joinTalentpool_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('joinTalentpool_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class shiftOutTalentpool_args(object):
    """
    Attributes:
     - hrAccountId
     - applierIds
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrAccountId', None, None, ),  # 1
        (2, TType.LIST, 'applierIds', (TType.I32, None, False), None, ),  # 2
    )

    def __init__(self, hrAccountId=None, applierIds=None,):
        self.hrAccountId = hrAccountId
        self.applierIds = applierIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrAccountId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.applierIds = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.applierIds.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('shiftOutTalentpool_args')
        if self.hrAccountId is not None:
            oprot.writeFieldBegin('hrAccountId', TType.I32, 1)
            oprot.writeI32(self.hrAccountId)
            oprot.writeFieldEnd()
        if self.applierIds is not None:
            oprot.writeFieldBegin('applierIds', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.applierIds))
            for iter13 in self.applierIds:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class shiftOutTalentpool_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('shiftOutTalentpool_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
