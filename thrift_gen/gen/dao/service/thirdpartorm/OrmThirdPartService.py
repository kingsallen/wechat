#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def addThirdPartAccount(self, account):
        """
        Parameters:
         - account
        """
        pass

    def updateThirdPartAccount(self, account):
        """
        Parameters:
         - account
        """
        pass

    def addThirdPartPosition(self, position):
        """
        Parameters:
         - position
        """
        pass

    def updateThirdPartPosition(self, position):
        """
        Parameters:
         - position
        """
        pass

    def addThirdPartPositions(self, positions):
        """
        Parameters:
         - positions
        """
        pass

    def updateThirdPartPositions(self, positions):
        """
        Parameters:
         - positions
        """
        pass

    def getSingleThirdPartAccount(self, companyId):
        """
        Parameters:
         - companyId
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def addThirdPartAccount(self, account):
        """
        Parameters:
         - account
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_addThirdPartAccount(account)
        return future

    def send_addThirdPartAccount(self, account):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('addThirdPartAccount', TMessageType.CALL, self._seqid)
        args = addThirdPartAccount_args()
        args.account = account
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_addThirdPartAccount(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addThirdPartAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addThirdPartAccount failed: unknown result")

    def updateThirdPartAccount(self, account):
        """
        Parameters:
         - account
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_updateThirdPartAccount(account)
        return future

    def send_updateThirdPartAccount(self, account):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updateThirdPartAccount', TMessageType.CALL, self._seqid)
        args = updateThirdPartAccount_args()
        args.account = account
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updateThirdPartAccount(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateThirdPartAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateThirdPartAccount failed: unknown result")

    def addThirdPartPosition(self, position):
        """
        Parameters:
         - position
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_addThirdPartPosition(position)
        return future

    def send_addThirdPartPosition(self, position):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('addThirdPartPosition', TMessageType.CALL, self._seqid)
        args = addThirdPartPosition_args()
        args.position = position
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_addThirdPartPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addThirdPartPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addThirdPartPosition failed: unknown result")

    def updateThirdPartPosition(self, position):
        """
        Parameters:
         - position
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_updateThirdPartPosition(position)
        return future

    def send_updateThirdPartPosition(self, position):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updateThirdPartPosition', TMessageType.CALL, self._seqid)
        args = updateThirdPartPosition_args()
        args.position = position
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updateThirdPartPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateThirdPartPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateThirdPartPosition failed: unknown result")

    def addThirdPartPositions(self, positions):
        """
        Parameters:
         - positions
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_addThirdPartPositions(positions)
        return future

    def send_addThirdPartPositions(self, positions):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('addThirdPartPositions', TMessageType.CALL, self._seqid)
        args = addThirdPartPositions_args()
        args.positions = positions
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_addThirdPartPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addThirdPartPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addThirdPartPositions failed: unknown result")

    def updateThirdPartPositions(self, positions):
        """
        Parameters:
         - positions
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_updateThirdPartPositions(positions)
        return future

    def send_updateThirdPartPositions(self, positions):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('updateThirdPartPositions', TMessageType.CALL, self._seqid)
        args = updateThirdPartPositions_args()
        args.positions = positions
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_updateThirdPartPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateThirdPartPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateThirdPartPositions failed: unknown result")

    def getSingleThirdPartAccount(self, companyId):
        """
        Parameters:
         - companyId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getSingleThirdPartAccount(companyId)
        return future

    def send_getSingleThirdPartAccount(self, companyId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getSingleThirdPartAccount', TMessageType.CALL, self._seqid)
        args = getSingleThirdPartAccount_args()
        args.companyId = companyId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getSingleThirdPartAccount(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getSingleThirdPartAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getSingleThirdPartAccount failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["addThirdPartAccount"] = Processor.process_addThirdPartAccount
        self._processMap["updateThirdPartAccount"] = Processor.process_updateThirdPartAccount
        self._processMap["addThirdPartPosition"] = Processor.process_addThirdPartPosition
        self._processMap["updateThirdPartPosition"] = Processor.process_updateThirdPartPosition
        self._processMap["addThirdPartPositions"] = Processor.process_addThirdPartPositions
        self._processMap["updateThirdPartPositions"] = Processor.process_updateThirdPartPositions
        self._processMap["getSingleThirdPartAccount"] = Processor.process_getSingleThirdPartAccount

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_addThirdPartAccount(self, seqid, iprot, oprot):
        args = addThirdPartAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addThirdPartAccount_result()
        result.success = yield gen.maybe_future(self._handler.addThirdPartAccount(args.account))
        oprot.writeMessageBegin("addThirdPartAccount", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_updateThirdPartAccount(self, seqid, iprot, oprot):
        args = updateThirdPartAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateThirdPartAccount_result()
        result.success = yield gen.maybe_future(self._handler.updateThirdPartAccount(args.account))
        oprot.writeMessageBegin("updateThirdPartAccount", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_addThirdPartPosition(self, seqid, iprot, oprot):
        args = addThirdPartPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addThirdPartPosition_result()
        result.success = yield gen.maybe_future(self._handler.addThirdPartPosition(args.position))
        oprot.writeMessageBegin("addThirdPartPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_updateThirdPartPosition(self, seqid, iprot, oprot):
        args = updateThirdPartPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateThirdPartPosition_result()
        result.success = yield gen.maybe_future(self._handler.updateThirdPartPosition(args.position))
        oprot.writeMessageBegin("updateThirdPartPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_addThirdPartPositions(self, seqid, iprot, oprot):
        args = addThirdPartPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addThirdPartPositions_result()
        result.success = yield gen.maybe_future(self._handler.addThirdPartPositions(args.positions))
        oprot.writeMessageBegin("addThirdPartPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_updateThirdPartPositions(self, seqid, iprot, oprot):
        args = updateThirdPartPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateThirdPartPositions_result()
        result.success = yield gen.maybe_future(self._handler.updateThirdPartPositions(args.positions))
        oprot.writeMessageBegin("updateThirdPartPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getSingleThirdPartAccount(self, seqid, iprot, oprot):
        args = getSingleThirdPartAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getSingleThirdPartAccount_result()
        result.success = yield gen.maybe_future(self._handler.getSingleThirdPartAccount(args.companyId))
        oprot.writeMessageBegin("getSingleThirdPartAccount", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class addThirdPartAccount_args(object):
    """
    Attributes:
     - account
