#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.dao.service.dao import WordpressDao
from thrift_gen.gen.dao.service.dao.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  WordpressPosts getPost(CommonQuery query)')
    print('  WordpressPosts getReleaseVersionPost()')
    print('  WordpressTermRelationships getRelationships(i64 objectId, i64 termTaxonomyId)')
    print('  WordpressTermRelationships getLastRelationships(i64 termTaxonomyId)')
    print('  PostExt getPostExt(i64 objectId)')
    print('  i64 getReadedPostId(i32 userId)')
    print('  Response upsertUserPost(i32 userId, i64 postId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = WordpressDao.Client(protocol)
transport.open()

if cmd == 'getPost':
    if len(args) != 1:
        print('getPost requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPost(eval(args[0]),))

elif cmd == 'getReleaseVersionPost':
    if len(args) != 0:
        print('getReleaseVersionPost requires 0 args')
        sys.exit(1)
    pp.pprint(client.getReleaseVersionPost())

elif cmd == 'getRelationships':
    if len(args) != 2:
        print('getRelationships requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRelationships(eval(args[0]), eval(args[1]),))

elif cmd == 'getLastRelationships':
    if len(args) != 1:
        print('getLastRelationships requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLastRelationships(eval(args[0]),))

elif cmd == 'getPostExt':
    if len(args) != 1:
        print('getPostExt requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPostExt(eval(args[0]),))

elif cmd == 'getReadedPostId':
    if len(args) != 1:
        print('getReadedPostId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getReadedPostId(eval(args[0]),))

elif cmd == 'upsertUserPost':
    if len(args) != 2:
        print('upsertUserPost requires 2 args')
        sys.exit(1)
    pp.pprint(client.upsertUserPost(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
