#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ConditionType(object):
    AndType = 0
    OrType = 1
    MoreThanType = 2
    LessThanType = 3
    BetweenType = 4

    _VALUES_TO_NAMES = {
        0: "AndType",
        1: "OrType",
        2: "MoreThanType",
        3: "LessThanType",
        4: "BetweenType",
    }

    _NAMES_TO_VALUES = {
        "AndType": 0,
        "OrType": 1,
        "MoreThanType": 2,
        "LessThanType": 3,
        "BetweenType": 4,
    }


class Condition(object):
    """
    Attributes:
     - conditionType
     - condition
     - params
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'conditionType', None, None, ),  # 1
        (2, TType.STRUCT, 'condition', (Condition, Condition.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'params', (TType.STRING, 'UTF8', False), None, ),  # 3
    )

    def __init__(self, conditionType=None, condition=None, params=None,):
        self.conditionType = conditionType
        self.condition = condition
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.conditionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.condition = Condition()
                    self.condition.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Condition')
        if self.conditionType is not None:
            oprot.writeFieldBegin('conditionType', TType.I32, 1)
            oprot.writeI32(self.conditionType)
            oprot.writeFieldEnd()
        if self.condition is not None:
            oprot.writeFieldBegin('condition', TType.STRUCT, 2)
            self.condition.write(oprot)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.params))
            for iter6 in self.params:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WordpressPosts(object):
    """
    Attributes:
     - id
     - postAuthor
     - postDate
     - postContent
     - postTitle
     - postExcerpt
     - postStatus
     - postModified
     - version
     - plateform
     - postName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, None, ),  # 1
        (2, TType.I64, 'postAuthor', None, None, ),  # 2
        (3, TType.STRING, 'postDate', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'postContent', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'postTitle', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'postExcerpt', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'postStatus', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'postModified', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'version', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'plateform', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'postName', 'UTF8', None, ),  # 11
    )

    def __init__(self, id=None, postAuthor=None, postDate=None, postContent=None, postTitle=None, postExcerpt=None, postStatus=None, postModified=None, version=None, plateform=None, postName=None,):
        self.id = id
        self.postAuthor = postAuthor
        self.postDate = postDate
        self.postContent = postContent
        self.postTitle = postTitle
        self.postExcerpt = postExcerpt
        self.postStatus = postStatus
        self.postModified = postModified
        self.version = version
        self.plateform = plateform
        self.postName = postName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.postAuthor = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.postDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.postContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.postTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.postExcerpt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.postStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.postModified = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.plateform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.postName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WordpressPosts')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.postAuthor is not None:
            oprot.writeFieldBegin('postAuthor', TType.I64, 2)
            oprot.writeI64(self.postAuthor)
            oprot.writeFieldEnd()
        if self.postDate is not None:
            oprot.writeFieldBegin('postDate', TType.STRING, 3)
            oprot.writeString(self.postDate.encode('utf-8') if sys.version_info[0] == 2 else self.postDate)
            oprot.writeFieldEnd()
        if self.postContent is not None:
            oprot.writeFieldBegin('postContent', TType.STRING, 4)
            oprot.writeString(self.postContent.encode('utf-8') if sys.version_info[0] == 2 else self.postContent)
            oprot.writeFieldEnd()
        if self.postTitle is not None:
            oprot.writeFieldBegin('postTitle', TType.STRING, 5)
            oprot.writeString(self.postTitle.encode('utf-8') if sys.version_info[0] == 2 else self.postTitle)
            oprot.writeFieldEnd()
        if self.postExcerpt is not None:
            oprot.writeFieldBegin('postExcerpt', TType.STRING, 6)
            oprot.writeString(self.postExcerpt.encode('utf-8') if sys.version_info[0] == 2 else self.postExcerpt)
            oprot.writeFieldEnd()
        if self.postStatus is not None:
            oprot.writeFieldBegin('postStatus', TType.STRING, 7)
            oprot.writeString(self.postStatus.encode('utf-8') if sys.version_info[0] == 2 else self.postStatus)
            oprot.writeFieldEnd()
        if self.postModified is not None:
            oprot.writeFieldBegin('postModified', TType.STRING, 8)
            oprot.writeString(self.postModified.encode('utf-8') if sys.version_info[0] == 2 else self.postModified)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 9)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.plateform is not None:
            oprot.writeFieldBegin('plateform', TType.STRING, 10)
            oprot.writeString(self.plateform.encode('utf-8') if sys.version_info[0] == 2 else self.plateform)
            oprot.writeFieldEnd()
        if self.postName is not None:
            oprot.writeFieldBegin('postName', TType.STRING, 11)
            oprot.writeString(self.postName.encode('utf-8') if sys.version_info[0] == 2 else self.postName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WordpressTermRelationships(object):
    """
    Attributes:
     - objectId
     - termTaxonomyId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'objectId', None, None, ),  # 1
        (2, TType.I64, 'termTaxonomyId', None, None, ),  # 2
    )

    def __init__(self, objectId=None, termTaxonomyId=None,):
        self.objectId = objectId
        self.termTaxonomyId = termTaxonomyId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.termTaxonomyId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WordpressTermRelationships')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.termTaxonomyId is not None:
            oprot.writeFieldBegin('termTaxonomyId', TType.I64, 2)
            oprot.writeI64(self.termTaxonomyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PostExt(object):
    """
    Attributes:
     - objectId
     - version
     - platform
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'objectId', None, None, ),  # 1
        (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'platform', 'UTF8', None, ),  # 3
    )

    def __init__(self, objectId=None, version=None, platform=None,):
        self.objectId = objectId
        self.version = version
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.objectId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.platform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PostExt')
        if self.objectId is not None:
            oprot.writeFieldBegin('objectId', TType.I64, 1)
            oprot.writeI64(self.objectId)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.STRING, 3)
            oprot.writeString(self.platform.encode('utf-8') if sys.version_info[0] == 2 else self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThirdPartAccountData(object):
    """
    Attributes:
     - id
     - name
     - channel
     - username
     - password
     - membername
     - binding
     - company_id
     - remain_num
     - sync_time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
        (3, TType.I32, 'channel', None, None, ),  # 3
        (4, TType.STRING, 'username', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'password', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'membername', 'UTF8', None, ),  # 6
        (7, TType.I32, 'binding', None, None, ),  # 7
        (8, TType.I32, 'company_id', None, None, ),  # 8
        (9, TType.I32, 'remain_num', None, None, ),  # 9
        (10, TType.STRING, 'sync_time', 'UTF8', None, ),  # 10
    )

    def __init__(self, id=None, name=None, channel=None, username=None, password=None, membername=None, binding=None, company_id=None, remain_num=None, sync_time=None,):
        self.id = id
        self.name = name
        self.channel = channel
        self.username = username
        self.password = password
        self.membername = membername
        self.binding = binding
        self.company_id = company_id
        self.remain_num = remain_num
        self.sync_time = sync_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.membername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.binding = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.remain_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.sync_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartAccountData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 3)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 4)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 5)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.membername is not None:
            oprot.writeFieldBegin('membername', TType.STRING, 6)
            oprot.writeString(self.membername.encode('utf-8') if sys.version_info[0] == 2 else self.membername)
            oprot.writeFieldEnd()
        if self.binding is not None:
            oprot.writeFieldBegin('binding', TType.I32, 7)
            oprot.writeI32(self.binding)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 8)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.remain_num is not None:
            oprot.writeFieldBegin('remain_num', TType.I32, 9)
            oprot.writeI32(self.remain_num)
            oprot.writeFieldEnd()
        if self.sync_time is not None:
            oprot.writeFieldBegin('sync_time', TType.STRING, 10)
            oprot.writeString(self.sync_time.encode('utf-8') if sys.version_info[0] == 2 else self.sync_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThirdPartyPositionData(object):
    """
    Attributes:
     - id
     - position_id
     - third_part_position_id
     - channel
     - is_synchronization
     - is_refresh
     - sync_time
     - refresh_time
     - update_time
     - occupation
     - address
     - sync_fail_reason
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'position_id', None, None, ),  # 2
        (3, TType.STRING, 'third_part_position_id', 'UTF8', None, ),  # 3
        (4, TType.BYTE, 'channel', None, None, ),  # 4
        (5, TType.BYTE, 'is_synchronization', None, None, ),  # 5
        (6, TType.BYTE, 'is_refresh', None, None, ),  # 6
        (7, TType.STRING, 'sync_time', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'refresh_time', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'update_time', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'occupation', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'address', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'sync_fail_reason', 'UTF8', None, ),  # 12
    )

    def __init__(self, id=None, position_id=None, third_part_position_id=None, channel=None, is_synchronization=None, is_refresh=None, sync_time=None, refresh_time=None, update_time=None, occupation=None, address=None, sync_fail_reason=None,):
        self.id = id
        self.position_id = position_id
        self.third_part_position_id = third_part_position_id
        self.channel = channel
        self.is_synchronization = is_synchronization
        self.is_refresh = is_refresh
        self.sync_time = sync_time
        self.refresh_time = refresh_time
        self.update_time = update_time
        self.occupation = occupation
        self.address = address
        self.sync_fail_reason = sync_fail_reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.third_part_position_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.channel = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.is_synchronization = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.is_refresh = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sync_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.refresh_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.occupation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.sync_fail_reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartyPositionData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 2)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.third_part_position_id is not None:
            oprot.writeFieldBegin('third_part_position_id', TType.STRING, 3)
            oprot.writeString(self.third_part_position_id.encode('utf-8') if sys.version_info[0] == 2 else self.third_part_position_id)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.BYTE, 4)
            oprot.writeByte(self.channel)
            oprot.writeFieldEnd()
        if self.is_synchronization is not None:
            oprot.writeFieldBegin('is_synchronization', TType.BYTE, 5)
            oprot.writeByte(self.is_synchronization)
            oprot.writeFieldEnd()
        if self.is_refresh is not None:
            oprot.writeFieldBegin('is_refresh', TType.BYTE, 6)
            oprot.writeByte(self.is_refresh)
            oprot.writeFieldEnd()
        if self.sync_time is not None:
            oprot.writeFieldBegin('sync_time', TType.STRING, 7)
            oprot.writeString(self.sync_time.encode('utf-8') if sys.version_info[0] == 2 else self.sync_time)
            oprot.writeFieldEnd()
        if self.refresh_time is not None:
            oprot.writeFieldBegin('refresh_time', TType.STRING, 8)
            oprot.writeString(self.refresh_time.encode('utf-8') if sys.version_info[0] == 2 else self.refresh_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 9)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.occupation is not None:
            oprot.writeFieldBegin('occupation', TType.STRING, 10)
            oprot.writeString(self.occupation.encode('utf-8') if sys.version_info[0] == 2 else self.occupation)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 11)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.sync_fail_reason is not None:
            oprot.writeFieldBegin('sync_fail_reason', TType.STRING, 12)
            oprot.writeString(self.sync_fail_reason.encode('utf-8') if sys.version_info[0] == 2 else self.sync_fail_reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HRCompanyConfData(object):
    """
    Attributes:
     - company_id
     - theme_id
     - hb_throttle
     - app_reply
     - job_custom_title
     - job_occupation
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'company_id', None, None, ),  # 1
        (2, TType.I32, 'theme_id', None, None, ),  # 2
        (3, TType.I32, 'hb_throttle', None, None, ),  # 3
        (4, TType.STRING, 'app_reply', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'job_custom_title', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'job_occupation', 'UTF8', None, ),  # 6
    )

    def __init__(self, company_id=None, theme_id=None, hb_throttle=None, app_reply=None, job_custom_title=None, job_occupation=None,):
        self.company_id = company_id
        self.theme_id = theme_id
        self.hb_throttle = hb_throttle
        self.app_reply = app_reply
        self.job_custom_title = job_custom_title
        self.job_occupation = job_occupation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.theme_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.hb_throttle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.app_reply = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.job_custom_title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.job_occupation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRCompanyConfData')
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 1)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.theme_id is not None:
            oprot.writeFieldBegin('theme_id', TType.I32, 2)
            oprot.writeI32(self.theme_id)
            oprot.writeFieldEnd()
        if self.hb_throttle is not None:
            oprot.writeFieldBegin('hb_throttle', TType.I32, 3)
            oprot.writeI32(self.hb_throttle)
            oprot.writeFieldEnd()
        if self.app_reply is not None:
            oprot.writeFieldBegin('app_reply', TType.STRING, 4)
            oprot.writeString(self.app_reply.encode('utf-8') if sys.version_info[0] == 2 else self.app_reply)
            oprot.writeFieldEnd()
        if self.job_custom_title is not None:
            oprot.writeFieldBegin('job_custom_title', TType.STRING, 5)
            oprot.writeString(self.job_custom_title.encode('utf-8') if sys.version_info[0] == 2 else self.job_custom_title)
            oprot.writeFieldEnd()
        if self.job_occupation is not None:
            oprot.writeFieldBegin('job_occupation', TType.STRING, 6)
            oprot.writeString(self.job_occupation.encode('utf-8') if sys.version_info[0] == 2 else self.job_occupation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HistoryOperate(object):
    """
    Attributes:
     - id
     - app_id
     - operate_tpl_id
     - recruit_order
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I64, 'app_id', None, None, ),  # 2
        (3, TType.I32, 'operate_tpl_id', None, None, ),  # 3
        (4, TType.I32, 'recruit_order', None, None, ),  # 4
    )

    def __init__(self, id=None, app_id=None, operate_tpl_id=None, recruit_order=None,):
        self.id = id
        self.app_id = app_id
        self.operate_tpl_id = operate_tpl_id
        self.recruit_order = recruit_order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.app_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.operate_tpl_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.recruit_order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HistoryOperate')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.I64, 2)
            oprot.writeI64(self.app_id)
            oprot.writeFieldEnd()
        if self.operate_tpl_id is not None:
            oprot.writeFieldBegin('operate_tpl_id', TType.I32, 3)
            oprot.writeI32(self.operate_tpl_id)
            oprot.writeFieldEnd()
        if self.recruit_order is not None:
            oprot.writeFieldBegin('recruit_order', TType.I32, 4)
            oprot.writeI32(self.recruit_order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
