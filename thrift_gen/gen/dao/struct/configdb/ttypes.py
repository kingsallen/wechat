#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class AwardConfigTpl(object):
    """
    Attributes:
     - id
     - status
     - award
     - description
     - disable
     - priority
     - typeId
     - tag
     - is_init_award
     - recruitOrder
     - applierView
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'status', 'UTF8', None, ),  # 2
        (3, TType.I32, 'award', None, None, ),  # 3
        (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
        (5, TType.I32, 'disable', None, None, ),  # 5
        (6, TType.I32, 'priority', None, None, ),  # 6
        (7, TType.I32, 'typeId', None, None, ),  # 7
        (8, TType.I16, 'tag', None, None, ),  # 8
        (9, TType.I32, 'is_init_award', None, None, ),  # 9
        (10, TType.I32, 'recruitOrder', None, None, ),  # 10
        (11, TType.STRING, 'applierView', 'UTF8', None, ),  # 11
    )

    def __init__(self, id=None, status=None, award=None, description=None, disable=None, priority=None, typeId=None, tag=None, is_init_award=None, recruitOrder=None, applierView=None,):
        self.id = id
        self.status = status
        self.award = award
        self.description = description
        self.disable = disable
        self.priority = priority
        self.typeId = typeId
        self.tag = tag
        self.is_init_award = is_init_award
        self.recruitOrder = recruitOrder
        self.applierView = applierView

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.award = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.disable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.typeId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.tag = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.is_init_award = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.recruitOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.applierView = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AwardConfigTpl')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 2)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.award is not None:
            oprot.writeFieldBegin('award', TType.I32, 3)
            oprot.writeI32(self.award)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.I32, 5)
            oprot.writeI32(self.disable)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 6)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.typeId is not None:
            oprot.writeFieldBegin('typeId', TType.I32, 7)
            oprot.writeI32(self.typeId)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.I16, 8)
            oprot.writeI16(self.tag)
            oprot.writeFieldEnd()
        if self.is_init_award is not None:
            oprot.writeFieldBegin('is_init_award', TType.I32, 9)
            oprot.writeI32(self.is_init_award)
            oprot.writeFieldEnd()
        if self.recruitOrder is not None:
            oprot.writeFieldBegin('recruitOrder', TType.I32, 10)
            oprot.writeI32(self.recruitOrder)
            oprot.writeFieldEnd()
        if self.applierView is not None:
            oprot.writeFieldBegin('applierView', TType.STRING, 11)
            oprot.writeString(self.applierView.encode('utf-8') if sys.version_info[0] == 2 else self.applierView)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
