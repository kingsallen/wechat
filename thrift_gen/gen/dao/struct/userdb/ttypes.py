#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class UserFavPositionDO(object):
    """
    Attributes:
     - sysuserId
     - positionId
     - favorite
     - createTime
     - update_time
     - mobile
     - id
     - recomUserId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'sysuserId', None, None, ),  # 1
        (2, TType.I32, 'positionId', None, None, ),  # 2
        (3, TType.BYTE, 'favorite', None, None, ),  # 3
        (4, TType.STRING, 'createTime', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'update_time', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'mobile', 'UTF8', None, ),  # 6
        (7, TType.I32, 'id', None, None, ),  # 7
        (8, TType.I32, 'recomUserId', None, None, ),  # 8
    )

    def __init__(self, sysuserId=None, positionId=None, favorite=None, createTime=None, update_time=None, mobile=None, id=None, recomUserId=None,):
        self.sysuserId = sysuserId
        self.positionId = positionId
        self.favorite = favorite
        self.createTime = createTime
        self.update_time = update_time
        self.mobile = mobile
        self.id = id
        self.recomUserId = recomUserId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sysuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.favorite = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.recomUserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserFavPositionDO')
        if self.sysuserId is not None:
            oprot.writeFieldBegin('sysuserId', TType.I32, 1)
            oprot.writeI32(self.sysuserId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 2)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.favorite is not None:
            oprot.writeFieldBegin('favorite', TType.BYTE, 3)
            oprot.writeByte(self.favorite)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 4)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 5)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 6)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 7)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.recomUserId is not None:
            oprot.writeFieldBegin('recomUserId', TType.I32, 8)
            oprot.writeI32(self.recomUserId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserEmployeeDO(object):
    """
    Attributes:
     - id
     - employeeid
     - companyId
     - roleId
     - sex
     - ename
     - efname
     - cname
     - cfname
     - password
     - isAdmin
     - status
     - companybody
     - departmentname
     - groupname
     - position
     - employdate
     - managername
     - city
     - birthday
     - retiredate
     - education
     - address
     - idcard
     - mobile
     - award
     - bindingTime
     - email
     - activation
     - activation_code
     - disable
     - createTime
     - updateTime
     - authLevel
     - registerTime
     - registerIp
     - lastLoginTime
     - lastLoginIp
     - loginCount
     - source
     - downloaDOken
     - hrWxuserId
     - customField
     - isRpSent
     - sysuserId
     - positionId
     - sectionId
     - emailIsvalid
     - authMethod
     - customFieldValues
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'employeeid', 'UTF8', None, ),  # 2
        (3, TType.I32, 'companyId', None, None, ),  # 3
        (4, TType.I32, 'roleId', None, None, ),  # 4
        (5, TType.BYTE, 'sex', None, None, ),  # 5
        (6, TType.STRING, 'ename', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'efname', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'cname', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'cfname', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'password', 'UTF8', None, ),  # 10
        (11, TType.BOOL, 'isAdmin', None, None, ),  # 11
        (12, TType.I32, 'status', None, None, ),  # 12
        (13, TType.STRING, 'companybody', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'departmentname', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'groupname', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'position', 'UTF8', None, ),  # 16
        (17, TType.STRING, 'employdate', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'managername', 'UTF8', None, ),  # 18
        (19, TType.STRING, 'city', 'UTF8', None, ),  # 19
        (20, TType.STRING, 'birthday', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'retiredate', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'education', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'address', 'UTF8', None, ),  # 23
        (24, TType.STRING, 'idcard', 'UTF8', None, ),  # 24
        (25, TType.STRING, 'mobile', 'UTF8', None, ),  # 25
        (26, TType.I32, 'award', None, None, ),  # 26
        (27, TType.STRING, 'bindingTime', 'UTF8', None, ),  # 27
        (28, TType.STRING, 'email', 'UTF8', None, ),  # 28
        (29, TType.BYTE, 'activation', None, None, ),  # 29
        (30, TType.STRING, 'activation_code', 'UTF8', None, ),  # 30
        (31, TType.BYTE, 'disable', None, None, ),  # 31
        (32, TType.STRING, 'createTime', 'UTF8', None, ),  # 32
        (33, TType.STRING, 'updateTime', 'UTF8', None, ),  # 33
        (34, TType.BYTE, 'authLevel', None, None, ),  # 34
        (35, TType.STRING, 'registerTime', 'UTF8', None, ),  # 35
        (36, TType.STRING, 'registerIp', 'UTF8', None, ),  # 36
        (37, TType.STRING, 'lastLoginTime', 'UTF8', None, ),  # 37
        (38, TType.STRING, 'lastLoginIp', 'UTF8', None, ),  # 38
        (39, TType.I32, 'loginCount', None, None, ),  # 39
        (40, TType.BYTE, 'source', None, None, ),  # 40
        (41, TType.STRING, 'downloaDOken', 'UTF8', None, ),  # 41
        (42, TType.I32, 'hrWxuserId', None, None, ),  # 42
        (43, TType.STRING, 'customField', 'UTF8', None, ),  # 43
        (44, TType.BYTE, 'isRpSent', None, None, ),  # 44
        (45, TType.I32, 'sysuserId', None, None, ),  # 45
        (46, TType.I32, 'positionId', None, None, ),  # 46
        (47, TType.I32, 'sectionId', None, None, ),  # 47
        (48, TType.BYTE, 'emailIsvalid', None, None, ),  # 48
        (49, TType.BYTE, 'authMethod', None, None, ),  # 49
        (50, TType.STRING, 'customFieldValues', 'UTF8', None, ),  # 50
    )

    def __init__(self, id=None, employeeid=None, companyId=None, roleId=None, sex=None, ename=None, efname=None, cname=None, cfname=None, password=None, isAdmin=None, status=None, companybody=None, departmentname=None, groupname=None, position=None, employdate=None, managername=None, city=None, birthday=None, retiredate=None, education=None, address=None, idcard=None, mobile=None, award=None, bindingTime=None, email=None, activation=None, activation_code=None, disable=None, createTime=None, updateTime=None, authLevel=None, registerTime=None, registerIp=None, lastLoginTime=None, lastLoginIp=None, loginCount=None, source=None, downloaDOken=None, hrWxuserId=None, customField=None, isRpSent=None, sysuserId=None, positionId=None, sectionId=None, emailIsvalid=None, authMethod=None, customFieldValues=None,):
        self.id = id
        self.employeeid = employeeid
        self.companyId = companyId
        self.roleId = roleId
        self.sex = sex
        self.ename = ename
        self.efname = efname
        self.cname = cname
        self.cfname = cfname
        self.password = password
        self.isAdmin = isAdmin
        self.status = status
        self.companybody = companybody
        self.departmentname = departmentname
        self.groupname = groupname
        self.position = position
        self.employdate = employdate
        self.managername = managername
        self.city = city
        self.birthday = birthday
        self.retiredate = retiredate
        self.education = education
        self.address = address
        self.idcard = idcard
        self.mobile = mobile
        self.award = award
        self.bindingTime = bindingTime
        self.email = email
        self.activation = activation
        self.activation_code = activation_code
        self.disable = disable
        self.createTime = createTime
        self.updateTime = updateTime
        self.authLevel = authLevel
        self.registerTime = registerTime
        self.registerIp = registerIp
        self.lastLoginTime = lastLoginTime
        self.lastLoginIp = lastLoginIp
        self.loginCount = loginCount
        self.source = source
        self.downloaDOken = downloaDOken
        self.hrWxuserId = hrWxuserId
        self.customField = customField
        self.isRpSent = isRpSent
        self.sysuserId = sysuserId
        self.positionId = positionId
        self.sectionId = sectionId
        self.emailIsvalid = emailIsvalid
        self.authMethod = authMethod
        self.customFieldValues = customFieldValues

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.employeeid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.roleId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.sex = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.efname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.cname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.cfname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.isAdmin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.companybody = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.departmentname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.groupname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.position = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.employdate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.managername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.retiredate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.education = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.idcard = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.award = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.bindingTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BYTE:
                    self.activation = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.activation_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BYTE:
                    self.disable = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.updateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BYTE:
                    self.authLevel = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.registerTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.registerIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.lastLoginTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.lastLoginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I32:
                    self.loginCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.BYTE:
                    self.source = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.downloaDOken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.I32:
                    self.hrWxuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.customField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.BYTE:
                    self.isRpSent = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.sysuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.I32:
                    self.sectionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.BYTE:
                    self.emailIsvalid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.BYTE:
                    self.authMethod = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.customFieldValues = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserEmployeeDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.employeeid is not None:
            oprot.writeFieldBegin('employeeid', TType.STRING, 2)
            oprot.writeString(self.employeeid.encode('utf-8') if sys.version_info[0] == 2 else self.employeeid)
            oprot.writeFieldEnd()
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 3)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.roleId is not None:
            oprot.writeFieldBegin('roleId', TType.I32, 4)
            oprot.writeI32(self.roleId)
            oprot.writeFieldEnd()
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.BYTE, 5)
            oprot.writeByte(self.sex)
            oprot.writeFieldEnd()
        if self.ename is not None:
            oprot.writeFieldBegin('ename', TType.STRING, 6)
            oprot.writeString(self.ename.encode('utf-8') if sys.version_info[0] == 2 else self.ename)
            oprot.writeFieldEnd()
        if self.efname is not None:
            oprot.writeFieldBegin('efname', TType.STRING, 7)
            oprot.writeString(self.efname.encode('utf-8') if sys.version_info[0] == 2 else self.efname)
            oprot.writeFieldEnd()
        if self.cname is not None:
            oprot.writeFieldBegin('cname', TType.STRING, 8)
            oprot.writeString(self.cname.encode('utf-8') if sys.version_info[0] == 2 else self.cname)
            oprot.writeFieldEnd()
        if self.cfname is not None:
            oprot.writeFieldBegin('cfname', TType.STRING, 9)
            oprot.writeString(self.cfname.encode('utf-8') if sys.version_info[0] == 2 else self.cfname)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 10)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.isAdmin is not None:
            oprot.writeFieldBegin('isAdmin', TType.BOOL, 11)
            oprot.writeBool(self.isAdmin)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 12)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.companybody is not None:
            oprot.writeFieldBegin('companybody', TType.STRING, 13)
            oprot.writeString(self.companybody.encode('utf-8') if sys.version_info[0] == 2 else self.companybody)
            oprot.writeFieldEnd()
        if self.departmentname is not None:
            oprot.writeFieldBegin('departmentname', TType.STRING, 14)
            oprot.writeString(self.departmentname.encode('utf-8') if sys.version_info[0] == 2 else self.departmentname)
            oprot.writeFieldEnd()
        if self.groupname is not None:
            oprot.writeFieldBegin('groupname', TType.STRING, 15)
            oprot.writeString(self.groupname.encode('utf-8') if sys.version_info[0] == 2 else self.groupname)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRING, 16)
            oprot.writeString(self.position.encode('utf-8') if sys.version_info[0] == 2 else self.position)
            oprot.writeFieldEnd()
        if self.employdate is not None:
            oprot.writeFieldBegin('employdate', TType.STRING, 17)
            oprot.writeString(self.employdate.encode('utf-8') if sys.version_info[0] == 2 else self.employdate)
            oprot.writeFieldEnd()
        if self.managername is not None:
            oprot.writeFieldBegin('managername', TType.STRING, 18)
            oprot.writeString(self.managername.encode('utf-8') if sys.version_info[0] == 2 else self.managername)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 19)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 20)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.retiredate is not None:
            oprot.writeFieldBegin('retiredate', TType.STRING, 21)
            oprot.writeString(self.retiredate.encode('utf-8') if sys.version_info[0] == 2 else self.retiredate)
            oprot.writeFieldEnd()
        if self.education is not None:
            oprot.writeFieldBegin('education', TType.STRING, 22)
            oprot.writeString(self.education.encode('utf-8') if sys.version_info[0] == 2 else self.education)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 23)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.idcard is not None:
            oprot.writeFieldBegin('idcard', TType.STRING, 24)
            oprot.writeString(self.idcard.encode('utf-8') if sys.version_info[0] == 2 else self.idcard)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 25)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.award is not None:
            oprot.writeFieldBegin('award', TType.I32, 26)
            oprot.writeI32(self.award)
            oprot.writeFieldEnd()
        if self.bindingTime is not None:
            oprot.writeFieldBegin('bindingTime', TType.STRING, 27)
            oprot.writeString(self.bindingTime.encode('utf-8') if sys.version_info[0] == 2 else self.bindingTime)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 28)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.activation is not None:
            oprot.writeFieldBegin('activation', TType.BYTE, 29)
            oprot.writeByte(self.activation)
            oprot.writeFieldEnd()
        if self.activation_code is not None:
            oprot.writeFieldBegin('activation_code', TType.STRING, 30)
            oprot.writeString(self.activation_code.encode('utf-8') if sys.version_info[0] == 2 else self.activation_code)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.BYTE, 31)
            oprot.writeByte(self.disable)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 32)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.STRING, 33)
            oprot.writeString(self.updateTime.encode('utf-8') if sys.version_info[0] == 2 else self.updateTime)
            oprot.writeFieldEnd()
        if self.authLevel is not None:
            oprot.writeFieldBegin('authLevel', TType.BYTE, 34)
            oprot.writeByte(self.authLevel)
            oprot.writeFieldEnd()
        if self.registerTime is not None:
            oprot.writeFieldBegin('registerTime', TType.STRING, 35)
            oprot.writeString(self.registerTime.encode('utf-8') if sys.version_info[0] == 2 else self.registerTime)
            oprot.writeFieldEnd()
        if self.registerIp is not None:
            oprot.writeFieldBegin('registerIp', TType.STRING, 36)
            oprot.writeString(self.registerIp.encode('utf-8') if sys.version_info[0] == 2 else self.registerIp)
            oprot.writeFieldEnd()
        if self.lastLoginTime is not None:
            oprot.writeFieldBegin('lastLoginTime', TType.STRING, 37)
            oprot.writeString(self.lastLoginTime.encode('utf-8') if sys.version_info[0] == 2 else self.lastLoginTime)
            oprot.writeFieldEnd()
        if self.lastLoginIp is not None:
            oprot.writeFieldBegin('lastLoginIp', TType.STRING, 38)
            oprot.writeString(self.lastLoginIp.encode('utf-8') if sys.version_info[0] == 2 else self.lastLoginIp)
            oprot.writeFieldEnd()
        if self.loginCount is not None:
            oprot.writeFieldBegin('loginCount', TType.I32, 39)
            oprot.writeI32(self.loginCount)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.BYTE, 40)
            oprot.writeByte(self.source)
            oprot.writeFieldEnd()
        if self.downloaDOken is not None:
            oprot.writeFieldBegin('downloaDOken', TType.STRING, 41)
            oprot.writeString(self.downloaDOken.encode('utf-8') if sys.version_info[0] == 2 else self.downloaDOken)
            oprot.writeFieldEnd()
        if self.hrWxuserId is not None:
            oprot.writeFieldBegin('hrWxuserId', TType.I32, 42)
            oprot.writeI32(self.hrWxuserId)
            oprot.writeFieldEnd()
        if self.customField is not None:
            oprot.writeFieldBegin('customField', TType.STRING, 43)
            oprot.writeString(self.customField.encode('utf-8') if sys.version_info[0] == 2 else self.customField)
            oprot.writeFieldEnd()
        if self.isRpSent is not None:
            oprot.writeFieldBegin('isRpSent', TType.BYTE, 44)
            oprot.writeByte(self.isRpSent)
            oprot.writeFieldEnd()
        if self.sysuserId is not None:
            oprot.writeFieldBegin('sysuserId', TType.I32, 45)
            oprot.writeI32(self.sysuserId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 46)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.sectionId is not None:
            oprot.writeFieldBegin('sectionId', TType.I32, 47)
            oprot.writeI32(self.sectionId)
            oprot.writeFieldEnd()
        if self.emailIsvalid is not None:
            oprot.writeFieldBegin('emailIsvalid', TType.BYTE, 48)
            oprot.writeByte(self.emailIsvalid)
            oprot.writeFieldEnd()
        if self.authMethod is not None:
            oprot.writeFieldBegin('authMethod', TType.BYTE, 49)
            oprot.writeByte(self.authMethod)
            oprot.writeFieldEnd()
        if self.customFieldValues is not None:
            oprot.writeFieldBegin('customFieldValues', TType.STRING, 50)
            oprot.writeString(self.customFieldValues.encode('utf-8') if sys.version_info[0] == 2 else self.customFieldValues)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserEmployeePointsRecordDO(object):
    """
    Attributes:
     - id
     - employee_idk
     - reason
     - award
     - _create_time
     - application_id
     - recom_wxuser
     - update_time
     - position_id
     - berecom_wxuser_id
     - award_config_id
     - recom_user_id
     - berecom_user_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'employee_idk', None, None, ),  # 2
        (3, TType.STRING, 'reason', 'UTF8', None, ),  # 3
        (4, TType.I32, 'award', None, None, ),  # 4
        (5, TType.STRING, '_create_time', 'UTF8', None, ),  # 5
        (6, TType.I32, 'application_id', None, None, ),  # 6
        (7, TType.I32, 'recom_wxuser', None, None, ),  # 7
        (8, TType.STRING, 'update_time', 'UTF8', None, ),  # 8
        (9, TType.I32, 'position_id', None, None, ),  # 9
        (10, TType.I32, 'berecom_wxuser_id', None, None, ),  # 10
        (11, TType.I32, 'award_config_id', None, None, ),  # 11
        (12, TType.I32, 'recom_user_id', None, None, ),  # 12
        (13, TType.I32, 'berecom_user_id', None, None, ),  # 13
    )

    def __init__(self, id=None, employee_idk=None, reason=None, award=None, _create_time=None, application_id=None, recom_wxuser=None, update_time=None, position_id=None, berecom_wxuser_id=None, award_config_id=None, recom_user_id=None, berecom_user_id=None,):
        self.id = id
        self.employee_idk = employee_idk
        self.reason = reason
        self.award = award
        self._create_time = _create_time
        self.application_id = application_id
        self.recom_wxuser = recom_wxuser
        self.update_time = update_time
        self.position_id = position_id
        self.berecom_wxuser_id = berecom_wxuser_id
        self.award_config_id = award_config_id
        self.recom_user_id = recom_user_id
        self.berecom_user_id = berecom_user_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.employee_idk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.award = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self._create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.application_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.recom_wxuser = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.berecom_wxuser_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.award_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.recom_user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.berecom_user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserEmployeePointsRecordDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.employee_idk is not None:
            oprot.writeFieldBegin('employee_idk', TType.I32, 2)
            oprot.writeI32(self.employee_idk)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 3)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.award is not None:
            oprot.writeFieldBegin('award', TType.I32, 4)
            oprot.writeI32(self.award)
            oprot.writeFieldEnd()
        if self._create_time is not None:
            oprot.writeFieldBegin('_create_time', TType.STRING, 5)
            oprot.writeString(self._create_time.encode('utf-8') if sys.version_info[0] == 2 else self._create_time)
            oprot.writeFieldEnd()
        if self.application_id is not None:
            oprot.writeFieldBegin('application_id', TType.I32, 6)
            oprot.writeI32(self.application_id)
            oprot.writeFieldEnd()
        if self.recom_wxuser is not None:
            oprot.writeFieldBegin('recom_wxuser', TType.I32, 7)
            oprot.writeI32(self.recom_wxuser)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 8)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 9)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.berecom_wxuser_id is not None:
            oprot.writeFieldBegin('berecom_wxuser_id', TType.I32, 10)
            oprot.writeI32(self.berecom_wxuser_id)
            oprot.writeFieldEnd()
        if self.award_config_id is not None:
            oprot.writeFieldBegin('award_config_id', TType.I32, 11)
            oprot.writeI32(self.award_config_id)
            oprot.writeFieldEnd()
        if self.recom_user_id is not None:
            oprot.writeFieldBegin('recom_user_id', TType.I32, 12)
            oprot.writeI32(self.recom_user_id)
            oprot.writeFieldEnd()
        if self.berecom_user_id is not None:
            oprot.writeFieldBegin('berecom_user_id', TType.I32, 13)
            oprot.writeI32(self.berecom_user_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserUserDO(object):
    """
    Attributes:
     - id
     - username
     - password
     - is_disable
     - rank
     - register_time
     - register_ip
     - last_login_time
     - last_login_ip
     - login_count
     - mobile
     - email
     - activation
     - activation_code
     - token
     - name
     - headimg
     - national_code_id
     - wechat_id
     - unionid
     - source
     - company
     - position
     - parentid
     - nickname
     - email_verified
     - update_time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
        (4, TType.BOOL, 'is_disable', None, None, ),  # 4
        (5, TType.I32, 'rank', None, None, ),  # 5
        (6, TType.STRING, 'register_time', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'register_ip', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'last_login_time', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'last_login_ip', 'UTF8', None, ),  # 9
        (10, TType.I32, 'login_count', None, None, ),  # 10
        (11, TType.I32, 'mobile', None, None, ),  # 11
        (12, TType.STRING, 'email', 'UTF8', None, ),  # 12
        (13, TType.BOOL, 'activation', None, None, ),  # 13
        (14, TType.STRING, 'activation_code', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'token', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'name', 'UTF8', None, ),  # 16
        (17, TType.STRING, 'headimg', 'UTF8', None, ),  # 17
        (18, TType.I32, 'national_code_id', None, None, ),  # 18
        (19, TType.I32, 'wechat_id', None, None, ),  # 19
        (20, TType.STRING, 'unionid', 'UTF8', None, ),  # 20
        (21, TType.I16, 'source', None, None, ),  # 21
        (22, TType.STRING, 'company', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'position', 'UTF8', None, ),  # 23
        (24, TType.I32, 'parentid', None, None, ),  # 24
        (25, TType.STRING, 'nickname', 'UTF8', None, ),  # 25
        (26, TType.BYTE, 'email_verified', None, None, ),  # 26
        (27, TType.STRING, 'update_time', 'UTF8', None, ),  # 27
    )

    def __init__(self, id=None, username=None, password=None, is_disable=None, rank=None, register_time=None, register_ip=None, last_login_time=None, last_login_ip=None, login_count=None, mobile=None, email=None, activation=None, activation_code=None, token=None, name=None, headimg=None, national_code_id=None, wechat_id=None, unionid=None, source=None, company=None, position=None, parentid=None, nickname=None, email_verified=None, update_time=None,):
        self.id = id
        self.username = username
        self.password = password
        self.is_disable = is_disable
        self.rank = rank
        self.register_time = register_time
        self.register_ip = register_ip
        self.last_login_time = last_login_time
        self.last_login_ip = last_login_ip
        self.login_count = login_count
        self.mobile = mobile
        self.email = email
        self.activation = activation
        self.activation_code = activation_code
        self.token = token
        self.name = name
        self.headimg = headimg
        self.national_code_id = national_code_id
        self.wechat_id = wechat_id
        self.unionid = unionid
        self.source = source
        self.company = company
        self.position = position
        self.parentid = parentid
        self.nickname = nickname
        self.email_verified = email_verified
        self.update_time = update_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_disable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rank = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.register_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.register_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.last_login_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.last_login_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.login_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.mobile = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.activation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.activation_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.headimg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.national_code_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.wechat_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.unionid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I16:
                    self.source = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.position = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.parentid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.nickname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BYTE:
                    self.email_verified = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserUserDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.is_disable is not None:
            oprot.writeFieldBegin('is_disable', TType.BOOL, 4)
            oprot.writeBool(self.is_disable)
            oprot.writeFieldEnd()
        if self.rank is not None:
            oprot.writeFieldBegin('rank', TType.I32, 5)
            oprot.writeI32(self.rank)
            oprot.writeFieldEnd()
        if self.register_time is not None:
            oprot.writeFieldBegin('register_time', TType.STRING, 6)
            oprot.writeString(self.register_time.encode('utf-8') if sys.version_info[0] == 2 else self.register_time)
            oprot.writeFieldEnd()
        if self.register_ip is not None:
            oprot.writeFieldBegin('register_ip', TType.STRING, 7)
            oprot.writeString(self.register_ip.encode('utf-8') if sys.version_info[0] == 2 else self.register_ip)
            oprot.writeFieldEnd()
        if self.last_login_time is not None:
            oprot.writeFieldBegin('last_login_time', TType.STRING, 8)
            oprot.writeString(self.last_login_time.encode('utf-8') if sys.version_info[0] == 2 else self.last_login_time)
            oprot.writeFieldEnd()
        if self.last_login_ip is not None:
            oprot.writeFieldBegin('last_login_ip', TType.STRING, 9)
            oprot.writeString(self.last_login_ip.encode('utf-8') if sys.version_info[0] == 2 else self.last_login_ip)
            oprot.writeFieldEnd()
        if self.login_count is not None:
            oprot.writeFieldBegin('login_count', TType.I32, 10)
            oprot.writeI32(self.login_count)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.I32, 11)
            oprot.writeI32(self.mobile)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 12)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.activation is not None:
            oprot.writeFieldBegin('activation', TType.BOOL, 13)
            oprot.writeBool(self.activation)
            oprot.writeFieldEnd()
        if self.activation_code is not None:
            oprot.writeFieldBegin('activation_code', TType.STRING, 14)
            oprot.writeString(self.activation_code.encode('utf-8') if sys.version_info[0] == 2 else self.activation_code)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 15)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 16)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.headimg is not None:
            oprot.writeFieldBegin('headimg', TType.STRING, 17)
            oprot.writeString(self.headimg.encode('utf-8') if sys.version_info[0] == 2 else self.headimg)
            oprot.writeFieldEnd()
        if self.national_code_id is not None:
            oprot.writeFieldBegin('national_code_id', TType.I32, 18)
            oprot.writeI32(self.national_code_id)
            oprot.writeFieldEnd()
        if self.wechat_id is not None:
            oprot.writeFieldBegin('wechat_id', TType.I32, 19)
            oprot.writeI32(self.wechat_id)
            oprot.writeFieldEnd()
        if self.unionid is not None:
            oprot.writeFieldBegin('unionid', TType.STRING, 20)
            oprot.writeString(self.unionid.encode('utf-8') if sys.version_info[0] == 2 else self.unionid)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I16, 21)
            oprot.writeI16(self.source)
            oprot.writeFieldEnd()
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 22)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRING, 23)
            oprot.writeString(self.position.encode('utf-8') if sys.version_info[0] == 2 else self.position)
            oprot.writeFieldEnd()
        if self.parentid is not None:
            oprot.writeFieldBegin('parentid', TType.I32, 24)
            oprot.writeI32(self.parentid)
            oprot.writeFieldEnd()
        if self.nickname is not None:
            oprot.writeFieldBegin('nickname', TType.STRING, 25)
            oprot.writeString(self.nickname.encode('utf-8') if sys.version_info[0] == 2 else self.nickname)
            oprot.writeFieldEnd()
        if self.email_verified is not None:
            oprot.writeFieldBegin('email_verified', TType.BYTE, 26)
            oprot.writeByte(self.email_verified)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 27)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserHrAccountDO(object):
    """
    Attributes:
     - id
     - companyId
     - mobile
     - email
     - wxuserId
     - password
     - username
     - accountType
     - activation
     - disable
     - registerTime
     - registerIp
     - lastLoginTime
     - lastLoginIp
     - loginCount
     - source
     - downloadToken
     - createTime
     - updateTime
     - headimgurl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'companyId', None, None, ),  # 2
        (3, TType.STRING, 'mobile', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'email', 'UTF8', None, ),  # 4
        (5, TType.I32, 'wxuserId', None, None, ),  # 5
        (6, TType.STRING, 'password', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'username', 'UTF8', None, ),  # 7
        (8, TType.BYTE, 'accountType', None, None, ),  # 8
        (9, TType.BYTE, 'activation', None, None, ),  # 9
        (10, TType.BYTE, 'disable', None, None, ),  # 10
        (11, TType.STRING, 'registerTime', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'registerIp', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'lastLoginTime', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'lastLoginIp', 'UTF8', None, ),  # 14
        (15, TType.I32, 'loginCount', None, None, ),  # 15
        (16, TType.I32, 'source', None, None, ),  # 16
        (17, TType.STRING, 'downloadToken', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'createTime', 'UTF8', None, ),  # 18
        (19, TType.STRING, 'updateTime', 'UTF8', None, ),  # 19
        (20, TType.STRING, 'headimgurl', 'UTF8', None, ),  # 20
    )

    def __init__(self, id=None, companyId=None, mobile=None, email=None, wxuserId=None, password=None, username=None, accountType=None, activation=None, disable=None, registerTime=None, registerIp=None, lastLoginTime=None, lastLoginIp=None, loginCount=None, source=None, downloadToken=None, createTime=None, updateTime=None, headimgurl=None,):
        self.id = id
        self.companyId = companyId
        self.mobile = mobile
        self.email = email
        self.wxuserId = wxuserId
        self.password = password
        self.username = username
        self.accountType = accountType
        self.activation = activation
        self.disable = disable
        self.registerTime = registerTime
        self.registerIp = registerIp
        self.lastLoginTime = lastLoginTime
        self.lastLoginIp = lastLoginIp
        self.loginCount = loginCount
        self.source = source
        self.downloadToken = downloadToken
        self.createTime = createTime
        self.updateTime = updateTime
        self.headimgurl = headimgurl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.wxuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.accountType = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.activation = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BYTE:
                    self.disable = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.registerTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.registerIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.lastLoginTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.lastLoginIp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.loginCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.downloadToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.updateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.headimgurl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserHrAccountDO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 2)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 3)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 4)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.wxuserId is not None:
            oprot.writeFieldBegin('wxuserId', TType.I32, 5)
            oprot.writeI32(self.wxuserId)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 6)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 7)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.accountType is not None:
            oprot.writeFieldBegin('accountType', TType.BYTE, 8)
            oprot.writeByte(self.accountType)
            oprot.writeFieldEnd()
        if self.activation is not None:
            oprot.writeFieldBegin('activation', TType.BYTE, 9)
            oprot.writeByte(self.activation)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.BYTE, 10)
            oprot.writeByte(self.disable)
            oprot.writeFieldEnd()
        if self.registerTime is not None:
            oprot.writeFieldBegin('registerTime', TType.STRING, 11)
            oprot.writeString(self.registerTime.encode('utf-8') if sys.version_info[0] == 2 else self.registerTime)
            oprot.writeFieldEnd()
        if self.registerIp is not None:
            oprot.writeFieldBegin('registerIp', TType.STRING, 12)
            oprot.writeString(self.registerIp.encode('utf-8') if sys.version_info[0] == 2 else self.registerIp)
            oprot.writeFieldEnd()
        if self.lastLoginTime is not None:
            oprot.writeFieldBegin('lastLoginTime', TType.STRING, 13)
            oprot.writeString(self.lastLoginTime.encode('utf-8') if sys.version_info[0] == 2 else self.lastLoginTime)
            oprot.writeFieldEnd()
        if self.lastLoginIp is not None:
            oprot.writeFieldBegin('lastLoginIp', TType.STRING, 14)
            oprot.writeString(self.lastLoginIp.encode('utf-8') if sys.version_info[0] == 2 else self.lastLoginIp)
            oprot.writeFieldEnd()
        if self.loginCount is not None:
            oprot.writeFieldBegin('loginCount', TType.I32, 15)
            oprot.writeI32(self.loginCount)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I32, 16)
            oprot.writeI32(self.source)
            oprot.writeFieldEnd()
        if self.downloadToken is not None:
            oprot.writeFieldBegin('downloadToken', TType.STRING, 17)
            oprot.writeString(self.downloadToken.encode('utf-8') if sys.version_info[0] == 2 else self.downloadToken)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 18)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.STRING, 19)
            oprot.writeString(self.updateTime.encode('utf-8') if sys.version_info[0] == 2 else self.updateTime)
            oprot.writeFieldEnd()
        if self.headimgurl is not None:
            oprot.writeFieldBegin('headimgurl', TType.STRING, 20)
            oprot.writeString(self.headimgurl.encode('utf-8') if sys.version_info[0] == 2 else self.headimgurl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
