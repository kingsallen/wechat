#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Position(object):
    """
    Attributes:
     - id
     - jobnumber
     - company_id
     - title
     - city
     - department
     - l_jobid
     - publish_date
     - stop_date
     - accountabilities
     - experience
     - requirement
     - language
     - status
     - visitnum
     - source_id
     - update_time
     - employment_type
     - hr_email
     - degree
     - feature
     - candidate_source
     - occupation
     - industry
     - email_resume_conf
     - l_PostingTargetId
     - priority
     - share_tpl_id
     - count
     - salary_top
     - salary_bottom
     - experience_above
     - degree_above
     - management_experience
     - gender
     - publisher
     - app_cv_config_id
     - source
     - hb_status
     - age
     - major_required
     - work_address
     - keyword
     - reporting_to
     - is_hiring
     - underlings
     - language_required
     - target_industry
     - current_status
     - cities
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'jobnumber', 'UTF8', None, ),  # 2
        (3, TType.I32, 'company_id', None, None, ),  # 3
        (4, TType.STRING, 'title', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'city', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'department', 'UTF8', None, ),  # 6
        (7, TType.I32, 'l_jobid', None, None, ),  # 7
        (8, TType.STRING, 'publish_date', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'stop_date', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'accountabilities', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'experience', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'requirement', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'language', 'UTF8', None, ),  # 13
        (14, TType.I32, 'status', None, None, ),  # 14
        (15, TType.I32, 'visitnum', None, None, ),  # 15
        (16, TType.I32, 'source_id', None, None, ),  # 16
        (17, TType.STRING, 'update_time', 'UTF8', None, ),  # 17
        (18, TType.BYTE, 'employment_type', None, None, ),  # 18
        (19, TType.STRING, 'hr_email', 'UTF8', None, ),  # 19
        (20, TType.I32, 'degree', None, None, ),  # 20
        (21, TType.STRING, 'feature', 'UTF8', None, ),  # 21
        (22, TType.BYTE, 'candidate_source', None, None, ),  # 22
        (23, TType.STRING, 'occupation', 'UTF8', None, ),  # 23
        (24, TType.STRING, 'industry', 'UTF8', None, ),  # 24
        (25, TType.BYTE, 'email_resume_conf', None, None, ),  # 25
        (26, TType.I32, 'l_PostingTargetId', None, None, ),  # 26
        (27, TType.I32, 'priority', None, None, ),  # 27
        (28, TType.I32, 'share_tpl_id', None, None, ),  # 28
        (29, TType.I32, 'count', None, None, ),  # 29
        (30, TType.I32, 'salary_top', None, None, ),  # 30
        (31, TType.I32, 'salary_bottom', None, None, ),  # 31
        (32, TType.BYTE, 'experience_above', None, None, ),  # 32
        (33, TType.BYTE, 'degree_above', None, None, ),  # 33
        (34, TType.BYTE, 'management_experience', None, None, ),  # 34
        (35, TType.BYTE, 'gender', None, None, ),  # 35
        (36, TType.I32, 'publisher', None, None, ),  # 36
        (37, TType.I32, 'app_cv_config_id', None, None, ),  # 37
        (38, TType.I32, 'source', None, None, ),  # 38
        (39, TType.BYTE, 'hb_status', None, None, ),  # 39
        (40, TType.I32, 'age', None, None, ),  # 40
        (41, TType.STRING, 'major_required', 'UTF8', None, ),  # 41
        (42, TType.STRING, 'work_address', 'UTF8', None, ),  # 42
        (43, TType.STRING, 'keyword', 'UTF8', None, ),  # 43
        (44, TType.STRING, 'reporting_to', 'UTF8', None, ),  # 44
        (45, TType.I32, 'is_hiring', None, None, ),  # 45
        (46, TType.I32, 'underlings', None, None, ),  # 46
        (47, TType.BYTE, 'language_required', None, None, ),  # 47
        (48, TType.I32, 'target_industry', None, None, ),  # 48
        (49, TType.I32, 'current_status', None, None, ),  # 49
        (50, TType.MAP, 'cities', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 50
    )

    def __init__(self, id=None, jobnumber=None, company_id=None, title=None, city=None, department=None, l_jobid=None, publish_date=None, stop_date=None, accountabilities=None, experience=None, requirement=None, language=None, status=None, visitnum=None, source_id=None, update_time=None, employment_type=None, hr_email=None, degree=None, feature=None, candidate_source=None, occupation=None, industry=None, email_resume_conf=None, l_PostingTargetId=None, priority=None, share_tpl_id=None, count=None, salary_top=None, salary_bottom=None, experience_above=None, degree_above=None, management_experience=None, gender=None, publisher=None, app_cv_config_id=None, source=None, hb_status=None, age=None, major_required=None, work_address=None, keyword=None, reporting_to=None, is_hiring=None, underlings=None, language_required=None, target_industry=None, current_status=None, cities=None,):
        self.id = id
        self.jobnumber = jobnumber
        self.company_id = company_id
        self.title = title
        self.city = city
        self.department = department
        self.l_jobid = l_jobid
        self.publish_date = publish_date
        self.stop_date = stop_date
        self.accountabilities = accountabilities
        self.experience = experience
        self.requirement = requirement
        self.language = language
        self.status = status
        self.visitnum = visitnum
        self.source_id = source_id
        self.update_time = update_time
        self.employment_type = employment_type
        self.hr_email = hr_email
        self.degree = degree
        self.feature = feature
        self.candidate_source = candidate_source
        self.occupation = occupation
        self.industry = industry
        self.email_resume_conf = email_resume_conf
        self.l_PostingTargetId = l_PostingTargetId
        self.priority = priority
        self.share_tpl_id = share_tpl_id
        self.count = count
        self.salary_top = salary_top
        self.salary_bottom = salary_bottom
        self.experience_above = experience_above
        self.degree_above = degree_above
        self.management_experience = management_experience
        self.gender = gender
        self.publisher = publisher
        self.app_cv_config_id = app_cv_config_id
        self.source = source
        self.hb_status = hb_status
        self.age = age
        self.major_required = major_required
        self.work_address = work_address
        self.keyword = keyword
        self.reporting_to = reporting_to
        self.is_hiring = is_hiring
        self.underlings = underlings
        self.language_required = language_required
        self.target_industry = target_industry
        self.current_status = current_status
        self.cities = cities

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobnumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.department = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.l_jobid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.publish_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.stop_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.accountabilities = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.experience = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.requirement = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.visitnum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.source_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BYTE:
                    self.employment_type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.hr_email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.degree = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.feature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BYTE:
                    self.candidate_source = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.occupation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.industry = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BYTE:
                    self.email_resume_conf = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.l_PostingTargetId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I32:
                    self.share_tpl_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.salary_top = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.salary_bottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BYTE:
                    self.experience_above = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BYTE:
                    self.degree_above = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BYTE:
                    self.management_experience = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BYTE:
                    self.gender = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I32:
                    self.publisher = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.I32:
                    self.app_cv_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I32:
                    self.source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.BYTE:
                    self.hb_status = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.age = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.major_required = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.work_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.keyword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRING:
                    self.reporting_to = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.is_hiring = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.I32:
                    self.underlings = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.BYTE:
                    self.language_required = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.I32:
                    self.target_industry = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.I32:
                    self.current_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.MAP:
                    self.cities = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.cities[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Position')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.jobnumber is not None:
            oprot.writeFieldBegin('jobnumber', TType.STRING, 2)
            oprot.writeString(self.jobnumber.encode('utf-8') if sys.version_info[0] == 2 else self.jobnumber)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 3)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 4)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 5)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.department is not None:
            oprot.writeFieldBegin('department', TType.STRING, 6)
            oprot.writeString(self.department.encode('utf-8') if sys.version_info[0] == 2 else self.department)
            oprot.writeFieldEnd()
        if self.l_jobid is not None:
            oprot.writeFieldBegin('l_jobid', TType.I32, 7)
            oprot.writeI32(self.l_jobid)
            oprot.writeFieldEnd()
        if self.publish_date is not None:
            oprot.writeFieldBegin('publish_date', TType.STRING, 8)
            oprot.writeString(self.publish_date.encode('utf-8') if sys.version_info[0] == 2 else self.publish_date)
            oprot.writeFieldEnd()
        if self.stop_date is not None:
            oprot.writeFieldBegin('stop_date', TType.STRING, 9)
            oprot.writeString(self.stop_date.encode('utf-8') if sys.version_info[0] == 2 else self.stop_date)
            oprot.writeFieldEnd()
        if self.accountabilities is not None:
            oprot.writeFieldBegin('accountabilities', TType.STRING, 10)
            oprot.writeString(self.accountabilities.encode('utf-8') if sys.version_info[0] == 2 else self.accountabilities)
            oprot.writeFieldEnd()
        if self.experience is not None:
            oprot.writeFieldBegin('experience', TType.STRING, 11)
            oprot.writeString(self.experience.encode('utf-8') if sys.version_info[0] == 2 else self.experience)
            oprot.writeFieldEnd()
        if self.requirement is not None:
            oprot.writeFieldBegin('requirement', TType.STRING, 12)
            oprot.writeString(self.requirement.encode('utf-8') if sys.version_info[0] == 2 else self.requirement)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 13)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 14)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.visitnum is not None:
            oprot.writeFieldBegin('visitnum', TType.I32, 15)
            oprot.writeI32(self.visitnum)
            oprot.writeFieldEnd()
        if self.source_id is not None:
            oprot.writeFieldBegin('source_id', TType.I32, 16)
            oprot.writeI32(self.source_id)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 17)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.employment_type is not None:
            oprot.writeFieldBegin('employment_type', TType.BYTE, 18)
            oprot.writeByte(self.employment_type)
            oprot.writeFieldEnd()
        if self.hr_email is not None:
            oprot.writeFieldBegin('hr_email', TType.STRING, 19)
            oprot.writeString(self.hr_email.encode('utf-8') if sys.version_info[0] == 2 else self.hr_email)
            oprot.writeFieldEnd()
        if self.degree is not None:
            oprot.writeFieldBegin('degree', TType.I32, 20)
            oprot.writeI32(self.degree)
            oprot.writeFieldEnd()
        if self.feature is not None:
            oprot.writeFieldBegin('feature', TType.STRING, 21)
            oprot.writeString(self.feature.encode('utf-8') if sys.version_info[0] == 2 else self.feature)
            oprot.writeFieldEnd()
        if self.candidate_source is not None:
            oprot.writeFieldBegin('candidate_source', TType.BYTE, 22)
            oprot.writeByte(self.candidate_source)
            oprot.writeFieldEnd()
        if self.occupation is not None:
            oprot.writeFieldBegin('occupation', TType.STRING, 23)
            oprot.writeString(self.occupation.encode('utf-8') if sys.version_info[0] == 2 else self.occupation)
            oprot.writeFieldEnd()
        if self.industry is not None:
            oprot.writeFieldBegin('industry', TType.STRING, 24)
            oprot.writeString(self.industry.encode('utf-8') if sys.version_info[0] == 2 else self.industry)
            oprot.writeFieldEnd()
        if self.email_resume_conf is not None:
            oprot.writeFieldBegin('email_resume_conf', TType.BYTE, 25)
            oprot.writeByte(self.email_resume_conf)
            oprot.writeFieldEnd()
        if self.l_PostingTargetId is not None:
            oprot.writeFieldBegin('l_PostingTargetId', TType.I32, 26)
            oprot.writeI32(self.l_PostingTargetId)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 27)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.share_tpl_id is not None:
            oprot.writeFieldBegin('share_tpl_id', TType.I32, 28)
            oprot.writeI32(self.share_tpl_id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 29)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.salary_top is not None:
            oprot.writeFieldBegin('salary_top', TType.I32, 30)
            oprot.writeI32(self.salary_top)
            oprot.writeFieldEnd()
        if self.salary_bottom is not None:
            oprot.writeFieldBegin('salary_bottom', TType.I32, 31)
            oprot.writeI32(self.salary_bottom)
            oprot.writeFieldEnd()
        if self.experience_above is not None:
            oprot.writeFieldBegin('experience_above', TType.BYTE, 32)
            oprot.writeByte(self.experience_above)
            oprot.writeFieldEnd()
        if self.degree_above is not None:
            oprot.writeFieldBegin('degree_above', TType.BYTE, 33)
            oprot.writeByte(self.degree_above)
            oprot.writeFieldEnd()
        if self.management_experience is not None:
            oprot.writeFieldBegin('management_experience', TType.BYTE, 34)
            oprot.writeByte(self.management_experience)
            oprot.writeFieldEnd()
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.BYTE, 35)
            oprot.writeByte(self.gender)
            oprot.writeFieldEnd()
        if self.publisher is not None:
            oprot.writeFieldBegin('publisher', TType.I32, 36)
            oprot.writeI32(self.publisher)
            oprot.writeFieldEnd()
        if self.app_cv_config_id is not None:
            oprot.writeFieldBegin('app_cv_config_id', TType.I32, 37)
            oprot.writeI32(self.app_cv_config_id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I32, 38)
            oprot.writeI32(self.source)
            oprot.writeFieldEnd()
        if self.hb_status is not None:
            oprot.writeFieldBegin('hb_status', TType.BYTE, 39)
            oprot.writeByte(self.hb_status)
            oprot.writeFieldEnd()
        if self.age is not None:
            oprot.writeFieldBegin('age', TType.I32, 40)
            oprot.writeI32(self.age)
            oprot.writeFieldEnd()
        if self.major_required is not None:
            oprot.writeFieldBegin('major_required', TType.STRING, 41)
            oprot.writeString(self.major_required.encode('utf-8') if sys.version_info[0] == 2 else self.major_required)
            oprot.writeFieldEnd()
        if self.work_address is not None:
            oprot.writeFieldBegin('work_address', TType.STRING, 42)
            oprot.writeString(self.work_address.encode('utf-8') if sys.version_info[0] == 2 else self.work_address)
            oprot.writeFieldEnd()
        if self.keyword is not None:
            oprot.writeFieldBegin('keyword', TType.STRING, 43)
            oprot.writeString(self.keyword.encode('utf-8') if sys.version_info[0] == 2 else self.keyword)
            oprot.writeFieldEnd()
        if self.reporting_to is not None:
            oprot.writeFieldBegin('reporting_to', TType.STRING, 44)
            oprot.writeString(self.reporting_to.encode('utf-8') if sys.version_info[0] == 2 else self.reporting_to)
            oprot.writeFieldEnd()
        if self.is_hiring is not None:
            oprot.writeFieldBegin('is_hiring', TType.I32, 45)
            oprot.writeI32(self.is_hiring)
            oprot.writeFieldEnd()
        if self.underlings is not None:
            oprot.writeFieldBegin('underlings', TType.I32, 46)
            oprot.writeI32(self.underlings)
            oprot.writeFieldEnd()
        if self.language_required is not None:
            oprot.writeFieldBegin('language_required', TType.BYTE, 47)
            oprot.writeByte(self.language_required)
            oprot.writeFieldEnd()
        if self.target_industry is not None:
            oprot.writeFieldBegin('target_industry', TType.I32, 48)
            oprot.writeI32(self.target_industry)
            oprot.writeFieldEnd()
        if self.current_status is not None:
            oprot.writeFieldBegin('current_status', TType.I32, 49)
            oprot.writeI32(self.current_status)
            oprot.writeFieldEnd()
        if self.cities is not None:
            oprot.writeFieldBegin('cities', TType.MAP, 50)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.cities))
            for kiter7, viter8 in self.cities.items():
                oprot.writeI32(kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WechatPositionListQuery(object):
    """
    Attributes:
     - page_from
     - page_size
     - keywords
     - cities
     - industries
     - occupations
     - scale
     - candidate_source
     - employment_type
     - experience
     - salary
     - degree
     - company_id
     - did
     - department
     - order_by_priority
     - custom
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'page_from', None, None, ),  # 1
        (2, TType.I32, 'page_size', None, None, ),  # 2
        (3, TType.STRING, 'keywords', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'cities', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'industries', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'occupations', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'scale', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'candidate_source', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'employment_type', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'experience', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'salary', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'degree', 'UTF8', None, ),  # 12
        (13, TType.I32, 'company_id', None, None, ),  # 13
        (14, TType.I32, 'did', None, None, ),  # 14
        (15, TType.STRING, 'department', 'UTF8', None, ),  # 15
        (16, TType.BOOL, 'order_by_priority', None, None, ),  # 16
        (17, TType.STRING, 'custom', 'UTF8', None, ),  # 17
    )

    def __init__(self, page_from=None, page_size=None, keywords=None, cities=None, industries=None, occupations=None, scale=None, candidate_source=None, employment_type=None, experience=None, salary=None, degree=None, company_id=None, did=None, department=None, order_by_priority=None, custom=None,):
        self.page_from = page_from
        self.page_size = page_size
        self.keywords = keywords
        self.cities = cities
        self.industries = industries
        self.occupations = occupations
        self.scale = scale
        self.candidate_source = candidate_source
        self.employment_type = employment_type
        self.experience = experience
        self.salary = salary
        self.degree = degree
        self.company_id = company_id
        self.did = did
        self.department = department
        self.order_by_priority = order_by_priority
        self.custom = custom

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.page_from = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.page_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.keywords = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cities = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.industries = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.occupations = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.scale = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.candidate_source = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.employment_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.experience = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.salary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.degree = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.did = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.department = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.order_by_priority = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WechatPositionListQuery')
        if self.page_from is not None:
            oprot.writeFieldBegin('page_from', TType.I32, 1)
            oprot.writeI32(self.page_from)
            oprot.writeFieldEnd()
        if self.page_size is not None:
            oprot.writeFieldBegin('page_size', TType.I32, 2)
            oprot.writeI32(self.page_size)
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.STRING, 3)
            oprot.writeString(self.keywords.encode('utf-8') if sys.version_info[0] == 2 else self.keywords)
            oprot.writeFieldEnd()
        if self.cities is not None:
            oprot.writeFieldBegin('cities', TType.STRING, 4)
            oprot.writeString(self.cities.encode('utf-8') if sys.version_info[0] == 2 else self.cities)
            oprot.writeFieldEnd()
        if self.industries is not None:
            oprot.writeFieldBegin('industries', TType.STRING, 5)
            oprot.writeString(self.industries.encode('utf-8') if sys.version_info[0] == 2 else self.industries)
            oprot.writeFieldEnd()
        if self.occupations is not None:
            oprot.writeFieldBegin('occupations', TType.STRING, 6)
            oprot.writeString(self.occupations.encode('utf-8') if sys.version_info[0] == 2 else self.occupations)
            oprot.writeFieldEnd()
        if self.scale is not None:
            oprot.writeFieldBegin('scale', TType.STRING, 7)
            oprot.writeString(self.scale.encode('utf-8') if sys.version_info[0] == 2 else self.scale)
            oprot.writeFieldEnd()
        if self.candidate_source is not None:
            oprot.writeFieldBegin('candidate_source', TType.STRING, 8)
            oprot.writeString(self.candidate_source.encode('utf-8') if sys.version_info[0] == 2 else self.candidate_source)
            oprot.writeFieldEnd()
        if self.employment_type is not None:
            oprot.writeFieldBegin('employment_type', TType.STRING, 9)
            oprot.writeString(self.employment_type.encode('utf-8') if sys.version_info[0] == 2 else self.employment_type)
            oprot.writeFieldEnd()
        if self.experience is not None:
            oprot.writeFieldBegin('experience', TType.STRING, 10)
            oprot.writeString(self.experience.encode('utf-8') if sys.version_info[0] == 2 else self.experience)
            oprot.writeFieldEnd()
        if self.salary is not None:
            oprot.writeFieldBegin('salary', TType.STRING, 11)
            oprot.writeString(self.salary.encode('utf-8') if sys.version_info[0] == 2 else self.salary)
            oprot.writeFieldEnd()
        if self.degree is not None:
            oprot.writeFieldBegin('degree', TType.STRING, 12)
            oprot.writeString(self.degree.encode('utf-8') if sys.version_info[0] == 2 else self.degree)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 13)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.did is not None:
            oprot.writeFieldBegin('did', TType.I32, 14)
            oprot.writeI32(self.did)
            oprot.writeFieldEnd()
        if self.department is not None:
            oprot.writeFieldBegin('department', TType.STRING, 15)
            oprot.writeString(self.department.encode('utf-8') if sys.version_info[0] == 2 else self.department)
            oprot.writeFieldEnd()
        if self.order_by_priority is not None:
            oprot.writeFieldBegin('order_by_priority', TType.BOOL, 16)
            oprot.writeBool(self.order_by_priority)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 17)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WechatPositionListData(object):
    """
    Attributes:
     - id
     - title
     - salary_top
     - salary_bottom
     - publish_date
     - department
     - visitnum
     - in_hb
     - count
     - company_abbr
     - company_logo
     - company_name
     - is_new
     - city
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        None,  # 3
        (4, TType.I32, 'salary_top', None, None, ),  # 4
        (5, TType.I32, 'salary_bottom', None, None, ),  # 5
        (6, TType.STRING, 'publish_date', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'department', 'UTF8', None, ),  # 7
        (8, TType.I32, 'visitnum', None, None, ),  # 8
        (9, TType.BOOL, 'in_hb', None, None, ),  # 9
        (10, TType.I32, 'count', None, None, ),  # 10
        (11, TType.STRING, 'company_abbr', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'company_logo', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'company_name', 'UTF8', None, ),  # 13
        (14, TType.BOOL, 'is_new', None, None, ),  # 14
        (15, TType.STRING, 'city', 'UTF8', None, ),  # 15
    )

    def __init__(self, id=None, title=None, salary_top=None, salary_bottom=None, publish_date=None, department=None, visitnum=None, in_hb=None, count=None, company_abbr=None, company_logo=None, company_name=None, is_new=None, city=None,):
        self.id = id
        self.title = title
        self.salary_top = salary_top
        self.salary_bottom = salary_bottom
        self.publish_date = publish_date
        self.department = department
        self.visitnum = visitnum
        self.in_hb = in_hb
        self.count = count
        self.company_abbr = company_abbr
        self.company_logo = company_logo
        self.company_name = company_name
        self.is_new = is_new
        self.city = city

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.salary_top = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.salary_bottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.publish_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.department = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.visitnum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.in_hb = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.company_abbr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.company_logo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.is_new = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WechatPositionListData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.salary_top is not None:
            oprot.writeFieldBegin('salary_top', TType.I32, 4)
            oprot.writeI32(self.salary_top)
            oprot.writeFieldEnd()
        if self.salary_bottom is not None:
            oprot.writeFieldBegin('salary_bottom', TType.I32, 5)
            oprot.writeI32(self.salary_bottom)
            oprot.writeFieldEnd()
        if self.publish_date is not None:
            oprot.writeFieldBegin('publish_date', TType.STRING, 6)
            oprot.writeString(self.publish_date.encode('utf-8') if sys.version_info[0] == 2 else self.publish_date)
            oprot.writeFieldEnd()
        if self.department is not None:
            oprot.writeFieldBegin('department', TType.STRING, 7)
            oprot.writeString(self.department.encode('utf-8') if sys.version_info[0] == 2 else self.department)
            oprot.writeFieldEnd()
        if self.visitnum is not None:
            oprot.writeFieldBegin('visitnum', TType.I32, 8)
            oprot.writeI32(self.visitnum)
            oprot.writeFieldEnd()
        if self.in_hb is not None:
            oprot.writeFieldBegin('in_hb', TType.BOOL, 9)
            oprot.writeBool(self.in_hb)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 10)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.company_abbr is not None:
            oprot.writeFieldBegin('company_abbr', TType.STRING, 11)
            oprot.writeString(self.company_abbr.encode('utf-8') if sys.version_info[0] == 2 else self.company_abbr)
            oprot.writeFieldEnd()
        if self.company_logo is not None:
            oprot.writeFieldBegin('company_logo', TType.STRING, 12)
            oprot.writeString(self.company_logo.encode('utf-8') if sys.version_info[0] == 2 else self.company_logo)
            oprot.writeFieldEnd()
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 13)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        if self.is_new is not None:
            oprot.writeFieldBegin('is_new', TType.BOOL, 14)
            oprot.writeBool(self.is_new)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 15)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.publish_date is None:
            raise TProtocolException(message='Required field publish_date is unset!')
        if self.department is None:
            raise TProtocolException(message='Required field department is unset!')
        if self.visitnum is None:
            raise TProtocolException(message='Required field visitnum is unset!')
        if self.in_hb is None:
            raise TProtocolException(message='Required field in_hb is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        if self.company_abbr is None:
            raise TProtocolException(message='Required field company_abbr is unset!')
        if self.company_logo is None:
            raise TProtocolException(message='Required field company_logo is unset!')
        if self.company_name is None:
            raise TProtocolException(message='Required field company_name is unset!')
        if self.is_new is None:
            raise TProtocolException(message='Required field is_new is unset!')
        if self.city is None:
            raise TProtocolException(message='Required field city is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RpExtInfo(object):
    """
    Attributes:
     - pid
     - remain
     - employee_only
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pid', None, None, ),  # 1
        (2, TType.I32, 'remain', None, None, ),  # 2
        (3, TType.BOOL, 'employee_only', None, None, ),  # 3
    )

    def __init__(self, pid=None, remain=None, employee_only=None,):
        self.pid = pid
        self.remain = remain
        self.employee_only = employee_only

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.remain = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.employee_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RpExtInfo')
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.I32, 1)
            oprot.writeI32(self.pid)
            oprot.writeFieldEnd()
        if self.remain is not None:
            oprot.writeFieldBegin('remain', TType.I32, 2)
            oprot.writeI32(self.remain)
            oprot.writeFieldEnd()
        if self.employee_only is not None:
            oprot.writeFieldBegin('employee_only', TType.BOOL, 3)
            oprot.writeBool(self.employee_only)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.pid is None:
            raise TProtocolException(message='Required field pid is unset!')
        if self.remain is None:
            raise TProtocolException(message='Required field remain is unset!')
        if self.employee_only is None:
            raise TProtocolException(message='Required field employee_only is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WechatRpPositionListData(object):
    """
    Attributes:
     - id
     - title
     - fixed
     - salary_top
     - salary_bottom
     - publish_date
     - department
     - visitnum
     - in_hb
     - count
     - company_abbr
     - company_logo
     - company_name
     - is_new
     - remain
     - employee_only
     - city
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        (3, TType.BOOL, 'fixed', None, None, ),  # 3
        (4, TType.I32, 'salary_top', None, None, ),  # 4
        (5, TType.I32, 'salary_bottom', None, None, ),  # 5
        (6, TType.STRING, 'publish_date', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'department', 'UTF8', None, ),  # 7
        (8, TType.I32, 'visitnum', None, None, ),  # 8
        (9, TType.BOOL, 'in_hb', None, None, ),  # 9
        (10, TType.I32, 'count', None, None, ),  # 10
        (11, TType.STRING, 'company_abbr', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'company_logo', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'company_name', 'UTF8', None, ),  # 13
        (14, TType.BOOL, 'is_new', None, None, ),  # 14
        (15, TType.I32, 'remain', None, None, ),  # 15
        (16, TType.BOOL, 'employee_only', None, None, ),  # 16
        (17, TType.STRING, 'city', 'UTF8', None, ),  # 17
    )

    def __init__(self, id=None, title=None, fixed=None, salary_top=None, salary_bottom=None, publish_date=None, department=None, visitnum=None, in_hb=None, count=None, company_abbr=None, company_logo=None, company_name=None, is_new=None, remain=None, employee_only=None, city=None,):
        self.id = id
        self.title = title
        self.fixed = fixed
        self.salary_top = salary_top
        self.salary_bottom = salary_bottom
        self.publish_date = publish_date
        self.department = department
        self.visitnum = visitnum
        self.in_hb = in_hb
        self.count = count
        self.company_abbr = company_abbr
        self.company_logo = company_logo
        self.company_name = company_name
        self.is_new = is_new
        self.remain = remain
        self.employee_only = employee_only
        self.city = city

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.fixed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.salary_top = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.salary_bottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.publish_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.department = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.visitnum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.in_hb = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.company_abbr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.company_logo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.is_new = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.remain = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.employee_only = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WechatRpPositionListData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.fixed is not None:
            oprot.writeFieldBegin('fixed', TType.BOOL, 3)
            oprot.writeBool(self.fixed)
            oprot.writeFieldEnd()
        if self.salary_top is not None:
            oprot.writeFieldBegin('salary_top', TType.I32, 4)
            oprot.writeI32(self.salary_top)
            oprot.writeFieldEnd()
        if self.salary_bottom is not None:
            oprot.writeFieldBegin('salary_bottom', TType.I32, 5)
            oprot.writeI32(self.salary_bottom)
            oprot.writeFieldEnd()
        if self.publish_date is not None:
            oprot.writeFieldBegin('publish_date', TType.STRING, 6)
            oprot.writeString(self.publish_date.encode('utf-8') if sys.version_info[0] == 2 else self.publish_date)
            oprot.writeFieldEnd()
        if self.department is not None:
            oprot.writeFieldBegin('department', TType.STRING, 7)
            oprot.writeString(self.department.encode('utf-8') if sys.version_info[0] == 2 else self.department)
            oprot.writeFieldEnd()
        if self.visitnum is not None:
            oprot.writeFieldBegin('visitnum', TType.I32, 8)
            oprot.writeI32(self.visitnum)
            oprot.writeFieldEnd()
        if self.in_hb is not None:
            oprot.writeFieldBegin('in_hb', TType.BOOL, 9)
            oprot.writeBool(self.in_hb)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 10)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.company_abbr is not None:
            oprot.writeFieldBegin('company_abbr', TType.STRING, 11)
            oprot.writeString(self.company_abbr.encode('utf-8') if sys.version_info[0] == 2 else self.company_abbr)
            oprot.writeFieldEnd()
        if self.company_logo is not None:
            oprot.writeFieldBegin('company_logo', TType.STRING, 12)
            oprot.writeString(self.company_logo.encode('utf-8') if sys.version_info[0] == 2 else self.company_logo)
            oprot.writeFieldEnd()
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 13)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        if self.is_new is not None:
            oprot.writeFieldBegin('is_new', TType.BOOL, 14)
            oprot.writeBool(self.is_new)
            oprot.writeFieldEnd()
        if self.remain is not None:
            oprot.writeFieldBegin('remain', TType.I32, 15)
            oprot.writeI32(self.remain)
            oprot.writeFieldEnd()
        if self.employee_only is not None:
            oprot.writeFieldBegin('employee_only', TType.BOOL, 16)
            oprot.writeBool(self.employee_only)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 17)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.fixed is None:
            raise TProtocolException(message='Required field fixed is unset!')
        if self.publish_date is None:
            raise TProtocolException(message='Required field publish_date is unset!')
        if self.department is None:
            raise TProtocolException(message='Required field department is unset!')
        if self.visitnum is None:
            raise TProtocolException(message='Required field visitnum is unset!')
        if self.in_hb is None:
            raise TProtocolException(message='Required field in_hb is unset!')
        if self.count is None:
            raise TProtocolException(message='Required field count is unset!')
        if self.company_abbr is None:
            raise TProtocolException(message='Required field company_abbr is unset!')
        if self.company_logo is None:
            raise TProtocolException(message='Required field company_logo is unset!')
        if self.company_name is None:
            raise TProtocolException(message='Required field company_name is unset!')
        if self.is_new is None:
            raise TProtocolException(message='Required field is_new is unset!')
        if self.remain is None:
            raise TProtocolException(message='Required field remain is unset!')
        if self.employee_only is None:
            raise TProtocolException(message='Required field employee_only is unset!')
        if self.city is None:
            raise TProtocolException(message='Required field city is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WechatShareData(object):
    """
    Attributes:
     - cover
     - title
     - description
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'cover', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    )

    def __init__(self, cover=None, title=None, description=None,):
        self.cover = cover
        self.title = title
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cover = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('WechatShareData')
        if self.cover is not None:
            oprot.writeFieldBegin('cover', TType.STRING, 1)
            oprot.writeString(self.cover.encode('utf-8') if sys.version_info[0] == 2 else self.cover)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.cover is None:
            raise TProtocolException(message='Required field cover is unset!')
        if self.title is None:
            raise TProtocolException(message='Required field title is unset!')
        if self.description is None:
            raise TProtocolException(message='Required field description is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JobOccupationCustom(object):
    """
    Attributes:
     - id
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    )

    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('JobOccupationCustom')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThirdPartyPositionForSynchronization(object):
    """
    Attributes:
     - title
     - category_main_code
     - category_main
     - category_sub_code
     - category_sub
     - quantity
     - degree_code
     - degree
     - experience_code
     - experience
     - salary_low
     - salary_high
     - description
     - pub_place_code
     - position_id
     - work_place
     - email
     - stop_date
     - channel
     - type_code
     - job_id
     - pub_place_name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'category_main_code', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'category_main', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'category_sub_code', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'category_sub', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'quantity', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'degree_code', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'degree', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'experience_code', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'experience', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'salary_low', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'salary_high', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'description', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'pub_place_code', 'UTF8', None, ),  # 14
        (15, TType.I32, 'position_id', None, None, ),  # 15
        (16, TType.STRING, 'work_place', 'UTF8', None, ),  # 16
        (17, TType.STRING, 'email', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'stop_date', 'UTF8', None, ),  # 18
        (19, TType.I32, 'channel', None, None, ),  # 19
        (20, TType.STRING, 'type_code', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'job_id', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'pub_place_name', 'UTF8', None, ),  # 22
    )

    def __init__(self, title=None, category_main_code=None, category_main=None, category_sub_code=None, category_sub=None, quantity=None, degree_code=None, degree=None, experience_code=None, experience=None, salary_low=None, salary_high=None, description=None, pub_place_code=None, position_id=None, work_place=None, email=None, stop_date=None, channel=None, type_code=None, job_id=None, pub_place_name=None,):
        self.title = title
        self.category_main_code = category_main_code
        self.category_main = category_main
        self.category_sub_code = category_sub_code
        self.category_sub = category_sub
        self.quantity = quantity
        self.degree_code = degree_code
        self.degree = degree
        self.experience_code = experience_code
        self.experience = experience
        self.salary_low = salary_low
        self.salary_high = salary_high
        self.description = description
        self.pub_place_code = pub_place_code
        self.position_id = position_id
        self.work_place = work_place
        self.email = email
        self.stop_date = stop_date
        self.channel = channel
        self.type_code = type_code
        self.job_id = job_id
        self.pub_place_name = pub_place_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.category_main_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.category_main = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.category_sub_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.category_sub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.quantity = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.degree_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.degree = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.experience_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.experience = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.salary_low = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.salary_high = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.pub_place_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.work_place = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.stop_date = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.type_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.job_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.pub_place_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartyPositionForSynchronization')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.category_main_code is not None:
            oprot.writeFieldBegin('category_main_code', TType.STRING, 2)
            oprot.writeString(self.category_main_code.encode('utf-8') if sys.version_info[0] == 2 else self.category_main_code)
            oprot.writeFieldEnd()
        if self.category_main is not None:
            oprot.writeFieldBegin('category_main', TType.STRING, 3)
            oprot.writeString(self.category_main.encode('utf-8') if sys.version_info[0] == 2 else self.category_main)
            oprot.writeFieldEnd()
        if self.category_sub_code is not None:
            oprot.writeFieldBegin('category_sub_code', TType.STRING, 4)
            oprot.writeString(self.category_sub_code.encode('utf-8') if sys.version_info[0] == 2 else self.category_sub_code)
            oprot.writeFieldEnd()
        if self.category_sub is not None:
            oprot.writeFieldBegin('category_sub', TType.STRING, 5)
            oprot.writeString(self.category_sub.encode('utf-8') if sys.version_info[0] == 2 else self.category_sub)
            oprot.writeFieldEnd()
        if self.quantity is not None:
            oprot.writeFieldBegin('quantity', TType.STRING, 6)
            oprot.writeString(self.quantity.encode('utf-8') if sys.version_info[0] == 2 else self.quantity)
            oprot.writeFieldEnd()
        if self.degree_code is not None:
            oprot.writeFieldBegin('degree_code', TType.STRING, 7)
            oprot.writeString(self.degree_code.encode('utf-8') if sys.version_info[0] == 2 else self.degree_code)
            oprot.writeFieldEnd()
        if self.degree is not None:
            oprot.writeFieldBegin('degree', TType.STRING, 8)
            oprot.writeString(self.degree.encode('utf-8') if sys.version_info[0] == 2 else self.degree)
            oprot.writeFieldEnd()
        if self.experience_code is not None:
            oprot.writeFieldBegin('experience_code', TType.STRING, 9)
            oprot.writeString(self.experience_code.encode('utf-8') if sys.version_info[0] == 2 else self.experience_code)
            oprot.writeFieldEnd()
        if self.experience is not None:
            oprot.writeFieldBegin('experience', TType.STRING, 10)
            oprot.writeString(self.experience.encode('utf-8') if sys.version_info[0] == 2 else self.experience)
            oprot.writeFieldEnd()
        if self.salary_low is not None:
            oprot.writeFieldBegin('salary_low', TType.STRING, 11)
            oprot.writeString(self.salary_low.encode('utf-8') if sys.version_info[0] == 2 else self.salary_low)
            oprot.writeFieldEnd()
        if self.salary_high is not None:
            oprot.writeFieldBegin('salary_high', TType.STRING, 12)
            oprot.writeString(self.salary_high.encode('utf-8') if sys.version_info[0] == 2 else self.salary_high)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 13)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.pub_place_code is not None:
            oprot.writeFieldBegin('pub_place_code', TType.STRING, 14)
            oprot.writeString(self.pub_place_code.encode('utf-8') if sys.version_info[0] == 2 else self.pub_place_code)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 15)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.work_place is not None:
            oprot.writeFieldBegin('work_place', TType.STRING, 16)
            oprot.writeString(self.work_place.encode('utf-8') if sys.version_info[0] == 2 else self.work_place)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 17)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.stop_date is not None:
            oprot.writeFieldBegin('stop_date', TType.STRING, 18)
            oprot.writeString(self.stop_date.encode('utf-8') if sys.version_info[0] == 2 else self.stop_date)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 19)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        if self.type_code is not None:
            oprot.writeFieldBegin('type_code', TType.STRING, 20)
            oprot.writeString(self.type_code.encode('utf-8') if sys.version_info[0] == 2 else self.type_code)
            oprot.writeFieldEnd()
        if self.job_id is not None:
            oprot.writeFieldBegin('job_id', TType.STRING, 21)
            oprot.writeString(self.job_id.encode('utf-8') if sys.version_info[0] == 2 else self.job_id)
            oprot.writeFieldEnd()
        if self.pub_place_name is not None:
            oprot.writeFieldBegin('pub_place_name', TType.STRING, 22)
            oprot.writeString(self.pub_place_name.encode('utf-8') if sys.version_info[0] == 2 else self.pub_place_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThirdPartyPositionForSynchronizationWithAccount(object):
    """
    Attributes:
     - user_name
     - password
     - member_name
     - position_id
     - channel
     - position_info
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'user_name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'member_name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'position_id', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'channel', 'UTF8', None, ),  # 5
        (6, TType.STRUCT, 'position_info', (ThirdPartyPositionForSynchronization, ThirdPartyPositionForSynchronization.thrift_spec), None, ),  # 6
    )

    def __init__(self, user_name=None, password=None, member_name=None, position_id=None, channel=None, position_info=None,):
        self.user_name = user_name
        self.password = password
        self.member_name = member_name
        self.position_id = position_id
        self.channel = channel
        self.position_info = position_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.user_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.member_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.position_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.channel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.position_info = ThirdPartyPositionForSynchronization()
                    self.position_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartyPositionForSynchronizationWithAccount')
        if self.user_name is not None:
            oprot.writeFieldBegin('user_name', TType.STRING, 1)
            oprot.writeString(self.user_name.encode('utf-8') if sys.version_info[0] == 2 else self.user_name)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.member_name is not None:
            oprot.writeFieldBegin('member_name', TType.STRING, 3)
            oprot.writeString(self.member_name.encode('utf-8') if sys.version_info[0] == 2 else self.member_name)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.STRING, 4)
            oprot.writeString(self.position_id.encode('utf-8') if sys.version_info[0] == 2 else self.position_id)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.STRING, 5)
            oprot.writeString(self.channel.encode('utf-8') if sys.version_info[0] == 2 else self.channel)
            oprot.writeFieldEnd()
        if self.position_info is not None:
            oprot.writeFieldBegin('position_info', TType.STRUCT, 6)
            self.position_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
