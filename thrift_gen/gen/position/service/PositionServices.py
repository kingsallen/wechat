#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def getResources(self, query):
        """
        Parameters:
         - query
        """
        pass

    def getRecommendedPositions(self, pid):
        """
        Parameters:
         - pid
        """
        pass

    def verifyCustomize(self, positionId):
        """
        Parameters:
         - positionId
        """
        pass

    def getPositionById(self, positionId):
        """
        Parameters:
         - positionId
        """
        pass

    def CustomField(self, param):
        """
        Parameters:
         - param
        """
        pass

    def changeToThirdPartyPosition(self, form, position):
        """
        Parameters:
         - form
         - position
        """
        pass

    def createRefreshPosition(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        pass

    def ifAllowRefresh(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        pass

    def getThirdPartyPositions(self, query):
        """
        Parameters:
         - query
        """
        pass

    def getPositionList(self, query):
        """
        Parameters:
         - query
        """
        pass

    def getPositionListRpExt(self, pids):
        """
        Parameters:
         - pids
        """
        pass

    def getRpPositionList(self, hb_config_id):
        """
        Parameters:
         - hb_config_id
        """
        pass

    def getShareInfo(self, hb_config_id):
        """
        Parameters:
         - hb_config_id
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def getResources(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getResources(query)
        return future

    def send_getResources(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getResources', TMessageType.CALL, self._seqid)
        args = getResources_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getResources(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getResources_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getResources failed: unknown result")

    def getRecommendedPositions(self, pid):
        """
        Parameters:
         - pid
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getRecommendedPositions(pid)
        return future

    def send_getRecommendedPositions(self, pid):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getRecommendedPositions', TMessageType.CALL, self._seqid)
        args = getRecommendedPositions_args()
        args.pid = pid
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getRecommendedPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecommendedPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecommendedPositions failed: unknown result")

    def verifyCustomize(self, positionId):
        """
        Parameters:
         - positionId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_verifyCustomize(positionId)
        return future

    def send_verifyCustomize(self, positionId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('verifyCustomize', TMessageType.CALL, self._seqid)
        args = verifyCustomize_args()
        args.positionId = positionId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_verifyCustomize(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = verifyCustomize_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "verifyCustomize failed: unknown result")

    def getPositionById(self, positionId):
        """
        Parameters:
         - positionId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPositionById(positionId)
        return future

    def send_getPositionById(self, positionId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPositionById', TMessageType.CALL, self._seqid)
        args = getPositionById_args()
        args.positionId = positionId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPositionById(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPositionById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPositionById failed: unknown result")

    def CustomField(self, param):
        """
        Parameters:
         - param
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_CustomField(param)
        return future

    def send_CustomField(self, param):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('CustomField', TMessageType.CALL, self._seqid)
        args = CustomField_args()
        args.param = param
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_CustomField(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CustomField_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CustomField failed: unknown result")

    def changeToThirdPartyPosition(self, form, position):
        """
        Parameters:
         - form
         - position
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_changeToThirdPartyPosition(form, position)
        return future

    def send_changeToThirdPartyPosition(self, form, position):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('changeToThirdPartyPosition', TMessageType.CALL, self._seqid)
        args = changeToThirdPartyPosition_args()
        args.form = form
        args.position = position
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_changeToThirdPartyPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeToThirdPartyPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "changeToThirdPartyPosition failed: unknown result")

    def createRefreshPosition(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_createRefreshPosition(positionId, channel)
        return future

    def send_createRefreshPosition(self, positionId, channel):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('createRefreshPosition', TMessageType.CALL, self._seqid)
        args = createRefreshPosition_args()
        args.positionId = positionId
        args.channel = channel
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_createRefreshPosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createRefreshPosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createRefreshPosition failed: unknown result")

    def ifAllowRefresh(self, positionId, channel):
        """
        Parameters:
         - positionId
         - channel
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_ifAllowRefresh(positionId, channel)
        return future

    def send_ifAllowRefresh(self, positionId, channel):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('ifAllowRefresh', TMessageType.CALL, self._seqid)
        args = ifAllowRefresh_args()
        args.positionId = positionId
        args.channel = channel
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_ifAllowRefresh(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ifAllowRefresh_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ifAllowRefresh failed: unknown result")

    def getThirdPartyPositions(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getThirdPartyPositions(query)
        return future

    def send_getThirdPartyPositions(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getThirdPartyPositions', TMessageType.CALL, self._seqid)
        args = getThirdPartyPositions_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getThirdPartyPositions(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getThirdPartyPositions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getThirdPartyPositions failed: unknown result")

    def getPositionList(self, query):
        """
        Parameters:
         - query
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPositionList(query)
        return future

    def send_getPositionList(self, query):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPositionList', TMessageType.CALL, self._seqid)
        args = getPositionList_args()
        args.query = query
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPositionList(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPositionList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPositionList failed: unknown result")

    def getPositionListRpExt(self, pids):
        """
        Parameters:
         - pids
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getPositionListRpExt(pids)
        return future

    def send_getPositionListRpExt(self, pids):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getPositionListRpExt', TMessageType.CALL, self._seqid)
        args = getPositionListRpExt_args()
        args.pids = pids
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getPositionListRpExt(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPositionListRpExt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPositionListRpExt failed: unknown result")

    def getRpPositionList(self, hb_config_id):
        """
        Parameters:
         - hb_config_id
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getRpPositionList(hb_config_id)
        return future

    def send_getRpPositionList(self, hb_config_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getRpPositionList', TMessageType.CALL, self._seqid)
        args = getRpPositionList_args()
        args.hb_config_id = hb_config_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getRpPositionList(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRpPositionList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRpPositionList failed: unknown result")

    def getShareInfo(self, hb_config_id):
        """
        Parameters:
         - hb_config_id
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getShareInfo(hb_config_id)
        return future

    def send_getShareInfo(self, hb_config_id):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getShareInfo', TMessageType.CALL, self._seqid)
        args = getShareInfo_args()
        args.hb_config_id = hb_config_id
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getShareInfo(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getShareInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getShareInfo failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getResources"] = Processor.process_getResources
        self._processMap["getRecommendedPositions"] = Processor.process_getRecommendedPositions
        self._processMap["verifyCustomize"] = Processor.process_verifyCustomize
        self._processMap["getPositionById"] = Processor.process_getPositionById
        self._processMap["CustomField"] = Processor.process_CustomField
        self._processMap["changeToThirdPartyPosition"] = Processor.process_changeToThirdPartyPosition
        self._processMap["createRefreshPosition"] = Processor.process_createRefreshPosition
        self._processMap["ifAllowRefresh"] = Processor.process_ifAllowRefresh
        self._processMap["getThirdPartyPositions"] = Processor.process_getThirdPartyPositions
        self._processMap["getPositionList"] = Processor.process_getPositionList
        self._processMap["getPositionListRpExt"] = Processor.process_getPositionListRpExt
        self._processMap["getRpPositionList"] = Processor.process_getRpPositionList
        self._processMap["getShareInfo"] = Processor.process_getShareInfo

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_getResources(self, seqid, iprot, oprot):
        args = getResources_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getResources_result()
        result.success = yield gen.maybe_future(self._handler.getResources(args.query))
        oprot.writeMessageBegin("getResources", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getRecommendedPositions(self, seqid, iprot, oprot):
        args = getRecommendedPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecommendedPositions_result()
        result.success = yield gen.maybe_future(self._handler.getRecommendedPositions(args.pid))
        oprot.writeMessageBegin("getRecommendedPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_verifyCustomize(self, seqid, iprot, oprot):
        args = verifyCustomize_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = verifyCustomize_result()
        result.success = yield gen.maybe_future(self._handler.verifyCustomize(args.positionId))
        oprot.writeMessageBegin("verifyCustomize", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getPositionById(self, seqid, iprot, oprot):
        args = getPositionById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPositionById_result()
        result.success = yield gen.maybe_future(self._handler.getPositionById(args.positionId))
        oprot.writeMessageBegin("getPositionById", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_CustomField(self, seqid, iprot, oprot):
        args = CustomField_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CustomField_result()
        result.success = yield gen.maybe_future(self._handler.CustomField(args.param))
        oprot.writeMessageBegin("CustomField", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_changeToThirdPartyPosition(self, seqid, iprot, oprot):
        args = changeToThirdPartyPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeToThirdPartyPosition_result()
        result.success = yield gen.maybe_future(self._handler.changeToThirdPartyPosition(args.form, args.position))
        oprot.writeMessageBegin("changeToThirdPartyPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_createRefreshPosition(self, seqid, iprot, oprot):
        args = createRefreshPosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createRefreshPosition_result()
        result.success = yield gen.maybe_future(self._handler.createRefreshPosition(args.positionId, args.channel))
        oprot.writeMessageBegin("createRefreshPosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_ifAllowRefresh(self, seqid, iprot, oprot):
        args = ifAllowRefresh_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ifAllowRefresh_result()
        result.success = yield gen.maybe_future(self._handler.ifAllowRefresh(args.positionId, args.channel))
        oprot.writeMessageBegin("ifAllowRefresh", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getThirdPartyPositions(self, seqid, iprot, oprot):
        args = getThirdPartyPositions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getThirdPartyPositions_result()
        result.success = yield gen.maybe_future(self._handler.getThirdPartyPositions(args.query))
        oprot.writeMessageBegin("getThirdPartyPositions", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getPositionList(self, seqid, iprot, oprot):
        args = getPositionList_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPositionList_result()
        result.success = yield gen.maybe_future(self._handler.getPositionList(args.query))
        oprot.writeMessageBegin("getPositionList", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getPositionListRpExt(self, seqid, iprot, oprot):
        args = getPositionListRpExt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPositionListRpExt_result()
        result.success = yield gen.maybe_future(self._handler.getPositionListRpExt(args.pids))
        oprot.writeMessageBegin("getPositionListRpExt", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getRpPositionList(self, seqid, iprot, oprot):
        args = getRpPositionList_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRpPositionList_result()
        result.success = yield gen.maybe_future(self._handler.getRpPositionList(args.hb_config_id))
        oprot.writeMessageBegin("getRpPositionList", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getShareInfo(self, seqid, iprot, oprot):
        args = getShareInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getShareInfo_result()
        result.success = yield gen.maybe_future(self._handler.getShareInfo(args.hb_config_id))
        oprot.writeMessageBegin("getShareInfo", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class getResources_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getResources_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getResources_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getResources_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecommendedPositions_args(object):
    """
    Attributes:
     - pid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pid', None, None, ),  # 1
    )

    def __init__(self, pid=None,):
        self.pid = pid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecommendedPositions_args')
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.I32, 1)
            oprot.writeI32(self.pid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecommendedPositions_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecommendedPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verifyCustomize_args(object):
    """
    Attributes:
     - positionId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
    )

    def __init__(self, positionId=None,):
        self.positionId = positionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verifyCustomize_args')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class verifyCustomize_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('verifyCustomize_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionById_args(object):
    """
    Attributes:
     - positionId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
    )

    def __init__(self, positionId=None,):
        self.positionId = positionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionById_args')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionById_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionById_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CustomField_args(object):
    """
    Attributes:
     - param
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'param', 'UTF8', None, ),  # 1
    )

    def __init__(self, param=None,):
        self.param = param

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.param = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CustomField_args')
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 1)
            oprot.writeString(self.param.encode('utf-8') if sys.version_info[0] == 2 else self.param)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CustomField_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CustomField_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class changeToThirdPartyPosition_args(object):
    """
    Attributes:
     - form
     - position
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'form', (TType.STRUCT, (thrift_gen.gen.apps.positionbs.struct.ttypes.ThirdPartyPosition, thrift_gen.gen.apps.positionbs.struct.ttypes.ThirdPartyPosition.thrift_spec), False), None, ),  # 1
        (2, TType.STRUCT, 'position', (thrift_gen.gen.position.struct.ttypes.Position, thrift_gen.gen.position.struct.ttypes.Position.thrift_spec), None, ),  # 2
    )

    def __init__(self, form=None, position=None,):
        self.form = form
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.form = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = thrift_gen.gen.apps.positionbs.struct.ttypes.ThirdPartyPosition()
                        _elem5.read(iprot)
                        self.form.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.position = thrift_gen.gen.position.struct.ttypes.Position()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('changeToThirdPartyPosition_args')
        if self.form is not None:
            oprot.writeFieldBegin('form', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.form))
            for iter6 in self.form:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 2)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class changeToThirdPartyPosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronization, thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronization.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronization()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('changeToThirdPartyPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createRefreshPosition_args(object):
    """
    Attributes:
     - positionId
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
        (2, TType.I32, 'channel', None, None, ),  # 2
    )

    def __init__(self, positionId=None, channel=None,):
        self.positionId = positionId
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createRefreshPosition_args')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class createRefreshPosition_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronizationWithAccount, thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronizationWithAccount.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.position.struct.ttypes.ThirdPartyPositionForSynchronizationWithAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('createRefreshPosition_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifAllowRefresh_args(object):
    """
    Attributes:
     - positionId
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
        (2, TType.I32, 'channel', None, None, ),  # 2
    )

    def __init__(self, positionId=None, channel=None,):
        self.positionId = positionId
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.channel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifAllowRefresh_args')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.I32, 2)
            oprot.writeI32(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ifAllowRefresh_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ifAllowRefresh_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getThirdPartyPositions_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.common.struct.ttypes.CommonQuery, thrift_gen.gen.common.struct.ttypes.CommonQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.common.struct.ttypes.CommonQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getThirdPartyPositions_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getThirdPartyPositions_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData, thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = thrift_gen.gen.dao.struct.dao.ttypes.ThirdPartyPositionData()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getThirdPartyPositions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionList_args(object):
    """
    Attributes:
     - query
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'query', (thrift_gen.gen.position.struct.ttypes.WechatPositionListQuery, thrift_gen.gen.position.struct.ttypes.WechatPositionListQuery.thrift_spec), None, ),  # 1
    )

    def __init__(self, query=None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = thrift_gen.gen.position.struct.ttypes.WechatPositionListQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionList_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionList_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.position.struct.ttypes.WechatPositionListData, thrift_gen.gen.position.struct.ttypes.WechatPositionListData.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = thrift_gen.gen.position.struct.ttypes.WechatPositionListData()
                        _elem26.read(iprot)
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionList_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter27 in self.success:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionListRpExt_args(object):
    """
    Attributes:
     - pids
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'pids', (TType.I32, None, False), None, ),  # 1
    )

    def __init__(self, pids=None,):
        self.pids = pids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.pids = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readI32()
                        self.pids.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionListRpExt_args')
        if self.pids is not None:
            oprot.writeFieldBegin('pids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.pids))
            for iter34 in self.pids:
                oprot.writeI32(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPositionListRpExt_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.position.struct.ttypes.RpExtInfo, thrift_gen.gen.position.struct.ttypes.RpExtInfo.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = thrift_gen.gen.position.struct.ttypes.RpExtInfo()
                        _elem40.read(iprot)
                        self.success.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPositionListRpExt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter41 in self.success:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRpPositionList_args(object):
    """
    Attributes:
     - hb_config_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hb_config_id', None, None, ),  # 1
    )

    def __init__(self, hb_config_id=None,):
        self.hb_config_id = hb_config_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hb_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRpPositionList_args')
        if self.hb_config_id is not None:
            oprot.writeFieldBegin('hb_config_id', TType.I32, 1)
            oprot.writeI32(self.hb_config_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRpPositionList_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (thrift_gen.gen.position.struct.ttypes.WechatRpPositionListData, thrift_gen.gen.position.struct.ttypes.WechatRpPositionListData.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = thrift_gen.gen.position.struct.ttypes.WechatRpPositionListData()
                        _elem47.read(iprot)
                        self.success.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRpPositionList_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter48 in self.success:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getShareInfo_args(object):
    """
    Attributes:
     - hb_config_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hb_config_id', None, None, ),  # 1
    )

    def __init__(self, hb_config_id=None,):
        self.hb_config_id = hb_config_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hb_config_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getShareInfo_args')
        if self.hb_config_id is not None:
            oprot.writeFieldBegin('hb_config_id', TType.I32, 1)
            oprot.writeI32(self.hb_config_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getShareInfo_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.position.struct.ttypes.WechatShareData, thrift_gen.gen.position.struct.ttypes.WechatShareData.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.position.struct.ttypes.WechatShareData()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getShareInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
