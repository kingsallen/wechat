#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.searchcondition.service.searchservice import UserQxService
from thrift_gen.gen.searchcondition.service.searchservice.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  UserSearchConditionListVO userSearchConditionList(i32 userId)')
    print('  UserSearchConditionVO postUserSearchCondition(UserSearchConditionDO userSearchCondition)')
    print('  UserSearchConditionVO delUserSearchCondition(i32 userId, i32 id)')
    print('  UserCollectPositionVO getUserCollectPosition(i32 userId, i32 positionId)')
    print('  UserCollectPositionVO postUserCollectPosition(i32 userId, i32 positionId)')
    print('  UserCollectPositionListVO getUserCollectPositions(i32 userId)')
    print('  UserCollectPositionVO delUserCollectPosition(i32 userId, i32 positionId)')
    print('  UserPositionStatusVO getUserPositionStatus(i32 userId,  positionIds)')
    print('  UserViewedPositionVO userViewedPosition(i32 userId, i32 positionId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UserQxService.Client(protocol)
transport.open()

if cmd == 'userSearchConditionList':
    if len(args) != 1:
        print('userSearchConditionList requires 1 args')
        sys.exit(1)
    pp.pprint(client.userSearchConditionList(eval(args[0]),))

elif cmd == 'postUserSearchCondition':
    if len(args) != 1:
        print('postUserSearchCondition requires 1 args')
        sys.exit(1)
    pp.pprint(client.postUserSearchCondition(eval(args[0]),))

elif cmd == 'delUserSearchCondition':
    if len(args) != 2:
        print('delUserSearchCondition requires 2 args')
        sys.exit(1)
    pp.pprint(client.delUserSearchCondition(eval(args[0]), eval(args[1]),))

elif cmd == 'getUserCollectPosition':
    if len(args) != 2:
        print('getUserCollectPosition requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserCollectPosition(eval(args[0]), eval(args[1]),))

elif cmd == 'postUserCollectPosition':
    if len(args) != 2:
        print('postUserCollectPosition requires 2 args')
        sys.exit(1)
    pp.pprint(client.postUserCollectPosition(eval(args[0]), eval(args[1]),))

elif cmd == 'getUserCollectPositions':
    if len(args) != 1:
        print('getUserCollectPositions requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserCollectPositions(eval(args[0]),))

elif cmd == 'delUserCollectPosition':
    if len(args) != 2:
        print('delUserCollectPosition requires 2 args')
        sys.exit(1)
    pp.pprint(client.delUserCollectPosition(eval(args[0]), eval(args[1]),))

elif cmd == 'getUserPositionStatus':
    if len(args) != 2:
        print('getUserPositionStatus requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserPositionStatus(eval(args[0]), eval(args[1]),))

elif cmd == 'userViewedPosition':
    if len(args) != 2:
        print('userViewedPosition requires 2 args')
        sys.exit(1)
    pp.pprint(client.userViewedPosition(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
