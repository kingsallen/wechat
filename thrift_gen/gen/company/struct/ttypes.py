#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Hrcompany(object):
    """
    Attributes:
     - id
     - type
     - name
     - introduction
     - scale
     - address
     - property
     - industry
     - homepage
     - logo
     - abbreviation
     - impression
     - banner
     - parent_id
     - hraccount_id
     - disable
     - create_time
     - update_time
     - source
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'introduction', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'scale', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'address', 'UTF8', None, ),  # 6
        (7, TType.I32, 'property', None, None, ),  # 7
        (8, TType.STRING, 'industry', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'homepage', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'logo', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'abbreviation', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'impression', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'banner', 'UTF8', None, ),  # 13
        (14, TType.I32, 'parent_id', None, None, ),  # 14
        (15, TType.I32, 'hraccount_id', None, None, ),  # 15
        (16, TType.I32, 'disable', None, None, ),  # 16
        (17, TType.STRING, 'create_time', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'update_time', 'UTF8', None, ),  # 18
        (19, TType.I32, 'source', None, None, ),  # 19
    )

    def __init__(self, id=None, type=None, name=None, introduction=None, scale=None, address=None, property=None, industry=None, homepage=None, logo=None, abbreviation=None, impression=None, banner=None, parent_id=None, hraccount_id=None, disable=None, create_time=None, update_time=None, source=None,):
        self.id = id
        self.type = type
        self.name = name
        self.introduction = introduction
        self.scale = scale
        self.address = address
        self.property = property
        self.industry = industry
        self.homepage = homepage
        self.logo = logo
        self.abbreviation = abbreviation
        self.impression = impression
        self.banner = banner
        self.parent_id = parent_id
        self.hraccount_id = hraccount_id
        self.disable = disable
        self.create_time = create_time
        self.update_time = update_time
        self.source = source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.introduction = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.scale = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.property = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.industry = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.homepage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.logo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.abbreviation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.impression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.banner = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.parent_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.hraccount_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.disable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Hrcompany')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.introduction is not None:
            oprot.writeFieldBegin('introduction', TType.STRING, 4)
            oprot.writeString(self.introduction.encode('utf-8') if sys.version_info[0] == 2 else self.introduction)
            oprot.writeFieldEnd()
        if self.scale is not None:
            oprot.writeFieldBegin('scale', TType.STRING, 5)
            oprot.writeString(self.scale.encode('utf-8') if sys.version_info[0] == 2 else self.scale)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 6)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.property is not None:
            oprot.writeFieldBegin('property', TType.I32, 7)
            oprot.writeI32(self.property)
            oprot.writeFieldEnd()
        if self.industry is not None:
            oprot.writeFieldBegin('industry', TType.STRING, 8)
            oprot.writeString(self.industry.encode('utf-8') if sys.version_info[0] == 2 else self.industry)
            oprot.writeFieldEnd()
        if self.homepage is not None:
            oprot.writeFieldBegin('homepage', TType.STRING, 9)
            oprot.writeString(self.homepage.encode('utf-8') if sys.version_info[0] == 2 else self.homepage)
            oprot.writeFieldEnd()
        if self.logo is not None:
            oprot.writeFieldBegin('logo', TType.STRING, 10)
            oprot.writeString(self.logo.encode('utf-8') if sys.version_info[0] == 2 else self.logo)
            oprot.writeFieldEnd()
        if self.abbreviation is not None:
            oprot.writeFieldBegin('abbreviation', TType.STRING, 11)
            oprot.writeString(self.abbreviation.encode('utf-8') if sys.version_info[0] == 2 else self.abbreviation)
            oprot.writeFieldEnd()
        if self.impression is not None:
            oprot.writeFieldBegin('impression', TType.STRING, 12)
            oprot.writeString(self.impression.encode('utf-8') if sys.version_info[0] == 2 else self.impression)
            oprot.writeFieldEnd()
        if self.banner is not None:
            oprot.writeFieldBegin('banner', TType.STRING, 13)
            oprot.writeString(self.banner.encode('utf-8') if sys.version_info[0] == 2 else self.banner)
            oprot.writeFieldEnd()
        if self.parent_id is not None:
            oprot.writeFieldBegin('parent_id', TType.I32, 14)
            oprot.writeI32(self.parent_id)
            oprot.writeFieldEnd()
        if self.hraccount_id is not None:
            oprot.writeFieldBegin('hraccount_id', TType.I32, 15)
            oprot.writeI32(self.hraccount_id)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.I32, 16)
            oprot.writeI32(self.disable)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 17)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 18)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.I32, 19)
            oprot.writeI32(self.source)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CompanyForVerifyEmployee(object):
    """
    Attributes:
     - id
     - name
     - abbreviation
     - signature
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'abbreviation', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'signature', 'UTF8', None, ),  # 4
    )

    def __init__(self, id=None, name=None, abbreviation=None, signature=None,):
        self.id = id
        self.name = name
        self.abbreviation = abbreviation
        self.signature = signature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.abbreviation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.signature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CompanyForVerifyEmployee')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.abbreviation is not None:
            oprot.writeFieldBegin('abbreviation', TType.STRING, 3)
            oprot.writeString(self.abbreviation.encode('utf-8') if sys.version_info[0] == 2 else self.abbreviation)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 4)
            oprot.writeString(self.signature.encode('utf-8') if sys.version_info[0] == 2 else self.signature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
