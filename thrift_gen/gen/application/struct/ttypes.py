#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class JobApplication(object):
    """
    Attributes:
     - id
     - wechat_id
     - position_id
     - recommender_id
     - submit_time
     - status_id
     - l_application_id
     - reward
     - source_id
     - applier_id
     - ats_status
     - applier_name
     - disable
     - routine
     - is_viewed
     - not_suitable
     - company_id
     - app_tpl_id
     - _create_time
     - update_time
     - proxy
     - apply_type
     - email_status
     - recommender_user_id
     - view_count
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'id', None, None, ),  # 1
        (2, TType.I64, 'wechat_id', None, None, ),  # 2
        (3, TType.I64, 'position_id', None, None, ),  # 3
        (4, TType.I64, 'recommender_id', None, None, ),  # 4
        (5, TType.STRING, 'submit_time', 'UTF8', None, ),  # 5
        (6, TType.I64, 'status_id', None, None, ),  # 6
        (7, TType.I64, 'l_application_id', None, None, ),  # 7
        (8, TType.I64, 'reward', None, None, ),  # 8
        (9, TType.I64, 'source_id', None, None, ),  # 9
        (10, TType.I64, 'applier_id', None, None, ),  # 10
        (11, TType.I32, 'ats_status', None, None, ),  # 11
        (12, TType.STRING, 'applier_name', 'UTF8', None, ),  # 12
        (13, TType.I32, 'disable', None, None, ),  # 13
        (14, TType.I32, 'routine', None, None, ),  # 14
        (15, TType.I32, 'is_viewed', None, None, ),  # 15
        (16, TType.I32, 'not_suitable', None, None, ),  # 16
        (17, TType.I64, 'company_id', None, None, ),  # 17
        (18, TType.I32, 'app_tpl_id', None, None, ),  # 18
        (19, TType.STRING, '_create_time', 'UTF8', None, ),  # 19
        (20, TType.STRING, 'update_time', 'UTF8', None, ),  # 20
        (21, TType.I32, 'proxy', None, None, ),  # 21
        (22, TType.I32, 'apply_type', None, None, ),  # 22
        (23, TType.I32, 'email_status', None, None, ),  # 23
        (24, TType.I64, 'recommender_user_id', None, None, ),  # 24
        (25, TType.I32, 'view_count', None, None, ),  # 25
    )

    def __init__(self, id=None, wechat_id=None, position_id=None, recommender_id=None, submit_time=None, status_id=None, l_application_id=None, reward=None, source_id=None, applier_id=None, ats_status=None, applier_name=None, disable=None, routine=None, is_viewed=None, not_suitable=None, company_id=None, app_tpl_id=None, _create_time=None, update_time=None, proxy=None, apply_type=None, email_status=None, recommender_user_id=None, view_count=None,):
        self.id = id
        self.wechat_id = wechat_id
        self.position_id = position_id
        self.recommender_id = recommender_id
        self.submit_time = submit_time
        self.status_id = status_id
        self.l_application_id = l_application_id
        self.reward = reward
        self.source_id = source_id
        self.applier_id = applier_id
        self.ats_status = ats_status
        self.applier_name = applier_name
        self.disable = disable
        self.routine = routine
        self.is_viewed = is_viewed
        self.not_suitable = not_suitable
        self.company_id = company_id
        self.app_tpl_id = app_tpl_id
        self._create_time = _create_time
        self.update_time = update_time
        self.proxy = proxy
        self.apply_type = apply_type
        self.email_status = email_status
        self.recommender_user_id = recommender_user_id
        self.view_count = view_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.wechat_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.position_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.recommender_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.submit_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.status_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.l_application_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.reward = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.source_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.applier_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.ats_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.applier_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.disable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.routine = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.is_viewed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.not_suitable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.company_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.app_tpl_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self._create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.proxy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.apply_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.email_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.recommender_user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.view_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('JobApplication')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.wechat_id is not None:
            oprot.writeFieldBegin('wechat_id', TType.I64, 2)
            oprot.writeI64(self.wechat_id)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I64, 3)
            oprot.writeI64(self.position_id)
            oprot.writeFieldEnd()
        if self.recommender_id is not None:
            oprot.writeFieldBegin('recommender_id', TType.I64, 4)
            oprot.writeI64(self.recommender_id)
            oprot.writeFieldEnd()
        if self.submit_time is not None:
            oprot.writeFieldBegin('submit_time', TType.STRING, 5)
            oprot.writeString(self.submit_time.encode('utf-8') if sys.version_info[0] == 2 else self.submit_time)
            oprot.writeFieldEnd()
        if self.status_id is not None:
            oprot.writeFieldBegin('status_id', TType.I64, 6)
            oprot.writeI64(self.status_id)
            oprot.writeFieldEnd()
        if self.l_application_id is not None:
            oprot.writeFieldBegin('l_application_id', TType.I64, 7)
            oprot.writeI64(self.l_application_id)
            oprot.writeFieldEnd()
        if self.reward is not None:
            oprot.writeFieldBegin('reward', TType.I64, 8)
            oprot.writeI64(self.reward)
            oprot.writeFieldEnd()
        if self.source_id is not None:
            oprot.writeFieldBegin('source_id', TType.I64, 9)
            oprot.writeI64(self.source_id)
            oprot.writeFieldEnd()
        if self.applier_id is not None:
            oprot.writeFieldBegin('applier_id', TType.I64, 10)
            oprot.writeI64(self.applier_id)
            oprot.writeFieldEnd()
        if self.ats_status is not None:
            oprot.writeFieldBegin('ats_status', TType.I32, 11)
            oprot.writeI32(self.ats_status)
            oprot.writeFieldEnd()
        if self.applier_name is not None:
            oprot.writeFieldBegin('applier_name', TType.STRING, 12)
            oprot.writeString(self.applier_name.encode('utf-8') if sys.version_info[0] == 2 else self.applier_name)
            oprot.writeFieldEnd()
        if self.disable is not None:
            oprot.writeFieldBegin('disable', TType.I32, 13)
            oprot.writeI32(self.disable)
            oprot.writeFieldEnd()
        if self.routine is not None:
            oprot.writeFieldBegin('routine', TType.I32, 14)
            oprot.writeI32(self.routine)
            oprot.writeFieldEnd()
        if self.is_viewed is not None:
            oprot.writeFieldBegin('is_viewed', TType.I32, 15)
            oprot.writeI32(self.is_viewed)
            oprot.writeFieldEnd()
        if self.not_suitable is not None:
            oprot.writeFieldBegin('not_suitable', TType.I32, 16)
            oprot.writeI32(self.not_suitable)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I64, 17)
            oprot.writeI64(self.company_id)
            oprot.writeFieldEnd()
        if self.app_tpl_id is not None:
            oprot.writeFieldBegin('app_tpl_id', TType.I32, 18)
            oprot.writeI32(self.app_tpl_id)
            oprot.writeFieldEnd()
        if self._create_time is not None:
            oprot.writeFieldBegin('_create_time', TType.STRING, 19)
            oprot.writeString(self._create_time.encode('utf-8') if sys.version_info[0] == 2 else self._create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 20)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        if self.proxy is not None:
            oprot.writeFieldBegin('proxy', TType.I32, 21)
            oprot.writeI32(self.proxy)
            oprot.writeFieldEnd()
        if self.apply_type is not None:
            oprot.writeFieldBegin('apply_type', TType.I32, 22)
            oprot.writeI32(self.apply_type)
            oprot.writeFieldEnd()
        if self.email_status is not None:
            oprot.writeFieldBegin('email_status', TType.I32, 23)
            oprot.writeI32(self.email_status)
            oprot.writeFieldEnd()
        if self.recommender_user_id is not None:
            oprot.writeFieldBegin('recommender_user_id', TType.I64, 24)
            oprot.writeI64(self.recommender_user_id)
            oprot.writeFieldEnd()
        if self.view_count is not None:
            oprot.writeFieldBegin('view_count', TType.I32, 25)
            oprot.writeI32(self.view_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JobResumeOther(object):
    """
    Attributes:
     - app_id
     - other
     - create_time
     - update_time
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'app_id', None, None, ),  # 1
        (2, TType.STRING, 'other', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'create_time', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'update_time', 'UTF8', None, ),  # 4
    )

    def __init__(self, app_id=None, other=None, create_time=None, update_time=None,):
        self.app_id = app_id
        self.other = other
        self.create_time = create_time
        self.update_time = update_time

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.app_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.other = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.update_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('JobResumeOther')
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.I64, 1)
            oprot.writeI64(self.app_id)
            oprot.writeFieldEnd()
        if self.other is not None:
            oprot.writeFieldBegin('other', TType.STRING, 2)
            oprot.writeString(self.other.encode('utf-8') if sys.version_info[0] == 2 else self.other)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 3)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.update_time is not None:
            oprot.writeFieldBegin('update_time', TType.STRING, 4)
            oprot.writeString(self.update_time.encode('utf-8') if sys.version_info[0] == 2 else self.update_time)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProcessValidationStruct(object):
    """
    Attributes:
     - id
     - company_id
     - recommender_id
     - recruit_order
     - template_id
     - reward
     - applier_id
     - applier_name
     - position_name
     - recommender_user_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'company_id', None, None, ),  # 2
        (3, TType.I32, 'recommender_id', None, None, ),  # 3
        (4, TType.I32, 'recruit_order', None, None, ),  # 4
        (5, TType.I32, 'template_id', None, None, ),  # 5
        (6, TType.I64, 'reward', None, None, ),  # 6
        (7, TType.I32, 'applier_id', None, None, ),  # 7
        (8, TType.STRING, 'applier_name', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'position_name', 'UTF8', None, ),  # 9
        (10, TType.I32, 'recommender_user_id', None, None, ),  # 10
    )

    def __init__(self, id=None, company_id=None, recommender_id=None, recruit_order=None, template_id=None, reward=None, applier_id=None, applier_name=None, position_name=None, recommender_user_id=None,):
        self.id = id
        self.company_id = company_id
        self.recommender_id = recommender_id
        self.recruit_order = recruit_order
        self.template_id = template_id
        self.reward = reward
        self.applier_id = applier_id
        self.applier_name = applier_name
        self.position_name = position_name
        self.recommender_user_id = recommender_user_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.recommender_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.recruit_order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.template_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.reward = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.applier_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.applier_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.position_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.recommender_user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProcessValidationStruct')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 2)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.recommender_id is not None:
            oprot.writeFieldBegin('recommender_id', TType.I32, 3)
            oprot.writeI32(self.recommender_id)
            oprot.writeFieldEnd()
        if self.recruit_order is not None:
            oprot.writeFieldBegin('recruit_order', TType.I32, 4)
            oprot.writeI32(self.recruit_order)
            oprot.writeFieldEnd()
        if self.template_id is not None:
            oprot.writeFieldBegin('template_id', TType.I32, 5)
            oprot.writeI32(self.template_id)
            oprot.writeFieldEnd()
        if self.reward is not None:
            oprot.writeFieldBegin('reward', TType.I64, 6)
            oprot.writeI64(self.reward)
            oprot.writeFieldEnd()
        if self.applier_id is not None:
            oprot.writeFieldBegin('applier_id', TType.I32, 7)
            oprot.writeI32(self.applier_id)
            oprot.writeFieldEnd()
        if self.applier_name is not None:
            oprot.writeFieldBegin('applier_name', TType.STRING, 8)
            oprot.writeString(self.applier_name.encode('utf-8') if sys.version_info[0] == 2 else self.applier_name)
            oprot.writeFieldEnd()
        if self.position_name is not None:
            oprot.writeFieldBegin('position_name', TType.STRING, 9)
            oprot.writeString(self.position_name.encode('utf-8') if sys.version_info[0] == 2 else self.position_name)
            oprot.writeFieldEnd()
        if self.recommender_user_id is not None:
            oprot.writeFieldBegin('recommender_user_id', TType.I32, 10)
            oprot.writeI32(self.recommender_user_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApplicationAts(object):
    """
    Attributes:
     - company_id
     - account_id
     - application_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'company_id', None, None, ),  # 1
        (2, TType.I32, 'account_id', None, None, ),  # 2
        (3, TType.I32, 'application_id', None, None, ),  # 3
    )

    def __init__(self, company_id=None, account_id=None, application_id=None,):
        self.company_id = company_id
        self.account_id = account_id
        self.application_id = application_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.company_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.application_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ApplicationAts')
        if self.company_id is not None:
            oprot.writeFieldBegin('company_id', TType.I32, 1)
            oprot.writeI32(self.company_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        if self.application_id is not None:
            oprot.writeFieldBegin('application_id', TType.I32, 3)
            oprot.writeI32(self.application_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
