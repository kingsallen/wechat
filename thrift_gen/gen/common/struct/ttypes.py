#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class Response(object):
    """
    Attributes:
     - status
     - message
     - data
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'status', None, None, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'data', 'UTF8', None, ),  # 3
    )

    def __init__(self, status=None, message=None, data=None,):
        self.status = status
        self.message = message
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Response')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 3)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommonQuery(object):
    """
    Attributes:
     - appid
     - page
     - per_page
     - sortby
     - order
     - fields
     - nocache
     - equalFilter
     - attributes
     - grouops
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'appid', None, None, ),  # 1
        (2, TType.I32, 'page', None, None, ),  # 2
        (3, TType.I32, 'per_page', None, None, ),  # 3
        (4, TType.STRING, 'sortby', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'order', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'fields', 'UTF8', None, ),  # 6
        (7, TType.BOOL, 'nocache', None, False, ),  # 7
        (8, TType.MAP, 'equalFilter', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
        (9, TType.LIST, 'attributes', (TType.STRING, 'UTF8', False), None, ),  # 9
        (10, TType.LIST, 'grouops', (TType.STRING, 'UTF8', False), None, ),  # 10
    )

    def __init__(self, appid=None, page=None, per_page=None, sortby=None, order=None, fields=None, nocache=thrift_spec[7][4], equalFilter=None, attributes=None, grouops=None,):
        self.appid = appid
        self.page = page
        self.per_page = per_page
        self.sortby = sortby
        self.order = order
        self.fields = fields
        self.nocache = nocache
        self.equalFilter = equalFilter
        self.attributes = attributes
        self.grouops = grouops

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.page = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.per_page = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sortby = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.order = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fields = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.nocache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.equalFilter = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.equalFilter[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.attributes = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.attributes.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.grouops = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.grouops.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CommonQuery')
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 1)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.page is not None:
            oprot.writeFieldBegin('page', TType.I32, 2)
            oprot.writeI32(self.page)
            oprot.writeFieldEnd()
        if self.per_page is not None:
            oprot.writeFieldBegin('per_page', TType.I32, 3)
            oprot.writeI32(self.per_page)
            oprot.writeFieldEnd()
        if self.sortby is not None:
            oprot.writeFieldBegin('sortby', TType.STRING, 4)
            oprot.writeString(self.sortby.encode('utf-8') if sys.version_info[0] == 2 else self.sortby)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.STRING, 5)
            oprot.writeString(self.order.encode('utf-8') if sys.version_info[0] == 2 else self.order)
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.STRING, 6)
            oprot.writeString(self.fields.encode('utf-8') if sys.version_info[0] == 2 else self.fields)
            oprot.writeFieldEnd()
        if self.nocache is not None:
            oprot.writeFieldBegin('nocache', TType.BOOL, 7)
            oprot.writeBool(self.nocache)
            oprot.writeFieldEnd()
        if self.equalFilter is not None:
            oprot.writeFieldBegin('equalFilter', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.equalFilter))
            for kiter19, viter20 in self.equalFilter.items():
                oprot.writeString(kiter19.encode('utf-8') if sys.version_info[0] == 2 else kiter19)
                oprot.writeString(viter20.encode('utf-8') if sys.version_info[0] == 2 else viter20)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.attributes))
            for iter21 in self.attributes:
                oprot.writeString(iter21.encode('utf-8') if sys.version_info[0] == 2 else iter21)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.grouops is not None:
            oprot.writeFieldBegin('grouops', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.grouops))
            for iter22 in self.grouops:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
