#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ThirdPartyPosition(object):
    """
    Attributes:
     - salary_top
     - salary_bottom
     - count
     - address
     - use_company_address
     - occupation_level1
     - occupation_level2
     - channel
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'salary_top', None, None, ),  # 1
        (2, TType.I32, 'salary_bottom', None, None, ),  # 2
        (3, TType.I32, 'count', None, None, ),  # 3
        (4, TType.STRING, 'address', 'UTF8', None, ),  # 4
        (5, TType.BOOL, 'use_company_address', None, None, ),  # 5
        (6, TType.STRING, 'occupation_level1', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'occupation_level2', 'UTF8', None, ),  # 7
        (8, TType.BYTE, 'channel', None, None, ),  # 8
    )

    def __init__(self, salary_top=None, salary_bottom=None, count=None, address=None, use_company_address=None, occupation_level1=None, occupation_level2=None, channel=None,):
        self.salary_top = salary_top
        self.salary_bottom = salary_bottom
        self.count = count
        self.address = address
        self.use_company_address = use_company_address
        self.occupation_level1 = occupation_level1
        self.occupation_level2 = occupation_level2
        self.channel = channel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.salary_top = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.salary_bottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.use_company_address = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.occupation_level1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.occupation_level2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.channel = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartyPosition')
        if self.salary_top is not None:
            oprot.writeFieldBegin('salary_top', TType.I32, 1)
            oprot.writeI32(self.salary_top)
            oprot.writeFieldEnd()
        if self.salary_bottom is not None:
            oprot.writeFieldBegin('salary_bottom', TType.I32, 2)
            oprot.writeI32(self.salary_bottom)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 4)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.use_company_address is not None:
            oprot.writeFieldBegin('use_company_address', TType.BOOL, 5)
            oprot.writeBool(self.use_company_address)
            oprot.writeFieldEnd()
        if self.occupation_level1 is not None:
            oprot.writeFieldBegin('occupation_level1', TType.STRING, 6)
            oprot.writeString(self.occupation_level1.encode('utf-8') if sys.version_info[0] == 2 else self.occupation_level1)
            oprot.writeFieldEnd()
        if self.occupation_level2 is not None:
            oprot.writeFieldBegin('occupation_level2', TType.STRING, 7)
            oprot.writeString(self.occupation_level2.encode('utf-8') if sys.version_info[0] == 2 else self.occupation_level2)
            oprot.writeFieldEnd()
        if self.channel is not None:
            oprot.writeFieldBegin('channel', TType.BYTE, 8)
            oprot.writeByte(self.channel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThirdPartyPositionForm(object):
    """
    Attributes:
     - position_id
     - appid
     - channels
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'position_id', None, None, ),  # 1
        (2, TType.I32, 'appid', None, None, ),  # 2
        (3, TType.LIST, 'channels', (TType.STRUCT, (ThirdPartyPosition, ThirdPartyPosition.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, position_id=None, appid=None, channels=None,):
        self.position_id = position_id
        self.appid = appid
        self.channels = channels

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.appid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.channels = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ThirdPartyPosition()
                        _elem5.read(iprot)
                        self.channels.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ThirdPartyPositionForm')
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 1)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.appid is not None:
            oprot.writeFieldBegin('appid', TType.I32, 2)
            oprot.writeI32(self.appid)
            oprot.writeFieldEnd()
        if self.channels is not None:
            oprot.writeFieldBegin('channels', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.channels))
            for iter6 in self.channels:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
