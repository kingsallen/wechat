#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def listHRChatRoom(self, hrId, pageNo, pageSize):
        """
        Parameters:
         - hrId
         - pageNo
         - pageSize
        """
        pass

    def listUserChatRoom(self, userId, pageNo, pageSize):
        """
        Parameters:
         - userId
         - pageNo
         - pageSize
        """
        pass

    def listChatLogs(self, roomId, pageNo, pageSize):
        """
        Parameters:
         - roomId
         - pageNo
         - pageSize
        """
        pass

    def saveChat(self, roomId, content, positionId, speaker):
        """
        Parameters:
         - roomId
         - content
         - positionId
         - speaker
        """
        pass

    def enterRoom(self, userId, hrId, positionId, roomId):
        """
        Parameters:
         - userId
         - hrId
         - positionId
         - roomId
        """
        pass

    def getChat(self, roomId, speaker):
        """
        Parameters:
         - roomId
         - speaker
        """
        pass

    def leaveChatRoom(self, roomId, speaker):
        """
        Parameters:
         - roomId
         - speaker
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def listHRChatRoom(self, hrId, pageNo, pageSize):
        """
        Parameters:
         - hrId
         - pageNo
         - pageSize
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_listHRChatRoom(hrId, pageNo, pageSize)
        return future

    def send_listHRChatRoom(self, hrId, pageNo, pageSize):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('listHRChatRoom', TMessageType.CALL, self._seqid)
        args = listHRChatRoom_args()
        args.hrId = hrId
        args.pageNo = pageNo
        args.pageSize = pageSize
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_listHRChatRoom(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listHRChatRoom_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listHRChatRoom failed: unknown result")

    def listUserChatRoom(self, userId, pageNo, pageSize):
        """
        Parameters:
         - userId
         - pageNo
         - pageSize
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_listUserChatRoom(userId, pageNo, pageSize)
        return future

    def send_listUserChatRoom(self, userId, pageNo, pageSize):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('listUserChatRoom', TMessageType.CALL, self._seqid)
        args = listUserChatRoom_args()
        args.userId = userId
        args.pageNo = pageNo
        args.pageSize = pageSize
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_listUserChatRoom(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listUserChatRoom_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listUserChatRoom failed: unknown result")

    def listChatLogs(self, roomId, pageNo, pageSize):
        """
        Parameters:
         - roomId
         - pageNo
         - pageSize
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_listChatLogs(roomId, pageNo, pageSize)
        return future

    def send_listChatLogs(self, roomId, pageNo, pageSize):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('listChatLogs', TMessageType.CALL, self._seqid)
        args = listChatLogs_args()
        args.roomId = roomId
        args.pageNo = pageNo
        args.pageSize = pageSize
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_listChatLogs(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listChatLogs_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listChatLogs failed: unknown result")

    def saveChat(self, roomId, content, positionId, speaker):
        """
        Parameters:
         - roomId
         - content
         - positionId
         - speaker
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_saveChat(roomId, content, positionId, speaker)
        return future

    def send_saveChat(self, roomId, content, positionId, speaker):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('saveChat', TMessageType.CALL, self._seqid)
        args = saveChat_args()
        args.roomId = roomId
        args.content = content
        args.positionId = positionId
        args.speaker = speaker
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_saveChat(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = saveChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def enterRoom(self, userId, hrId, positionId, roomId):
        """
        Parameters:
         - userId
         - hrId
         - positionId
         - roomId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_enterRoom(userId, hrId, positionId, roomId)
        return future

    def send_enterRoom(self, userId, hrId, positionId, roomId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('enterRoom', TMessageType.CALL, self._seqid)
        args = enterRoom_args()
        args.userId = userId
        args.hrId = hrId
        args.positionId = positionId
        args.roomId = roomId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_enterRoom(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = enterRoom_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "enterRoom failed: unknown result")

    def getChat(self, roomId, speaker):
        """
        Parameters:
         - roomId
         - speaker
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_getChat(roomId, speaker)
        return future

    def send_getChat(self, roomId, speaker):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('getChat', TMessageType.CALL, self._seqid)
        args = getChat_args()
        args.roomId = roomId
        args.speaker = speaker
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_getChat(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getChat_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getChat failed: unknown result")

    def leaveChatRoom(self, roomId, speaker):
        """
        Parameters:
         - roomId
         - speaker
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_leaveChatRoom(roomId, speaker)
        return future

    def send_leaveChatRoom(self, roomId, speaker):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('leaveChatRoom', TMessageType.CALL, self._seqid)
        args = leaveChatRoom_args()
        args.roomId = roomId
        args.speaker = speaker
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_leaveChatRoom(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = leaveChatRoom_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["listHRChatRoom"] = Processor.process_listHRChatRoom
        self._processMap["listUserChatRoom"] = Processor.process_listUserChatRoom
        self._processMap["listChatLogs"] = Processor.process_listChatLogs
        self._processMap["saveChat"] = Processor.process_saveChat
        self._processMap["enterRoom"] = Processor.process_enterRoom
        self._processMap["getChat"] = Processor.process_getChat
        self._processMap["leaveChatRoom"] = Processor.process_leaveChatRoom

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_listHRChatRoom(self, seqid, iprot, oprot):
        args = listHRChatRoom_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listHRChatRoom_result()
        try:
            result.success = yield gen.maybe_future(self._handler.listHRChatRoom(args.hrId, args.pageNo, args.pageSize))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("listHRChatRoom", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_listUserChatRoom(self, seqid, iprot, oprot):
        args = listUserChatRoom_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listUserChatRoom_result()
        try:
            result.success = yield gen.maybe_future(self._handler.listUserChatRoom(args.userId, args.pageNo, args.pageSize))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("listUserChatRoom", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_listChatLogs(self, seqid, iprot, oprot):
        args = listChatLogs_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listChatLogs_result()
        try:
            result.success = yield gen.maybe_future(self._handler.listChatLogs(args.roomId, args.pageNo, args.pageSize))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("listChatLogs", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_saveChat(self, seqid, iprot, oprot):
        args = saveChat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = saveChat_result()
        try:
            yield gen.maybe_future(self._handler.saveChat(args.roomId, args.content, args.positionId, args.speaker))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("saveChat", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_enterRoom(self, seqid, iprot, oprot):
        args = enterRoom_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = enterRoom_result()
        try:
            result.success = yield gen.maybe_future(self._handler.enterRoom(args.userId, args.hrId, args.positionId, args.roomId))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("enterRoom", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_getChat(self, seqid, iprot, oprot):
        args = getChat_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getChat_result()
        try:
            result.success = yield gen.maybe_future(self._handler.getChat(args.roomId, args.speaker))
        except thrift_gen.gen.common.struct.ttypes.CURDException as e:
            result.e = e
        oprot.writeMessageBegin("getChat", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_leaveChatRoom(self, seqid, iprot, oprot):
        args = leaveChatRoom_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = leaveChatRoom_result()
        yield gen.maybe_future(self._handler.leaveChatRoom(args.roomId, args.speaker))
        oprot.writeMessageBegin("leaveChatRoom", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class listHRChatRoom_args(object):
    """
    Attributes:
     - hrId
     - pageNo
     - pageSize
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrId', None, None, ),  # 1
        (2, TType.I32, 'pageNo', None, None, ),  # 2
        (3, TType.I32, 'pageSize', None, None, ),  # 3
    )

    def __init__(self, hrId=None, pageNo=None, pageSize=None,):
        self.hrId = hrId
        self.pageNo = pageNo
        self.pageSize = pageSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listHRChatRoom_args')
        if self.hrId is not None:
            oprot.writeFieldBegin('hrId', TType.I32, 1)
            oprot.writeI32(self.hrId)
            oprot.writeFieldEnd()
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 2)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 3)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listHRChatRoom_result(object):
    """
    Attributes:
     - success
     - e
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.chat.struct.ttypes.HRChatRoomsVO, thrift_gen.gen.chat.struct.ttypes.HRChatRoomsVO.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.chat.struct.ttypes.HRChatRoomsVO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listHRChatRoom_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listUserChatRoom_args(object):
    """
    Attributes:
     - userId
     - pageNo
     - pageSize
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.I32, 'pageNo', None, None, ),  # 2
        (3, TType.I32, 'pageSize', None, None, ),  # 3
    )

    def __init__(self, userId=None, pageNo=None, pageSize=None,):
        self.userId = userId
        self.pageNo = pageNo
        self.pageSize = pageSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listUserChatRoom_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 2)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 3)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listUserChatRoom_result(object):
    """
    Attributes:
     - success
     - e
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.chat.struct.ttypes.UserChatRoomsVO, thrift_gen.gen.chat.struct.ttypes.UserChatRoomsVO.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.chat.struct.ttypes.UserChatRoomsVO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listUserChatRoom_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listChatLogs_args(object):
    """
    Attributes:
     - roomId
     - pageNo
     - pageSize
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'roomId', None, None, ),  # 1
        (2, TType.I32, 'pageNo', None, None, ),  # 2
        (3, TType.I32, 'pageSize', None, None, ),  # 3
    )

    def __init__(self, roomId=None, pageNo=None, pageSize=None,):
        self.roomId = roomId
        self.pageNo = pageNo
        self.pageSize = pageSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listChatLogs_args')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 2)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 3)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class listChatLogs_result(object):
    """
    Attributes:
     - success
     - e
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.chat.struct.ttypes.ChatsVO, thrift_gen.gen.chat.struct.ttypes.ChatsVO.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.chat.struct.ttypes.ChatsVO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('listChatLogs_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveChat_args(object):
    """
    Attributes:
     - roomId
     - content
     - positionId
     - speaker
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'roomId', None, None, ),  # 1
        (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
        (3, TType.I32, 'positionId', None, None, ),  # 3
        (4, TType.BYTE, 'speaker', None, None, ),  # 4
    )

    def __init__(self, roomId=None, content=None, positionId=None, speaker=None,):
        self.roomId = roomId
        self.content = content
        self.positionId = positionId
        self.speaker = speaker

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.speaker = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveChat_args')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 3)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.speaker is not None:
            oprot.writeFieldBegin('speaker', TType.BYTE, 4)
            oprot.writeByte(self.speaker)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveChat_result(object):
    """
    Attributes:
     - e
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveChat_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enterRoom_args(object):
    """
    Attributes:
     - userId
     - hrId
     - positionId
     - roomId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.I32, 'hrId', None, None, ),  # 2
        (3, TType.I32, 'positionId', None, None, ),  # 3
        (4, TType.I32, 'roomId', None, None, ),  # 4
    )

    def __init__(self, userId=None, hrId=None, positionId=None, roomId=None,):
        self.userId = userId
        self.hrId = hrId
        self.positionId = positionId
        self.roomId = roomId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hrId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enterRoom_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.hrId is not None:
            oprot.writeFieldBegin('hrId', TType.I32, 2)
            oprot.writeI32(self.hrId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 3)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 4)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class enterRoom_result(object):
    """
    Attributes:
     - success
     - e
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.chat.struct.ttypes.ResultOfSaveRoomVO, thrift_gen.gen.chat.struct.ttypes.ResultOfSaveRoomVO.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.chat.struct.ttypes.ResultOfSaveRoomVO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('enterRoom_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getChat_args(object):
    """
    Attributes:
     - roomId
     - speaker
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'roomId', None, None, ),  # 1
        (2, TType.BYTE, 'speaker', None, None, ),  # 2
    )

    def __init__(self, roomId=None, speaker=None,):
        self.roomId = roomId
        self.speaker = speaker

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.speaker = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getChat_args')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.speaker is not None:
            oprot.writeFieldBegin('speaker', TType.BYTE, 2)
            oprot.writeByte(self.speaker)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getChat_result(object):
    """
    Attributes:
     - success
     - e
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.chat.struct.ttypes.ChatVO, thrift_gen.gen.chat.struct.ttypes.ChatVO.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'e', (thrift_gen.gen.common.struct.ttypes.CURDException, thrift_gen.gen.common.struct.ttypes.CURDException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.chat.struct.ttypes.ChatVO()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = thrift_gen.gen.common.struct.ttypes.CURDException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getChat_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class leaveChatRoom_args(object):
    """
    Attributes:
     - roomId
     - speaker
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'roomId', None, None, ),  # 1
        (2, TType.BYTE, 'speaker', None, None, ),  # 2
    )

    def __init__(self, roomId=None, speaker=None,):
        self.roomId = roomId
        self.speaker = speaker

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.speaker = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('leaveChatRoom_args')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.speaker is not None:
            oprot.writeFieldBegin('speaker', TType.BYTE, 2)
            oprot.writeByte(self.speaker)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class leaveChatRoom_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('leaveChatRoom_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
