#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.chat.service import ChatService
from thrift_gen.gen.chat.service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  HRChatRoomsVO listHRChatRoom(i32 hrId, i32 pageNo, i32 pageSize)')
    print('  UserChatRoomsVO listUserChatRoom(i32 userId, i32 pageNo, i32 pageSize)')
    print('  ChatsVO listChatLogs(i32 roomId, i32 pageNo, i32 pageSize)')
    print('  void saveChat(i32 roomId, string content, i32 positionId, i8 speaker, i8 origin)')
    print('  ResultOfSaveRoomVO enterRoom(i32 userId, i32 hrId, i32 positionId, i32 roomId, bool is_gamma)')
    print('  ChatVO getChat(i32 roomId, i8 speaker)')
    print('  void leaveChatRoom(i32 roomId, i8 speaker)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ChatService.Client(protocol)
transport.open()

if cmd == 'listHRChatRoom':
    if len(args) != 3:
        print('listHRChatRoom requires 3 args')
        sys.exit(1)
    pp.pprint(client.listHRChatRoom(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'listUserChatRoom':
    if len(args) != 3:
        print('listUserChatRoom requires 3 args')
        sys.exit(1)
    pp.pprint(client.listUserChatRoom(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'listChatLogs':
    if len(args) != 3:
        print('listChatLogs requires 3 args')
        sys.exit(1)
    pp.pprint(client.listChatLogs(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'saveChat':
    if len(args) != 5:
        print('saveChat requires 5 args')
        sys.exit(1)
    pp.pprint(client.saveChat(eval(args[0]), args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'enterRoom':
    if len(args) != 5:
        print('enterRoom requires 5 args')
        sys.exit(1)
    pp.pprint(client.enterRoom(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'getChat':
    if len(args) != 2:
        print('getChat requires 2 args')
        sys.exit(1)
    pp.pprint(client.getChat(eval(args[0]), eval(args[1]),))

elif cmd == 'leaveChatRoom':
    if len(args) != 2:
        print('leaveChatRoom requires 2 args')
        sys.exit(1)
    pp.pprint(client.leaveChatRoom(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
