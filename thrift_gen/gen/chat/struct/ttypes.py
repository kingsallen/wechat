#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class HRChatRoomVO(object):
    """
    Attributes:
     - id
     - userId
     - name
     - headImgUrl
     - createTime
     - status
     - unReadNum
     - apply
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'userId', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'headImgUrl', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'createTime', 'UTF8', None, ),  # 5
        (6, TType.I32, 'status', None, None, ),  # 6
        (7, TType.I32, 'unReadNum', None, None, ),  # 7
        (8, TType.BOOL, 'apply', None, None, ),  # 8
    )

    def __init__(self, id=None, userId=None, name=None, headImgUrl=None, createTime=None, status=None, unReadNum=None, apply=None,):
        self.id = id
        self.userId = userId
        self.name = name
        self.headImgUrl = headImgUrl
        self.createTime = createTime
        self.status = status
        self.unReadNum = unReadNum
        self.apply = apply

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.headImgUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unReadNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.apply = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRChatRoomVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 2)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.headImgUrl is not None:
            oprot.writeFieldBegin('headImgUrl', TType.STRING, 4)
            oprot.writeString(self.headImgUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headImgUrl)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 5)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.unReadNum is not None:
            oprot.writeFieldBegin('unReadNum', TType.I32, 7)
            oprot.writeI32(self.unReadNum)
            oprot.writeFieldEnd()
        if self.apply is not None:
            oprot.writeFieldBegin('apply', TType.BOOL, 8)
            oprot.writeBool(self.apply)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HRChatRoomsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - rooms
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'rooms', (TType.STRUCT, (HRChatRoomVO, HRChatRoomVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, rooms=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.rooms = rooms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.rooms = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = HRChatRoomVO()
                        _elem5.read(iprot)
                        self.rooms.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRChatRoomsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.rooms))
            for iter6 in self.rooms:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HRChatRoomsIndexVO(object):
    """
    Attributes:
     - userId
     - pageSize
     - totalRow
     - rooms
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalRow', None, None, ),  # 3
        (4, TType.LIST, 'rooms', (TType.STRUCT, (HRChatRoomVO, HRChatRoomVO.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, userId=None, pageSize=None, totalRow=None, rooms=None,):
        self.userId = userId
        self.pageSize = pageSize
        self.totalRow = totalRow
        self.rooms = rooms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.rooms = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = HRChatRoomVO()
                        _elem12.read(iprot)
                        self.rooms.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRChatRoomsIndexVO')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 3)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.rooms))
            for iter13 in self.rooms:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserChatRoomVO(object):
    """
    Attributes:
     - id
     - hrId
     - name
     - headImgUrl
     - companyName
     - companyLogo
     - createTime
     - status
     - unReadNum
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'hrId', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'headImgUrl', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'companyName', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'companyLogo', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'createTime', 'UTF8', None, ),  # 7
        (8, TType.I32, 'status', None, None, ),  # 8
        (9, TType.I32, 'unReadNum', None, None, ),  # 9
    )

    def __init__(self, id=None, hrId=None, name=None, headImgUrl=None, companyName=None, companyLogo=None, createTime=None, status=None, unReadNum=None,):
        self.id = id
        self.hrId = hrId
        self.name = name
        self.headImgUrl = headImgUrl
        self.companyName = companyName
        self.companyLogo = companyLogo
        self.createTime = createTime
        self.status = status
        self.unReadNum = unReadNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hrId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.headImgUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.companyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.companyLogo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.unReadNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserChatRoomVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.hrId is not None:
            oprot.writeFieldBegin('hrId', TType.I32, 2)
            oprot.writeI32(self.hrId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.headImgUrl is not None:
            oprot.writeFieldBegin('headImgUrl', TType.STRING, 4)
            oprot.writeString(self.headImgUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headImgUrl)
            oprot.writeFieldEnd()
        if self.companyName is not None:
            oprot.writeFieldBegin('companyName', TType.STRING, 5)
            oprot.writeString(self.companyName.encode('utf-8') if sys.version_info[0] == 2 else self.companyName)
            oprot.writeFieldEnd()
        if self.companyLogo is not None:
            oprot.writeFieldBegin('companyLogo', TType.STRING, 6)
            oprot.writeString(self.companyLogo.encode('utf-8') if sys.version_info[0] == 2 else self.companyLogo)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 7)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.unReadNum is not None:
            oprot.writeFieldBegin('unReadNum', TType.I32, 9)
            oprot.writeI32(self.unReadNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserChatRoomsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - rooms
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'rooms', (TType.STRUCT, (UserChatRoomVO, UserChatRoomVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, rooms=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.rooms = rooms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.rooms = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = UserChatRoomVO()
                        _elem19.read(iprot)
                        self.rooms.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserChatRoomsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.rooms))
            for iter20 in self.rooms:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatVO(object):
    """
    Attributes:
     - serverId
     - content
     - speaker
     - origin
     - origin_str
     - msgType
     - assetUrl
     - btnContent
     - roomId
     - positionId
     - duration
     - id
     - createTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serverId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
        (3, TType.BYTE, 'speaker', None, None, ),  # 3
        (4, TType.BYTE, 'origin', None, None, ),  # 4
        (5, TType.STRING, 'origin_str', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'msgType', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'assetUrl', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'btnContent', 'UTF8', None, ),  # 8
        (9, TType.I32, 'roomId', None, None, ),  # 9
        (10, TType.I32, 'positionId', None, None, ),  # 10
        (11, TType.BYTE, 'duration', None, None, ),  # 11
        (12, TType.I32, 'id', None, None, ),  # 12
        (13, TType.STRING, 'createTime', 'UTF8', None, ),  # 13
    )

    def __init__(self, serverId=None, content=None, speaker=None, origin=None, origin_str=None, msgType=None, assetUrl=None, btnContent=None, roomId=None, positionId=None, duration=None, id=None, createTime=None,):
        self.serverId = serverId
        self.content = content
        self.speaker = speaker
        self.origin = origin
        self.origin_str = origin_str
        self.msgType = msgType
        self.assetUrl = assetUrl
        self.btnContent = btnContent
        self.roomId = roomId
        self.positionId = positionId
        self.duration = duration
        self.id = id
        self.createTime = createTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.speaker = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.origin = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.origin_str = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.msgType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.assetUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.btnContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BYTE:
                    self.duration = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChatVO')
        if self.serverId is not None:
            oprot.writeFieldBegin('serverId', TType.STRING, 1)
            oprot.writeString(self.serverId.encode('utf-8') if sys.version_info[0] == 2 else self.serverId)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.speaker is not None:
            oprot.writeFieldBegin('speaker', TType.BYTE, 3)
            oprot.writeByte(self.speaker)
            oprot.writeFieldEnd()
        if self.origin is not None:
            oprot.writeFieldBegin('origin', TType.BYTE, 4)
            oprot.writeByte(self.origin)
            oprot.writeFieldEnd()
        if self.origin_str is not None:
            oprot.writeFieldBegin('origin_str', TType.STRING, 5)
            oprot.writeString(self.origin_str.encode('utf-8') if sys.version_info[0] == 2 else self.origin_str)
            oprot.writeFieldEnd()
        if self.msgType is not None:
            oprot.writeFieldBegin('msgType', TType.STRING, 6)
            oprot.writeString(self.msgType.encode('utf-8') if sys.version_info[0] == 2 else self.msgType)
            oprot.writeFieldEnd()
        if self.assetUrl is not None:
            oprot.writeFieldBegin('assetUrl', TType.STRING, 7)
            oprot.writeString(self.assetUrl.encode('utf-8') if sys.version_info[0] == 2 else self.assetUrl)
            oprot.writeFieldEnd()
        if self.btnContent is not None:
            oprot.writeFieldBegin('btnContent', TType.STRING, 8)
            oprot.writeString(self.btnContent.encode('utf-8') if sys.version_info[0] == 2 else self.btnContent)
            oprot.writeFieldEnd()
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 9)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 10)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.BYTE, 11)
            oprot.writeByte(self.duration)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 12)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 13)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatHistory(object):
    """
    Attributes:
     - conversationId
     - hasMore
     - chatList
     - hrLeaveTime
     - userId
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'conversationId', None, None, ),  # 1
        (2, TType.BOOL, 'hasMore', None, None, ),  # 2
        (3, TType.LIST, 'chatList', (TType.STRUCT, (ChatVO, ChatVO.thrift_spec), False), None, ),  # 3
        (4, TType.STRING, 'hrLeaveTime', 'UTF8', None, ),  # 4
        (5, TType.I32, 'userId', None, None, ),  # 5
        (6, TType.STRING, 'name', 'UTF8', None, ),  # 6
    )

    def __init__(self, conversationId=None, hasMore=None, chatList=None, hrLeaveTime=None, userId=None, name=None,):
        self.conversationId = conversationId
        self.hasMore = hasMore
        self.chatList = chatList
        self.hrLeaveTime = hrLeaveTime
        self.userId = userId
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.conversationId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasMore = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.chatList = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = ChatVO()
                        _elem26.read(iprot)
                        self.chatList.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hrLeaveTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChatHistory')
        if self.conversationId is not None:
            oprot.writeFieldBegin('conversationId', TType.I32, 1)
            oprot.writeI32(self.conversationId)
            oprot.writeFieldEnd()
        if self.hasMore is not None:
            oprot.writeFieldBegin('hasMore', TType.BOOL, 2)
            oprot.writeBool(self.hasMore)
            oprot.writeFieldEnd()
        if self.chatList is not None:
            oprot.writeFieldBegin('chatList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.chatList))
            for iter27 in self.chatList:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hrLeaveTime is not None:
            oprot.writeFieldBegin('hrLeaveTime', TType.STRING, 4)
            oprot.writeString(self.hrLeaveTime.encode('utf-8') if sys.version_info[0] == 2 else self.hrLeaveTime)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 5)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 6)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - chatLogs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'chatLogs', (TType.STRUCT, (ChatVO, ChatVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, chatLogs=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.chatLogs = chatLogs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.chatLogs = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ChatVO()
                        _elem33.read(iprot)
                        self.chatLogs.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChatsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.chatLogs is not None:
            oprot.writeFieldBegin('chatLogs', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.chatLogs))
            for iter34 in self.chatLogs:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HrVO(object):
    """
    Attributes:
     - hrId
     - hrName
     - hrHeadImg
     - isDelete
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'hrId', None, None, ),  # 1
        (2, TType.STRING, 'hrName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'hrHeadImg', 'UTF8', None, ),  # 3
        (4, TType.BOOL, 'isDelete', None, None, ),  # 4
    )

    def __init__(self, hrId=None, hrName=None, hrHeadImg=None, isDelete=None,):
        self.hrId = hrId
        self.hrName = hrName
        self.hrHeadImg = hrHeadImg
        self.isDelete = isDelete

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.hrId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hrName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hrHeadImg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isDelete = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HrVO')
        if self.hrId is not None:
            oprot.writeFieldBegin('hrId', TType.I32, 1)
            oprot.writeI32(self.hrId)
            oprot.writeFieldEnd()
        if self.hrName is not None:
            oprot.writeFieldBegin('hrName', TType.STRING, 2)
            oprot.writeString(self.hrName.encode('utf-8') if sys.version_info[0] == 2 else self.hrName)
            oprot.writeFieldEnd()
        if self.hrHeadImg is not None:
            oprot.writeFieldBegin('hrHeadImg', TType.STRING, 3)
            oprot.writeString(self.hrHeadImg.encode('utf-8') if sys.version_info[0] == 2 else self.hrHeadImg)
            oprot.writeFieldEnd()
        if self.isDelete is not None:
            oprot.writeFieldBegin('isDelete', TType.BOOL, 4)
            oprot.writeBool(self.isDelete)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserVO(object):
    """
    Attributes:
     - userId
     - userName
     - userHeadImg
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.STRING, 'userName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'userHeadImg', 'UTF8', None, ),  # 3
    )

    def __init__(self, userId=None, userName=None, userHeadImg=None,):
        self.userId = userId
        self.userName = userName
        self.userHeadImg = userHeadImg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userHeadImg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserVO')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 2)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.userHeadImg is not None:
            oprot.writeFieldBegin('userHeadImg', TType.STRING, 3)
            oprot.writeString(self.userHeadImg.encode('utf-8') if sys.version_info[0] == 2 else self.userHeadImg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PositionVO(object):
    """
    Attributes:
     - positionId
     - positionTitle
     - companyName
     - city
     - salaryTop
     - salaryBottom
     - updateTime
     - status
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'positionId', None, None, ),  # 1
        (2, TType.STRING, 'positionTitle', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'companyName', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'city', 'UTF8', None, ),  # 4
        (5, TType.I32, 'salaryTop', None, None, ),  # 5
        (6, TType.I32, 'salaryBottom', None, None, ),  # 6
        (7, TType.STRING, 'updateTime', 'UTF8', None, ),  # 7
        (8, TType.I32, 'status', None, None, ),  # 8
    )

    def __init__(self, positionId=None, positionTitle=None, companyName=None, city=None, salaryTop=None, salaryBottom=None, updateTime=None, status=None,):
        self.positionId = positionId
        self.positionTitle = positionTitle
        self.companyName = companyName
        self.city = city
        self.salaryTop = salaryTop
        self.salaryBottom = salaryBottom
        self.updateTime = updateTime
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.positionTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.companyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.salaryTop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.salaryBottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.updateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PositionVO')
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 1)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.positionTitle is not None:
            oprot.writeFieldBegin('positionTitle', TType.STRING, 2)
            oprot.writeString(self.positionTitle.encode('utf-8') if sys.version_info[0] == 2 else self.positionTitle)
            oprot.writeFieldEnd()
        if self.companyName is not None:
            oprot.writeFieldBegin('companyName', TType.STRING, 3)
            oprot.writeString(self.companyName.encode('utf-8') if sys.version_info[0] == 2 else self.companyName)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 4)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.salaryTop is not None:
            oprot.writeFieldBegin('salaryTop', TType.I32, 5)
            oprot.writeI32(self.salaryTop)
            oprot.writeFieldEnd()
        if self.salaryBottom is not None:
            oprot.writeFieldBegin('salaryBottom', TType.I32, 6)
            oprot.writeI32(self.salaryBottom)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.STRING, 7)
            oprot.writeString(self.updateTime.encode('utf-8') if sys.version_info[0] == 2 else self.updateTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResultOfSaveRoomVO(object):
    """
    Attributes:
     - roomId
     - chatDebut
     - position
     - user
     - hr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'roomId', None, None, ),  # 1
        (2, TType.BOOL, 'chatDebut', None, None, ),  # 2
        (3, TType.STRUCT, 'position', (PositionVO, PositionVO.thrift_spec), None, ),  # 3
        (4, TType.STRUCT, 'user', (UserVO, UserVO.thrift_spec), None, ),  # 4
        (5, TType.STRUCT, 'hr', (HrVO, HrVO.thrift_spec), None, ),  # 5
    )

    def __init__(self, roomId=None, chatDebut=None, position=None, user=None, hr=None,):
        self.roomId = roomId
        self.chatDebut = chatDebut
        self.position = position
        self.user = user
        self.hr = hr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.roomId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.chatDebut = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.position = PositionVO()
                    self.position.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.user = UserVO()
                    self.user.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.hr = HrVO()
                    self.hr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ResultOfSaveRoomVO')
        if self.roomId is not None:
            oprot.writeFieldBegin('roomId', TType.I32, 1)
            oprot.writeI32(self.roomId)
            oprot.writeFieldEnd()
        if self.chatDebut is not None:
            oprot.writeFieldBegin('chatDebut', TType.BOOL, 2)
            oprot.writeBool(self.chatDebut)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRUCT, 3)
            self.position.write(oprot)
            oprot.writeFieldEnd()
        if self.user is not None:
            oprot.writeFieldBegin('user', TType.STRUCT, 4)
            self.user.write(oprot)
            oprot.writeFieldEnd()
        if self.hr is not None:
            oprot.writeFieldBegin('hr', TType.STRUCT, 5)
            self.hr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
