#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class HRChatRoomVO(object):
    """
    Attributes:
     - id
     - userId
     - name
     - headImgUrl
     - createTime
     - status
     - unReadNum
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'userId', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'headImgUrl', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'createTime', 'UTF8', None, ),  # 5
        (6, TType.I32, 'status', None, None, ),  # 6
        (7, TType.I32, 'unReadNum', None, None, ),  # 7
    )

    def __init__(self, id=None, userId=None, name=None, headImgUrl=None, createTime=None, status=None, unReadNum=None,):
        self.id = id
        self.userId = userId
        self.name = name
        self.headImgUrl = headImgUrl
        self.createTime = createTime
        self.status = status
        self.unReadNum = unReadNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.headImgUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unReadNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRChatRoomVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 2)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.headImgUrl is not None:
            oprot.writeFieldBegin('headImgUrl', TType.STRING, 4)
            oprot.writeString(self.headImgUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headImgUrl)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 5)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.unReadNum is not None:
            oprot.writeFieldBegin('unReadNum', TType.I32, 7)
            oprot.writeI32(self.unReadNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HRChatRoomsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - rooms
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'rooms', (TType.STRUCT, (HRChatRoomVO, HRChatRoomVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, rooms=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.rooms = rooms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.rooms = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = HRChatRoomVO()
                        _elem5.read(iprot)
                        self.rooms.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HRChatRoomsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.rooms))
            for iter6 in self.rooms:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserChatRoomVO(object):
    """
    Attributes:
     - id
     - userId
     - name
     - headImgUrl
     - createTime
     - status
     - unReadNum
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'userId', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'headImgUrl', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'createTime', 'UTF8', None, ),  # 5
        (6, TType.I32, 'status', None, None, ),  # 6
        (7, TType.I32, 'unReadNum', None, None, ),  # 7
    )

    def __init__(self, id=None, userId=None, name=None, headImgUrl=None, createTime=None, status=None, unReadNum=None,):
        self.id = id
        self.userId = userId
        self.name = name
        self.headImgUrl = headImgUrl
        self.createTime = createTime
        self.status = status
        self.unReadNum = unReadNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.headImgUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.unReadNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserChatRoomVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 2)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.headImgUrl is not None:
            oprot.writeFieldBegin('headImgUrl', TType.STRING, 4)
            oprot.writeString(self.headImgUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headImgUrl)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 5)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 6)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.unReadNum is not None:
            oprot.writeFieldBegin('unReadNum', TType.I32, 7)
            oprot.writeI32(self.unReadNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserChatRoomsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - rooms
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'rooms', (TType.STRUCT, (UserChatRoomVO, UserChatRoomVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, rooms=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.rooms = rooms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.rooms = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = UserChatRoomVO()
                        _elem12.read(iprot)
                        self.rooms.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UserChatRoomsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.rooms is not None:
            oprot.writeFieldBegin('rooms', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.rooms))
            for iter13 in self.rooms:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatVO(object):
    """
    Attributes:
     - id
     - content
     - create_time
     - speaker
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'create_time', 'UTF8', None, ),  # 3
        (4, TType.BYTE, 'speaker', None, None, ),  # 4
    )

    def __init__(self, id=None, content=None, create_time=None, speaker=None,):
        self.id = id
        self.content = content
        self.create_time = create_time
        self.speaker = speaker

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.speaker = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChatVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 3)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.speaker is not None:
            oprot.writeFieldBegin('speaker', TType.BYTE, 4)
            oprot.writeByte(self.speaker)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatsVO(object):
    """
    Attributes:
     - pageNo
     - pageSize
     - totalPage
     - totalRow
     - chatLogs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pageNo', None, None, ),  # 1
        (2, TType.I32, 'pageSize', None, None, ),  # 2
        (3, TType.I32, 'totalPage', None, None, ),  # 3
        (4, TType.I32, 'totalRow', None, None, ),  # 4
        (5, TType.LIST, 'chatLogs', (TType.STRUCT, (ChatVO, ChatVO.thrift_spec), False), None, ),  # 5
    )

    def __init__(self, pageNo=None, pageSize=None, totalPage=None, totalRow=None, chatLogs=None,):
        self.pageNo = pageNo
        self.pageSize = pageSize
        self.totalPage = totalPage
        self.totalRow = totalRow
        self.chatLogs = chatLogs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pageNo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.totalPage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.totalRow = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.chatLogs = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ChatVO()
                        _elem19.read(iprot)
                        self.chatLogs.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ChatsVO')
        if self.pageNo is not None:
            oprot.writeFieldBegin('pageNo', TType.I32, 1)
            oprot.writeI32(self.pageNo)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 2)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        if self.totalPage is not None:
            oprot.writeFieldBegin('totalPage', TType.I32, 3)
            oprot.writeI32(self.totalPage)
            oprot.writeFieldEnd()
        if self.totalRow is not None:
            oprot.writeFieldBegin('totalRow', TType.I32, 4)
            oprot.writeI32(self.totalRow)
            oprot.writeFieldEnd()
        if self.chatLogs is not None:
            oprot.writeFieldBegin('chatLogs', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.chatLogs))
            for iter20 in self.chatLogs:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResultOfSaveRoomVO(object):
    """
    Attributes:
     - id
     - positionId
     - positionTitle
     - companyName
     - city
     - salaryBottom
     - salaryTop
     - positionUpdateTime
     - hrName
     - hrHeadImgUrl
     - hrId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'positionId', None, None, ),  # 2
        (3, TType.STRING, 'positionTitle', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'companyName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'city', 'UTF8', None, ),  # 5
        (6, TType.I32, 'salaryBottom', None, None, ),  # 6
        (7, TType.I32, 'salaryTop', None, None, ),  # 7
        (8, TType.STRING, 'positionUpdateTime', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'hrName', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'hrHeadImgUrl', 'UTF8', None, ),  # 10
        (11, TType.I32, 'hrId', None, None, ),  # 11
    )

    def __init__(self, id=None, positionId=None, positionTitle=None, companyName=None, city=None, salaryBottom=None, salaryTop=None, positionUpdateTime=None, hrName=None, hrHeadImgUrl=None, hrId=None,):
        self.id = id
        self.positionId = positionId
        self.positionTitle = positionTitle
        self.companyName = companyName
        self.city = city
        self.salaryBottom = salaryBottom
        self.salaryTop = salaryTop
        self.positionUpdateTime = positionUpdateTime
        self.hrName = hrName
        self.hrHeadImgUrl = hrHeadImgUrl
        self.hrId = hrId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.positionTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.companyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.city = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.salaryBottom = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.salaryTop = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.positionUpdateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.hrName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.hrHeadImgUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.hrId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ResultOfSaveRoomVO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 2)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.positionTitle is not None:
            oprot.writeFieldBegin('positionTitle', TType.STRING, 3)
            oprot.writeString(self.positionTitle.encode('utf-8') if sys.version_info[0] == 2 else self.positionTitle)
            oprot.writeFieldEnd()
        if self.companyName is not None:
            oprot.writeFieldBegin('companyName', TType.STRING, 4)
            oprot.writeString(self.companyName.encode('utf-8') if sys.version_info[0] == 2 else self.companyName)
            oprot.writeFieldEnd()
        if self.city is not None:
            oprot.writeFieldBegin('city', TType.STRING, 5)
            oprot.writeString(self.city.encode('utf-8') if sys.version_info[0] == 2 else self.city)
            oprot.writeFieldEnd()
        if self.salaryBottom is not None:
            oprot.writeFieldBegin('salaryBottom', TType.I32, 6)
            oprot.writeI32(self.salaryBottom)
            oprot.writeFieldEnd()
        if self.salaryTop is not None:
            oprot.writeFieldBegin('salaryTop', TType.I32, 7)
            oprot.writeI32(self.salaryTop)
            oprot.writeFieldEnd()
        if self.positionUpdateTime is not None:
            oprot.writeFieldBegin('positionUpdateTime', TType.STRING, 8)
            oprot.writeString(self.positionUpdateTime.encode('utf-8') if sys.version_info[0] == 2 else self.positionUpdateTime)
            oprot.writeFieldEnd()
        if self.hrName is not None:
            oprot.writeFieldBegin('hrName', TType.STRING, 9)
            oprot.writeString(self.hrName.encode('utf-8') if sys.version_info[0] == 2 else self.hrName)
            oprot.writeFieldEnd()
        if self.hrHeadImgUrl is not None:
            oprot.writeFieldBegin('hrHeadImgUrl', TType.STRING, 10)
            oprot.writeString(self.hrHeadImgUrl.encode('utf-8') if sys.version_info[0] == 2 else self.hrHeadImgUrl)
            oprot.writeFieldEnd()
        if self.hrId is not None:
            oprot.writeFieldBegin('hrId', TType.I32, 11)
            oprot.writeI32(self.hrId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
