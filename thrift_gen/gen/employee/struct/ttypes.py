#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class BindStatus(object):
    BINDED = 0
    UNBIND = 1
    PENDING = 2

    _VALUES_TO_NAMES = {
        0: "BINDED",
        1: "UNBIND",
        2: "PENDING",
    }

    _NAMES_TO_VALUES = {
        "BINDED": 0,
        "UNBIND": 1,
        "PENDING": 2,
    }


class BindType(object):
    EMAIL = 0
    CUSTOMFIELD = 1
    QUESTIONS = 2

    _VALUES_TO_NAMES = {
        0: "EMAIL",
        1: "CUSTOMFIELD",
        2: "QUESTIONS",
    }

    _NAMES_TO_VALUES = {
        "EMAIL": 0,
        "CUSTOMFIELD": 1,
        "QUESTIONS": 2,
    }


class Employee(object):
    """
    Attributes:
     - id
     - employeeId
     - companyId
     - sysuerId
     - mobile
     - wxuserId
     - cname
     - award
     - isRpSent
     - customFieldValues
     - email
     - customField
     - authMode
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'employeeId', 'UTF8', None, ),  # 2
        (3, TType.I32, 'companyId', None, None, ),  # 3
        (4, TType.I32, 'sysuerId', None, None, ),  # 4
        (5, TType.STRING, 'mobile', 'UTF8', None, ),  # 5
        (6, TType.I32, 'wxuserId', None, None, ),  # 6
        (7, TType.STRING, 'cname', 'UTF8', None, ),  # 7
        (8, TType.I32, 'award', None, None, ),  # 8
        (9, TType.BOOL, 'isRpSent', None, None, ),  # 9
        (10, TType.STRING, 'customFieldValues', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'email', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'customField', 'UTF8', None, ),  # 12
        (13, TType.I32, 'authMode', None, None, ),  # 13
    )

    def __init__(self, id=None, employeeId=None, companyId=None, sysuerId=None, mobile=None, wxuserId=None, cname=None, award=None, isRpSent=None, customFieldValues=None, email=None, customField=None, authMode=None,):
        self.id = id
        self.employeeId = employeeId
        self.companyId = companyId
        self.sysuerId = sysuerId
        self.mobile = mobile
        self.wxuserId = wxuserId
        self.cname = cname
        self.award = award
        self.isRpSent = isRpSent
        self.customFieldValues = customFieldValues
        self.email = email
        self.customField = customField
        self.authMode = authMode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.employeeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.sysuerId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.wxuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.cname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.award = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isRpSent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.customFieldValues = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.customField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.authMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Employee')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.employeeId is not None:
            oprot.writeFieldBegin('employeeId', TType.STRING, 2)
            oprot.writeString(self.employeeId.encode('utf-8') if sys.version_info[0] == 2 else self.employeeId)
            oprot.writeFieldEnd()
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 3)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.sysuerId is not None:
            oprot.writeFieldBegin('sysuerId', TType.I32, 4)
            oprot.writeI32(self.sysuerId)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 5)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.wxuserId is not None:
            oprot.writeFieldBegin('wxuserId', TType.I32, 6)
            oprot.writeI32(self.wxuserId)
            oprot.writeFieldEnd()
        if self.cname is not None:
            oprot.writeFieldBegin('cname', TType.STRING, 7)
            oprot.writeString(self.cname.encode('utf-8') if sys.version_info[0] == 2 else self.cname)
            oprot.writeFieldEnd()
        if self.award is not None:
            oprot.writeFieldBegin('award', TType.I32, 8)
            oprot.writeI32(self.award)
            oprot.writeFieldEnd()
        if self.isRpSent is not None:
            oprot.writeFieldBegin('isRpSent', TType.BOOL, 9)
            oprot.writeBool(self.isRpSent)
            oprot.writeFieldEnd()
        if self.customFieldValues is not None:
            oprot.writeFieldBegin('customFieldValues', TType.STRING, 10)
            oprot.writeString(self.customFieldValues.encode('utf-8') if sys.version_info[0] == 2 else self.customFieldValues)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 11)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.customField is not None:
            oprot.writeFieldBegin('customField', TType.STRING, 12)
            oprot.writeString(self.customField.encode('utf-8') if sys.version_info[0] == 2 else self.customField)
            oprot.writeFieldEnd()
        if self.authMode is not None:
            oprot.writeFieldBegin('authMode', TType.I32, 13)
            oprot.writeI32(self.authMode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmployeeResponse(object):
    """
    Attributes:
     - bindStatus
     - employee
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'bindStatus', None, None, ),  # 1
        (2, TType.STRUCT, 'employee', (Employee, Employee.thrift_spec), None, ),  # 2
    )

    def __init__(self, bindStatus=None, employee=None,):
        self.bindStatus = bindStatus
        self.employee = employee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.bindStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.employee = Employee()
                    self.employee.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmployeeResponse')
        if self.bindStatus is not None:
            oprot.writeFieldBegin('bindStatus', TType.I32, 1)
            oprot.writeI32(self.bindStatus)
            oprot.writeFieldEnd()
        if self.employee is not None:
            oprot.writeFieldBegin('employee', TType.STRUCT, 2)
            self.employee.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.bindStatus is None:
            raise TProtocolException(message='Required field bindStatus is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmployeeVerificationConf(object):
    """
    Attributes:
     - companyId
     - emailSuffix
     - authMode
     - authCode
     - custom
     - questions
     - customHint
     - bindSuccessMessage
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'companyId', None, None, ),  # 1
        (2, TType.LIST, 'emailSuffix', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.I16, 'authMode', None, None, ),  # 3
        (4, TType.STRING, 'authCode', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'custom', 'UTF8', None, ),  # 5
        (6, TType.LIST, 'questions', (TType.MAP, (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), False), None, ),  # 6
        (7, TType.STRING, 'customHint', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'bindSuccessMessage', 'UTF8', None, ),  # 8
    )

    def __init__(self, companyId=None, emailSuffix=None, authMode=None, authCode=None, custom=None, questions=None, customHint=None, bindSuccessMessage=None,):
        self.companyId = companyId
        self.emailSuffix = emailSuffix
        self.authMode = authMode
        self.authCode = authCode
        self.custom = custom
        self.questions = questions
        self.customHint = customHint
        self.bindSuccessMessage = bindSuccessMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.emailSuffix = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.emailSuffix.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.authMode = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.authCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.custom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.questions = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = {}
                        (_ktype13, _vtype14, _size12) = iprot.readMapBegin()
                        for _i16 in range(_size12):
                            _key17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _elem11[_key17] = _val18
                        iprot.readMapEnd()
                        self.questions.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.customHint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bindSuccessMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmployeeVerificationConf')
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 1)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.emailSuffix is not None:
            oprot.writeFieldBegin('emailSuffix', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.emailSuffix))
            for iter19 in self.emailSuffix:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.authMode is not None:
            oprot.writeFieldBegin('authMode', TType.I16, 3)
            oprot.writeI16(self.authMode)
            oprot.writeFieldEnd()
        if self.authCode is not None:
            oprot.writeFieldBegin('authCode', TType.STRING, 4)
            oprot.writeString(self.authCode.encode('utf-8') if sys.version_info[0] == 2 else self.authCode)
            oprot.writeFieldEnd()
        if self.custom is not None:
            oprot.writeFieldBegin('custom', TType.STRING, 5)
            oprot.writeString(self.custom.encode('utf-8') if sys.version_info[0] == 2 else self.custom)
            oprot.writeFieldEnd()
        if self.questions is not None:
            oprot.writeFieldBegin('questions', TType.LIST, 6)
            oprot.writeListBegin(TType.MAP, len(self.questions))
            for iter20 in self.questions:
                oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter20))
                for kiter21, viter22 in iter20.items():
                    oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                    oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
                oprot.writeMapEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.customHint is not None:
            oprot.writeFieldBegin('customHint', TType.STRING, 7)
            oprot.writeString(self.customHint.encode('utf-8') if sys.version_info[0] == 2 else self.customHint)
            oprot.writeFieldEnd()
        if self.bindSuccessMessage is not None:
            oprot.writeFieldBegin('bindSuccessMessage', TType.STRING, 8)
            oprot.writeString(self.bindSuccessMessage.encode('utf-8') if sys.version_info[0] == 2 else self.bindSuccessMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.companyId is None:
            raise TProtocolException(message='Required field companyId is unset!')
        if self.authMode is None:
            raise TProtocolException(message='Required field authMode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmployeeVerificationConfResponse(object):
    """
    Attributes:
     - exists
     - employeeVerificationConf
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'exists', None, None, ),  # 1
        (2, TType.STRUCT, 'employeeVerificationConf', (EmployeeVerificationConf, EmployeeVerificationConf.thrift_spec), None, ),  # 2
    )

    def __init__(self, exists=None, employeeVerificationConf=None,):
        self.exists = exists
        self.employeeVerificationConf = employeeVerificationConf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.employeeVerificationConf = EmployeeVerificationConf()
                    self.employeeVerificationConf.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmployeeVerificationConfResponse')
        if self.exists is not None:
            oprot.writeFieldBegin('exists', TType.BOOL, 1)
            oprot.writeBool(self.exists)
            oprot.writeFieldEnd()
        if self.employeeVerificationConf is not None:
            oprot.writeFieldBegin('employeeVerificationConf', TType.STRUCT, 2)
            self.employeeVerificationConf.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.exists is None:
            raise TProtocolException(message='Required field exists is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - success
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'success', None, None, ),  # 1
        (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    )

    def __init__(self, success=None, message=None,):
        self.success = success
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmployeeCustomFieldsConf(object):
    """
    Attributes:
     - id
     - companyId
     - fieldName
     - fieldValues
     - mandatory
     - order
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'companyId', None, None, ),  # 2
        (3, TType.STRING, 'fieldName', 'UTF8', None, ),  # 3
        (4, TType.LIST, 'fieldValues', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.BOOL, 'mandatory', None, None, ),  # 5
        (6, TType.I32, 'order', None, None, ),  # 6
    )

    def __init__(self, id=None, companyId=None, fieldName=None, fieldValues=None, mandatory=None, order=None,):
        self.id = id
        self.companyId = companyId
        self.fieldName = fieldName
        self.fieldValues = fieldValues
        self.mandatory = mandatory
        self.order = order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fieldValues = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.fieldValues.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.mandatory = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('EmployeeCustomFieldsConf')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 2)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 3)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.fieldValues is not None:
            oprot.writeFieldBegin('fieldValues', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.fieldValues))
            for iter29 in self.fieldValues:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mandatory is not None:
            oprot.writeFieldBegin('mandatory', TType.BOOL, 5)
            oprot.writeBool(self.mandatory)
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 6)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.companyId is None:
            raise TProtocolException(message='Required field companyId is unset!')
        if self.fieldName is None:
            raise TProtocolException(message='Required field fieldName is unset!')
        if self.fieldValues is None:
            raise TProtocolException(message='Required field fieldValues is unset!')
        if self.mandatory is None:
            raise TProtocolException(message='Required field mandatory is unset!')
        if self.order is None:
            raise TProtocolException(message='Required field order is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BindingParams(object):
    """
    Attributes:
     - type
     - userId
     - companyId
     - email
     - mobile
     - customField
     - name
     - answer1
     - answer2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, None, ),  # 1
        (2, TType.I32, 'userId', None, None, ),  # 2
        (3, TType.I32, 'companyId', None, None, ),  # 3
        (4, TType.STRING, 'email', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'mobile', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'customField', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'name', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'answer1', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'answer2', 'UTF8', None, ),  # 9
    )

    def __init__(self, type=None, userId=None, companyId=None, email=None, mobile=None, customField=None, name=None, answer1=None, answer2=None,):
        self.type = type
        self.userId = userId
        self.companyId = companyId
        self.email = email
        self.mobile = mobile
        self.customField = customField
        self.name = name
        self.answer1 = answer1
        self.answer2 = answer2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.companyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.mobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.customField = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.answer1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.answer2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BindingParams')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 2)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.companyId is not None:
            oprot.writeFieldBegin('companyId', TType.I32, 3)
            oprot.writeI32(self.companyId)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 4)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.mobile is not None:
            oprot.writeFieldBegin('mobile', TType.STRING, 5)
            oprot.writeString(self.mobile.encode('utf-8') if sys.version_info[0] == 2 else self.mobile)
            oprot.writeFieldEnd()
        if self.customField is not None:
            oprot.writeFieldBegin('customField', TType.STRING, 6)
            oprot.writeString(self.customField.encode('utf-8') if sys.version_info[0] == 2 else self.customField)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 7)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.answer1 is not None:
            oprot.writeFieldBegin('answer1', TType.STRING, 8)
            oprot.writeString(self.answer1.encode('utf-8') if sys.version_info[0] == 2 else self.answer1)
            oprot.writeFieldEnd()
        if self.answer2 is not None:
            oprot.writeFieldBegin('answer2', TType.STRING, 9)
            oprot.writeString(self.answer2.encode('utf-8') if sys.version_info[0] == 2 else self.answer2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.userId is None:
            raise TProtocolException(message='Required field userId is unset!')
        if self.companyId is None:
            raise TProtocolException(message='Required field companyId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Reward(object):
    """
    Attributes:
     - reason
     - points
     - updateTime
     - title
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'reason', 'UTF8', None, ),  # 1
        (2, TType.I32, 'points', None, None, ),  # 2
        (3, TType.STRING, 'updateTime', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'title', 'UTF8', None, ),  # 4
    )

    def __init__(self, reason=None, points=None, updateTime=None, title=None,):
        self.reason = reason
        self.points = points
        self.updateTime = updateTime
        self.title = title

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.points = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.updateTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Reward')
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 1)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.I32, 2)
            oprot.writeI32(self.points)
            oprot.writeFieldEnd()
        if self.updateTime is not None:
            oprot.writeFieldBegin('updateTime', TType.STRING, 3)
            oprot.writeString(self.updateTime.encode('utf-8') if sys.version_info[0] == 2 else self.updateTime)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 4)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RewardConfig(object):
    """
    Attributes:
     - id
     - points
     - statusName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'points', None, None, ),  # 2
        (3, TType.STRING, 'statusName', 'UTF8', None, ),  # 3
    )

    def __init__(self, id=None, points=None, statusName=None,):
        self.id = id
        self.points = points
        self.statusName = statusName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.points = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.statusName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RewardConfig')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.I32, 2)
            oprot.writeI32(self.points)
            oprot.writeFieldEnd()
        if self.statusName is not None:
            oprot.writeFieldBegin('statusName', TType.STRING, 3)
            oprot.writeString(self.statusName.encode('utf-8') if sys.version_info[0] == 2 else self.statusName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RewardsResponse(object):
    """
    Attributes:
     - total
     - rewards
     - rewardConfigs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'total', None, None, ),  # 1
        (2, TType.LIST, 'rewards', (TType.STRUCT, (Reward, Reward.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'rewardConfigs', (TType.STRUCT, (RewardConfig, RewardConfig.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, total=None, rewards=None, rewardConfigs=None,):
        self.total = total
        self.rewards = rewards
        self.rewardConfigs = rewardConfigs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.total = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rewards = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = Reward()
                        _elem35.read(iprot)
                        self.rewards.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.rewardConfigs = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = RewardConfig()
                        _elem41.read(iprot)
                        self.rewardConfigs.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RewardsResponse')
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I32, 1)
            oprot.writeI32(self.total)
            oprot.writeFieldEnd()
        if self.rewards is not None:
            oprot.writeFieldBegin('rewards', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.rewards))
            for iter42 in self.rewards:
                iter42.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rewardConfigs is not None:
            oprot.writeFieldBegin('rewardConfigs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.rewardConfigs))
            for iter43 in self.rewardConfigs:
                iter43.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecomInfo(object):
    """
    Attributes:
     - recomed
     - appId
     - applierName
     - recom2ndNickname
     - positionTitle
     - clickTime
     - recomTime
     - status
     - applierId
     - applierWxuserId
     - applierNickname
     - candidateRecomRecordId
     - appTime
     - isInterested
     - view_number
     - headimgurl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BOOL, 'recomed', None, False, ),  # 1
        (2, TType.I32, 'appId', None, None, ),  # 2
        (3, TType.STRING, 'applierName', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'recom2ndNickname', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'positionTitle', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'clickTime', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'recomTime', 'UTF8', None, ),  # 7
        (8, TType.I32, 'status', None, None, ),  # 8
        (9, TType.I32, 'applierId', None, None, ),  # 9
        (10, TType.I32, 'applierWxuserId', None, None, ),  # 10
        (11, TType.STRING, 'applierNickname', 'UTF8', None, ),  # 11
        (12, TType.I32, 'candidateRecomRecordId', None, None, ),  # 12
        (13, TType.STRING, 'appTime', 'UTF8', None, ),  # 13
        (14, TType.BOOL, 'isInterested', None, False, ),  # 14
        (15, TType.I32, 'view_number', None, 0, ),  # 15
        (16, TType.STRING, 'headimgurl', 'UTF8', "", ),  # 16
    )

    def __init__(self, recomed=thrift_spec[1][4], appId=None, applierName=None, recom2ndNickname=None, positionTitle=None, clickTime=None, recomTime=None, status=None, applierId=None, applierWxuserId=None, applierNickname=None, candidateRecomRecordId=None, appTime=None, isInterested=thrift_spec[14][4], view_number=thrift_spec[15][4], headimgurl=thrift_spec[16][4],):
        self.recomed = recomed
        self.appId = appId
        self.applierName = applierName
        self.recom2ndNickname = recom2ndNickname
        self.positionTitle = positionTitle
        self.clickTime = clickTime
        self.recomTime = recomTime
        self.status = status
        self.applierId = applierId
        self.applierWxuserId = applierWxuserId
        self.applierNickname = applierNickname
        self.candidateRecomRecordId = candidateRecomRecordId
        self.appTime = appTime
        self.isInterested = isInterested
        self.view_number = view_number
        self.headimgurl = headimgurl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.recomed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.appId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.applierName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.recom2ndNickname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.positionTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clickTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.recomTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.applierId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.applierWxuserId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.applierNickname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.candidateRecomRecordId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.appTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.isInterested = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.view_number = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.headimgurl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RecomInfo')
        if self.recomed is not None:
            oprot.writeFieldBegin('recomed', TType.BOOL, 1)
            oprot.writeBool(self.recomed)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.I32, 2)
            oprot.writeI32(self.appId)
            oprot.writeFieldEnd()
        if self.applierName is not None:
            oprot.writeFieldBegin('applierName', TType.STRING, 3)
            oprot.writeString(self.applierName.encode('utf-8') if sys.version_info[0] == 2 else self.applierName)
            oprot.writeFieldEnd()
        if self.recom2ndNickname is not None:
            oprot.writeFieldBegin('recom2ndNickname', TType.STRING, 4)
            oprot.writeString(self.recom2ndNickname.encode('utf-8') if sys.version_info[0] == 2 else self.recom2ndNickname)
            oprot.writeFieldEnd()
        if self.positionTitle is not None:
            oprot.writeFieldBegin('positionTitle', TType.STRING, 5)
            oprot.writeString(self.positionTitle.encode('utf-8') if sys.version_info[0] == 2 else self.positionTitle)
            oprot.writeFieldEnd()
        if self.clickTime is not None:
            oprot.writeFieldBegin('clickTime', TType.STRING, 6)
            oprot.writeString(self.clickTime.encode('utf-8') if sys.version_info[0] == 2 else self.clickTime)
            oprot.writeFieldEnd()
        if self.recomTime is not None:
            oprot.writeFieldBegin('recomTime', TType.STRING, 7)
            oprot.writeString(self.recomTime.encode('utf-8') if sys.version_info[0] == 2 else self.recomTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.applierId is not None:
            oprot.writeFieldBegin('applierId', TType.I32, 9)
            oprot.writeI32(self.applierId)
            oprot.writeFieldEnd()
        if self.applierWxuserId is not None:
            oprot.writeFieldBegin('applierWxuserId', TType.I32, 10)
            oprot.writeI32(self.applierWxuserId)
            oprot.writeFieldEnd()
        if self.applierNickname is not None:
            oprot.writeFieldBegin('applierNickname', TType.STRING, 11)
            oprot.writeString(self.applierNickname.encode('utf-8') if sys.version_info[0] == 2 else self.applierNickname)
            oprot.writeFieldEnd()
        if self.candidateRecomRecordId is not None:
            oprot.writeFieldBegin('candidateRecomRecordId', TType.I32, 12)
            oprot.writeI32(self.candidateRecomRecordId)
            oprot.writeFieldEnd()
        if self.appTime is not None:
            oprot.writeFieldBegin('appTime', TType.STRING, 13)
            oprot.writeString(self.appTime.encode('utf-8') if sys.version_info[0] == 2 else self.appTime)
            oprot.writeFieldEnd()
        if self.isInterested is not None:
            oprot.writeFieldBegin('isInterested', TType.BOOL, 14)
            oprot.writeBool(self.isInterested)
            oprot.writeFieldEnd()
        if self.view_number is not None:
            oprot.writeFieldBegin('view_number', TType.I32, 15)
            oprot.writeI32(self.view_number)
            oprot.writeFieldEnd()
        if self.headimgurl is not None:
            oprot.writeFieldBegin('headimgurl', TType.STRING, 16)
            oprot.writeString(self.headimgurl.encode('utf-8') if sys.version_info[0] == 2 else self.headimgurl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.recomed is None:
            raise TProtocolException(message='Required field recomed is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.applierName is None:
            raise TProtocolException(message='Required field applierName is unset!')
        if self.recom2ndNickname is None:
            raise TProtocolException(message='Required field recom2ndNickname is unset!')
        if self.positionTitle is None:
            raise TProtocolException(message='Required field positionTitle is unset!')
        if self.clickTime is None:
            raise TProtocolException(message='Required field clickTime is unset!')
        if self.recomTime is None:
            raise TProtocolException(message='Required field recomTime is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.applierId is None:
            raise TProtocolException(message='Required field applierId is unset!')
        if self.applierWxuserId is None:
            raise TProtocolException(message='Required field applierWxuserId is unset!')
        if self.applierNickname is None:
            raise TProtocolException(message='Required field applierNickname is unset!')
        if self.candidateRecomRecordId is None:
            raise TProtocolException(message='Required field candidateRecomRecordId is unset!')
        if self.appTime is None:
            raise TProtocolException(message='Required field appTime is unset!')
        if self.isInterested is None:
            raise TProtocolException(message='Required field isInterested is unset!')
        if self.view_number is None:
            raise TProtocolException(message='Required field view_number is unset!')
        if self.headimgurl is None:
            raise TProtocolException(message='Required field headimgurl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
