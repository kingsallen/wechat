#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.gen.candidate.service import CandidateService
from thrift_gen.gen.candidate.service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void glancePosition(i32 userId, i32 positionId, i32 shareChainId)')
    print('  Response changeInteresting(i32 user_id, i32 position_id, i8 is_interested)')
    print('   candidateList(CandidateListParam param)')
    print('  RecommendResult getRecomendations(i32 companyId,  idList)')
    print('  RecommendResult recommend(RecommmendParam param)')
    print('  RecomRecordResult getRecommendation(i32 id, i32 postUserId)')
    print('  SortResult getRecommendatorySorting(i32 postUserId, i32 companyId)')
    print('  RecommendResult ignore(i32 id, i32 companyId, i32 postUserId, string clickTime)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = CandidateService.Client(protocol)
transport.open()

if cmd == 'glancePosition':
    if len(args) != 3:
        print('glancePosition requires 3 args')
        sys.exit(1)
    pp.pprint(client.glancePosition(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'changeInteresting':
    if len(args) != 3:
        print('changeInteresting requires 3 args')
        sys.exit(1)
    pp.pprint(client.changeInteresting(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'candidateList':
    if len(args) != 1:
        print('candidateList requires 1 args')
        sys.exit(1)
    pp.pprint(client.candidateList(eval(args[0]),))

elif cmd == 'getRecomendations':
    if len(args) != 2:
        print('getRecomendations requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecomendations(eval(args[0]), eval(args[1]),))

elif cmd == 'recommend':
    if len(args) != 1:
        print('recommend requires 1 args')
        sys.exit(1)
    pp.pprint(client.recommend(eval(args[0]),))

elif cmd == 'getRecommendation':
    if len(args) != 2:
        print('getRecommendation requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecommendation(eval(args[0]), eval(args[1]),))

elif cmd == 'getRecommendatorySorting':
    if len(args) != 2:
        print('getRecommendatorySorting requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecommendatorySorting(eval(args[0]), eval(args[1]),))

elif cmd == 'ignore':
    if len(args) != 4:
        print('ignore requires 4 args')
        sys.exit(1)
    pp.pprint(client.ignore(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
