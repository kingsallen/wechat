#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:tornado
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from tornado import gen
from tornado import concurrent


class Iface(object):
    def glancePosition(self, userId, positionId, shareChainId):
        """
        Parameters:
         - userId
         - positionId
         - shareChainId
        """
        pass

    def changeInteresting(self, user_id, position_id, is_interested):
        """
        Parameters:
         - user_id
         - position_id
         - is_interested
        """
        pass


class Client(Iface):
    def __init__(self, transport, iprot_factory, oprot_factory=None):
        self._transport = transport
        self._iprot_factory = iprot_factory
        self._oprot_factory = (oprot_factory if oprot_factory is not None
                               else iprot_factory)
        self._seqid = 0
        self._reqs = {}
        self._transport.io_loop.spawn_callback(self._start_receiving)

    @gen.engine
    def _start_receiving(self):
        while True:
            try:
                frame = yield self._transport.readFrame()
            except TTransport.TTransportException as e:
                for future in self._reqs.values():
                    future.set_exception(e)
                self._reqs = {}
                return
            tr = TTransport.TMemoryBuffer(frame)
            iprot = self._iprot_factory.getProtocol(tr)
            (fname, mtype, rseqid) = iprot.readMessageBegin()
            method = getattr(self, 'recv_' + fname)
            future = self._reqs.pop(rseqid, None)
            if not future:
                # future has already been discarded
                continue
            try:
                result = method(iprot, mtype, rseqid)
            except Exception as e:
                future.set_exception(e)
            else:
                future.set_result(result)

    def glancePosition(self, userId, positionId, shareChainId):
        """
        Parameters:
         - userId
         - positionId
         - shareChainId
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_glancePosition(userId, positionId, shareChainId)
        return future

    def send_glancePosition(self, userId, positionId, shareChainId):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('glancePosition', TMessageType.CALL, self._seqid)
        args = glancePosition_args()
        args.userId = userId
        args.positionId = positionId
        args.shareChainId = shareChainId
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_glancePosition(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = glancePosition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def changeInteresting(self, user_id, position_id, is_interested):
        """
        Parameters:
         - user_id
         - position_id
         - is_interested
        """
        self._seqid += 1
        future = self._reqs[self._seqid] = concurrent.Future()
        self.send_changeInteresting(user_id, position_id, is_interested)
        return future

    def send_changeInteresting(self, user_id, position_id, is_interested):
        oprot = self._oprot_factory.getProtocol(self._transport)
        oprot.writeMessageBegin('changeInteresting', TMessageType.CALL, self._seqid)
        args = changeInteresting_args()
        args.user_id = user_id
        args.position_id = position_id
        args.is_interested = is_interested
        args.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def recv_changeInteresting(self, iprot, mtype, rseqid):
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = changeInteresting_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "changeInteresting failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["glancePosition"] = Processor.process_glancePosition
        self._processMap["changeInteresting"] = Processor.process_changeInteresting

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            return self._processMap[name](self, seqid, iprot, oprot)

    @gen.coroutine
    def process_glancePosition(self, seqid, iprot, oprot):
        args = glancePosition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = glancePosition_result()
        yield gen.maybe_future(self._handler.glancePosition(args.userId, args.positionId, args.shareChainId))
        oprot.writeMessageBegin("glancePosition", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    @gen.coroutine
    def process_changeInteresting(self, seqid, iprot, oprot):
        args = changeInteresting_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = changeInteresting_result()
        result.success = yield gen.maybe_future(self._handler.changeInteresting(args.user_id, args.position_id, args.is_interested))
        oprot.writeMessageBegin("changeInteresting", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class glancePosition_args(object):
    """
    Attributes:
     - userId
     - positionId
     - shareChainId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'userId', None, None, ),  # 1
        (2, TType.I32, 'positionId', None, None, ),  # 2
        (3, TType.I32, 'shareChainId', None, None, ),  # 3
    )

    def __init__(self, userId=None, positionId=None, shareChainId=None,):
        self.userId = userId
        self.positionId = positionId
        self.shareChainId = shareChainId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.userId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.positionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.shareChainId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('glancePosition_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I32, 1)
            oprot.writeI32(self.userId)
            oprot.writeFieldEnd()
        if self.positionId is not None:
            oprot.writeFieldBegin('positionId', TType.I32, 2)
            oprot.writeI32(self.positionId)
            oprot.writeFieldEnd()
        if self.shareChainId is not None:
            oprot.writeFieldBegin('shareChainId', TType.I32, 3)
            oprot.writeI32(self.shareChainId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class glancePosition_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('glancePosition_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class changeInteresting_args(object):
    """
    Attributes:
     - user_id
     - position_id
     - is_interested
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'user_id', None, None, ),  # 1
        (2, TType.I32, 'position_id', None, None, ),  # 2
        (3, TType.BYTE, 'is_interested', None, None, ),  # 3
    )

    def __init__(self, user_id=None, position_id=None, is_interested=None,):
        self.user_id = user_id
        self.position_id = position_id
        self.is_interested = is_interested

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.user_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.position_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.is_interested = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('changeInteresting_args')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I32, 1)
            oprot.writeI32(self.user_id)
            oprot.writeFieldEnd()
        if self.position_id is not None:
            oprot.writeFieldBegin('position_id', TType.I32, 2)
            oprot.writeI32(self.position_id)
            oprot.writeFieldEnd()
        if self.is_interested is not None:
            oprot.writeFieldBegin('is_interested', TType.BYTE, 3)
            oprot.writeByte(self.is_interested)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class changeInteresting_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (thrift_gen.gen.common.struct.ttypes.Response, thrift_gen.gen.common.struct.ttypes.Response.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = thrift_gen.gen.common.struct.ttypes.Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('changeInteresting_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
